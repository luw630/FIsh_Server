// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_Fish.proto

#ifndef PROTOBUF_Packet_5fFish_2eproto__INCLUDED
#define PROTOBUF_Packet_5fFish_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Packet_Base.pb.h"
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Packet_5fFish_2eproto();
void protobuf_AssignDesc_Packet_5fFish_2eproto();
void protobuf_ShutdownFile_Packet_5fFish_2eproto();

class t_Vector2;
class t_Vector3;
class t_fish_seat;
class t_fish_table;
class t_FishPlayer;
class SC_FishGameData;
class SC_FishTables;
class CS_FishEnterTable;
class SC_FishEnterTableRst;
class SC_FishPlayerLeave;
class SC_FishNotifyAddPlayerMySelf;
class SC_FishNotifyAddPlayer;
class SC_FishNotifyFireBullet;
class SC_FishNotifyFireFish;
class SC_FishNotifyAddBullet;
class SC_FishNotifyAddBomb;
class SC_FishNotifyAddFish;
class SC_FishNotifyRmvBullet;
class SC_FishNotifyRmvFish;
class SC_FishNotifyRmvPlayer;
class CS_FishReqSwitchCannon;
class SC_FishNotifySwitchCannon;
class CS_FishChangeFireCost;
class SC_FishChangeFireCost;
class CS_FishSendBullet;
class SC_FishNotifyHitFish;
class SC_FishLockFish;
class SC_FishRmvDrillBomb;
class CS_FishNotifyHitted;
class SC_FishEnterNextLvl;

enum emBulletType {
  BulletType_fishingnet = 1,
  BulletType_normal = 2,
  BulletType_electromagnetism = 3,
  BulletType_drill = 4,
  BulletType_bomb = 5,
  BulletType_laser = 6,
  BulletType_max = 7
};
bool emBulletType_IsValid(int value);
const emBulletType emBulletType_MIN = BulletType_fishingnet;
const emBulletType emBulletType_MAX = BulletType_max;
const int emBulletType_ARRAYSIZE = emBulletType_MAX + 1;

const ::google::protobuf::EnumDescriptor* emBulletType_descriptor();
inline const ::std::string& emBulletType_Name(emBulletType value) {
  return ::google::protobuf::internal::NameOfEnum(
    emBulletType_descriptor(), value);
}
inline bool emBulletType_Parse(
    const ::std::string& name, emBulletType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<emBulletType>(
    emBulletType_descriptor(), name, value);
}
enum emPacket_Fish {
  em_Fish_Begin = 768,
  em_CS_FishGameData = 769,
  em_SC_FishGameData = 770,
  em_CS_FishTables = 771,
  em_SC_FishTables = 772,
  em_CS_FishEnterTable = 773,
  em_SC_FishEnterTableRst = 774,
  em_SC_FishNotifyAddPlayerMySelf = 775,
  em_SC_FishNotifyAddPlayer = 776,
  em_SC_FishNotifyFireBullet = 777,
  em_SC_FishNotifyFireFish = 778,
  em_SC_FishNotifyAddBullet = 779,
  em_SC_FishNotifyAddBomb = 780,
  em_SC_FishNotifyAddFish = 781,
  em_SC_FishNotifyRmvBullet = 782,
  em_SC_FishNotifyRmvFish = 783,
  em_SC_FishNotifyRmvPlayer = 784,
  em_CS_FishReqSwitchCannon = 785,
  em_SC_FishNotifySwitchCannon = 786,
  em_CS_FishChangeFireCost = 787,
  em_SC_FishChangeFireCost = 788,
  em_CS_FishSendBullet = 789,
  em_SC_FishNotifyHitFish = 790,
  em_SC_FishLockFish = 791,
  em_SC_FishRmvDrillBomb = 792,
  em_CS_FishNotifyHitted = 793,
  em_SC_FishAllFishLeave = 794,
  em_SC_FishEnterNextLvl = 795,
  em_Fish_End = 1023
};
bool emPacket_Fish_IsValid(int value);
const emPacket_Fish emPacket_Fish_MIN = em_Fish_Begin;
const emPacket_Fish emPacket_Fish_MAX = em_Fish_End;
const int emPacket_Fish_ARRAYSIZE = emPacket_Fish_MAX + 1;

const ::google::protobuf::EnumDescriptor* emPacket_Fish_descriptor();
inline const ::std::string& emPacket_Fish_Name(emPacket_Fish value) {
  return ::google::protobuf::internal::NameOfEnum(
    emPacket_Fish_descriptor(), value);
}
inline bool emPacket_Fish_Parse(
    const ::std::string& name, emPacket_Fish* value) {
  return ::google::protobuf::internal::ParseNamedEnum<emPacket_Fish>(
    emPacket_Fish_descriptor(), name, value);
}
// ===================================================================

class t_Vector2 : public ::google::protobuf::Message {
 public:
  t_Vector2();
  virtual ~t_Vector2();

  t_Vector2(const t_Vector2& from);

  inline t_Vector2& operator=(const t_Vector2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_Vector2& default_instance();

  void Swap(t_Vector2* other);

  // implements Message ----------------------------------------------

  t_Vector2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_Vector2& from);
  void MergeFrom(const t_Vector2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:rpc.t_Vector2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static t_Vector2* default_instance_;
};
// -------------------------------------------------------------------

class t_Vector3 : public ::google::protobuf::Message {
 public:
  t_Vector3();
  virtual ~t_Vector3();

  t_Vector3(const t_Vector3& from);

  inline t_Vector3& operator=(const t_Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_Vector3& default_instance();

  void Swap(t_Vector3* other);

  // implements Message ----------------------------------------------

  t_Vector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_Vector3& from);
  void MergeFrom(const t_Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:rpc.t_Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float x_;
  float y_;
  float z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static t_Vector3* default_instance_;
};
// -------------------------------------------------------------------

class t_fish_seat : public ::google::protobuf::Message {
 public:
  t_fish_seat();
  virtual ~t_fish_seat();

  t_fish_seat(const t_fish_seat& from);

  inline t_fish_seat& operator=(const t_fish_seat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_fish_seat& default_instance();

  void Swap(t_fish_seat* other);

  // implements Message ----------------------------------------------

  t_fish_seat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_fish_seat& from);
  void MergeFrom(const t_fish_seat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_seatid = 1;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // required int32 m_playerid = 2;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 2;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required string m_playername = 3;
  inline bool has_m_playername() const;
  inline void clear_m_playername();
  static const int kMPlayernameFieldNumber = 3;
  inline const ::std::string& m_playername() const;
  inline void set_m_playername(const ::std::string& value);
  inline void set_m_playername(const char* value);
  inline void set_m_playername(const char* value, size_t size);
  inline ::std::string* mutable_m_playername();
  inline ::std::string* release_m_playername();
  inline void set_allocated_m_playername(::std::string* m_playername);

  // required int32 m_headid = 4;
  inline bool has_m_headid() const;
  inline void clear_m_headid();
  static const int kMHeadidFieldNumber = 4;
  inline ::google::protobuf::int32 m_headid() const;
  inline void set_m_headid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.t_fish_seat)
 private:
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_playername();
  inline void clear_has_m_playername();
  inline void set_has_m_headid();
  inline void clear_has_m_headid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_seatid_;
  ::google::protobuf::int32 m_playerid_;
  ::std::string* m_playername_;
  ::google::protobuf::int32 m_headid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static t_fish_seat* default_instance_;
};
// -------------------------------------------------------------------

class t_fish_table : public ::google::protobuf::Message {
 public:
  t_fish_table();
  virtual ~t_fish_table();

  t_fish_table(const t_fish_table& from);

  inline t_fish_table& operator=(const t_fish_table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_fish_table& default_instance();

  void Swap(t_fish_table* other);

  // implements Message ----------------------------------------------

  t_fish_table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_fish_table& from);
  void MergeFrom(const t_fish_table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_tableid = 1;
  inline bool has_m_tableid() const;
  inline void clear_m_tableid();
  static const int kMTableidFieldNumber = 1;
  inline ::google::protobuf::int32 m_tableid() const;
  inline void set_m_tableid(::google::protobuf::int32 value);

  // repeated .rpc.t_fish_seat m_seats = 2;
  inline int m_seats_size() const;
  inline void clear_m_seats();
  static const int kMSeatsFieldNumber = 2;
  inline const ::rpc::t_fish_seat& m_seats(int index) const;
  inline ::rpc::t_fish_seat* mutable_m_seats(int index);
  inline ::rpc::t_fish_seat* add_m_seats();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_seat >&
      m_seats() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_seat >*
      mutable_m_seats();

  // @@protoc_insertion_point(class_scope:rpc.t_fish_table)
 private:
  inline void set_has_m_tableid();
  inline void clear_has_m_tableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_seat > m_seats_;
  ::google::protobuf::int32 m_tableid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static t_fish_table* default_instance_;
};
// -------------------------------------------------------------------

class t_FishPlayer : public ::google::protobuf::Message {
 public:
  t_FishPlayer();
  virtual ~t_FishPlayer();

  t_FishPlayer(const t_FishPlayer& from);

  inline t_FishPlayer& operator=(const t_FishPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_FishPlayer& default_instance();

  void Swap(t_FishPlayer* other);

  // implements Message ----------------------------------------------

  t_FishPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_FishPlayer& from);
  void MergeFrom(const t_FishPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_seatid = 1;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // required int32 m_playerid = 2;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 2;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required string m_playername = 3;
  inline bool has_m_playername() const;
  inline void clear_m_playername();
  static const int kMPlayernameFieldNumber = 3;
  inline const ::std::string& m_playername() const;
  inline void set_m_playername(const ::std::string& value);
  inline void set_m_playername(const char* value);
  inline void set_m_playername(const char* value, size_t size);
  inline ::std::string* mutable_m_playername();
  inline ::std::string* release_m_playername();
  inline void set_allocated_m_playername(::std::string* m_playername);

  // required int32 m_headid = 4;
  inline bool has_m_headid() const;
  inline void clear_m_headid();
  static const int kMHeadidFieldNumber = 4;
  inline ::google::protobuf::int32 m_headid() const;
  inline void set_m_headid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.t_FishPlayer)
 private:
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_playername();
  inline void clear_has_m_playername();
  inline void set_has_m_headid();
  inline void clear_has_m_headid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_seatid_;
  ::google::protobuf::int32 m_playerid_;
  ::std::string* m_playername_;
  ::google::protobuf::int32 m_headid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static t_FishPlayer* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishGameData : public ::google::protobuf::Message {
 public:
  SC_FishGameData();
  virtual ~SC_FishGameData();

  SC_FishGameData(const SC_FishGameData& from);

  inline SC_FishGameData& operator=(const SC_FishGameData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishGameData& default_instance();

  void Swap(SC_FishGameData* other);

  // implements Message ----------------------------------------------

  SC_FishGameData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishGameData& from);
  void MergeFrom(const SC_FishGameData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_playernum = 1;
  inline bool has_m_playernum() const;
  inline void clear_m_playernum();
  static const int kMPlayernumFieldNumber = 1;
  inline ::google::protobuf::int32 m_playernum() const;
  inline void set_m_playernum(::google::protobuf::int32 value);

  // repeated .rpc.t_fish_table m_tables = 2;
  inline int m_tables_size() const;
  inline void clear_m_tables();
  static const int kMTablesFieldNumber = 2;
  inline const ::rpc::t_fish_table& m_tables(int index) const;
  inline ::rpc::t_fish_table* mutable_m_tables(int index);
  inline ::rpc::t_fish_table* add_m_tables();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_table >&
      m_tables() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_table >*
      mutable_m_tables();

  // @@protoc_insertion_point(class_scope:rpc.SC_FishGameData)
 private:
  inline void set_has_m_playernum();
  inline void clear_has_m_playernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_table > m_tables_;
  ::google::protobuf::int32 m_playernum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishGameData* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishTables : public ::google::protobuf::Message {
 public:
  SC_FishTables();
  virtual ~SC_FishTables();

  SC_FishTables(const SC_FishTables& from);

  inline SC_FishTables& operator=(const SC_FishTables& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishTables& default_instance();

  void Swap(SC_FishTables* other);

  // implements Message ----------------------------------------------

  SC_FishTables* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishTables& from);
  void MergeFrom(const SC_FishTables& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.t_fish_table m_tables = 1;
  inline int m_tables_size() const;
  inline void clear_m_tables();
  static const int kMTablesFieldNumber = 1;
  inline const ::rpc::t_fish_table& m_tables(int index) const;
  inline ::rpc::t_fish_table* mutable_m_tables(int index);
  inline ::rpc::t_fish_table* add_m_tables();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_table >&
      m_tables() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_table >*
      mutable_m_tables();

  // @@protoc_insertion_point(class_scope:rpc.SC_FishTables)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_table > m_tables_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishTables* default_instance_;
};
// -------------------------------------------------------------------

class CS_FishEnterTable : public ::google::protobuf::Message {
 public:
  CS_FishEnterTable();
  virtual ~CS_FishEnterTable();

  CS_FishEnterTable(const CS_FishEnterTable& from);

  inline CS_FishEnterTable& operator=(const CS_FishEnterTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_FishEnterTable& default_instance();

  void Swap(CS_FishEnterTable* other);

  // implements Message ----------------------------------------------

  CS_FishEnterTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_FishEnterTable& from);
  void MergeFrom(const CS_FishEnterTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_tableid = 1;
  inline bool has_m_tableid() const;
  inline void clear_m_tableid();
  static const int kMTableidFieldNumber = 1;
  inline ::google::protobuf::int32 m_tableid() const;
  inline void set_m_tableid(::google::protobuf::int32 value);

  // required int32 m_seatid = 2;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.CS_FishEnterTable)
 private:
  inline void set_has_m_tableid();
  inline void clear_has_m_tableid();
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_tableid_;
  ::google::protobuf::int32 m_seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static CS_FishEnterTable* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishEnterTableRst : public ::google::protobuf::Message {
 public:
  SC_FishEnterTableRst();
  virtual ~SC_FishEnterTableRst();

  SC_FishEnterTableRst(const SC_FishEnterTableRst& from);

  inline SC_FishEnterTableRst& operator=(const SC_FishEnterTableRst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishEnterTableRst& default_instance();

  void Swap(SC_FishEnterTableRst* other);

  // implements Message ----------------------------------------------

  SC_FishEnterTableRst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishEnterTableRst& from);
  void MergeFrom(const SC_FishEnterTableRst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_rst = 1;
  inline bool has_m_rst() const;
  inline void clear_m_rst();
  static const int kMRstFieldNumber = 1;
  inline ::google::protobuf::int32 m_rst() const;
  inline void set_m_rst(::google::protobuf::int32 value);

  // required int32 m_tableId = 2;
  inline bool has_m_tableid() const;
  inline void clear_m_tableid();
  static const int kMTableIdFieldNumber = 2;
  inline ::google::protobuf::int32 m_tableid() const;
  inline void set_m_tableid(::google::protobuf::int32 value);

  // required int32 m_seatId = 3;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatIdFieldNumber = 3;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // repeated .rpc.t_FishPlayer m_players = 4;
  inline int m_players_size() const;
  inline void clear_m_players();
  static const int kMPlayersFieldNumber = 4;
  inline const ::rpc::t_FishPlayer& m_players(int index) const;
  inline ::rpc::t_FishPlayer* mutable_m_players(int index);
  inline ::rpc::t_FishPlayer* add_m_players();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FishPlayer >&
      m_players() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FishPlayer >*
      mutable_m_players();

  // optional int32 m_bomb = 5;
  inline bool has_m_bomb() const;
  inline void clear_m_bomb();
  static const int kMBombFieldNumber = 5;
  inline ::google::protobuf::int32 m_bomb() const;
  inline void set_m_bomb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishEnterTableRst)
 private:
  inline void set_has_m_rst();
  inline void clear_has_m_rst();
  inline void set_has_m_tableid();
  inline void clear_has_m_tableid();
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();
  inline void set_has_m_bomb();
  inline void clear_has_m_bomb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_rst_;
  ::google::protobuf::int32 m_tableid_;
  ::google::protobuf::RepeatedPtrField< ::rpc::t_FishPlayer > m_players_;
  ::google::protobuf::int32 m_seatid_;
  ::google::protobuf::int32 m_bomb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishEnterTableRst* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishPlayerLeave : public ::google::protobuf::Message {
 public:
  SC_FishPlayerLeave();
  virtual ~SC_FishPlayerLeave();

  SC_FishPlayerLeave(const SC_FishPlayerLeave& from);

  inline SC_FishPlayerLeave& operator=(const SC_FishPlayerLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishPlayerLeave& default_instance();

  void Swap(SC_FishPlayerLeave* other);

  // implements Message ----------------------------------------------

  SC_FishPlayerLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishPlayerLeave& from);
  void MergeFrom(const SC_FishPlayerLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_seatid = 1;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishPlayerLeave)
 private:
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishPlayerLeave* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyAddPlayerMySelf : public ::google::protobuf::Message {
 public:
  SC_FishNotifyAddPlayerMySelf();
  virtual ~SC_FishNotifyAddPlayerMySelf();

  SC_FishNotifyAddPlayerMySelf(const SC_FishNotifyAddPlayerMySelf& from);

  inline SC_FishNotifyAddPlayerMySelf& operator=(const SC_FishNotifyAddPlayerMySelf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyAddPlayerMySelf& default_instance();

  void Swap(SC_FishNotifyAddPlayerMySelf* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyAddPlayerMySelf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyAddPlayerMySelf& from);
  void MergeFrom(const SC_FishNotifyAddPlayerMySelf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_seatid = 1;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // required int32 m_playerid = 2;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 2;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required string m_playername = 3;
  inline bool has_m_playername() const;
  inline void clear_m_playername();
  static const int kMPlayernameFieldNumber = 3;
  inline const ::std::string& m_playername() const;
  inline void set_m_playername(const ::std::string& value);
  inline void set_m_playername(const char* value);
  inline void set_m_playername(const char* value, size_t size);
  inline ::std::string* mutable_m_playername();
  inline ::std::string* release_m_playername();
  inline void set_allocated_m_playername(::std::string* m_playername);

  // required int32 m_bulletNum = 4;
  inline bool has_m_bulletnum() const;
  inline void clear_m_bulletnum();
  static const int kMBulletNumFieldNumber = 4;
  inline ::google::protobuf::int32 m_bulletnum() const;
  inline void set_m_bulletnum(::google::protobuf::int32 value);

  // required int32 m_bomb = 5;
  inline bool has_m_bomb() const;
  inline void clear_m_bomb();
  static const int kMBombFieldNumber = 5;
  inline ::google::protobuf::int32 m_bomb() const;
  inline void set_m_bomb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyAddPlayerMySelf)
 private:
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_playername();
  inline void clear_has_m_playername();
  inline void set_has_m_bulletnum();
  inline void clear_has_m_bulletnum();
  inline void set_has_m_bomb();
  inline void clear_has_m_bomb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_seatid_;
  ::google::protobuf::int32 m_playerid_;
  ::std::string* m_playername_;
  ::google::protobuf::int32 m_bulletnum_;
  ::google::protobuf::int32 m_bomb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyAddPlayerMySelf* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyAddPlayer : public ::google::protobuf::Message {
 public:
  SC_FishNotifyAddPlayer();
  virtual ~SC_FishNotifyAddPlayer();

  SC_FishNotifyAddPlayer(const SC_FishNotifyAddPlayer& from);

  inline SC_FishNotifyAddPlayer& operator=(const SC_FishNotifyAddPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyAddPlayer& default_instance();

  void Swap(SC_FishNotifyAddPlayer* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyAddPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyAddPlayer& from);
  void MergeFrom(const SC_FishNotifyAddPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_seatid = 1;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // required int32 m_playerid = 2;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 2;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required string m_playername = 3;
  inline bool has_m_playername() const;
  inline void clear_m_playername();
  static const int kMPlayernameFieldNumber = 3;
  inline const ::std::string& m_playername() const;
  inline void set_m_playername(const ::std::string& value);
  inline void set_m_playername(const char* value);
  inline void set_m_playername(const char* value, size_t size);
  inline ::std::string* mutable_m_playername();
  inline ::std::string* release_m_playername();
  inline void set_allocated_m_playername(::std::string* m_playername);

  // required int32 m_bomb = 4;
  inline bool has_m_bomb() const;
  inline void clear_m_bomb();
  static const int kMBombFieldNumber = 4;
  inline ::google::protobuf::int32 m_bomb() const;
  inline void set_m_bomb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyAddPlayer)
 private:
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_playername();
  inline void clear_has_m_playername();
  inline void set_has_m_bomb();
  inline void clear_has_m_bomb();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_seatid_;
  ::google::protobuf::int32 m_playerid_;
  ::std::string* m_playername_;
  ::google::protobuf::int32 m_bomb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyAddPlayer* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyFireBullet : public ::google::protobuf::Message {
 public:
  SC_FishNotifyFireBullet();
  virtual ~SC_FishNotifyFireBullet();

  SC_FishNotifyFireBullet(const SC_FishNotifyFireBullet& from);

  inline SC_FishNotifyFireBullet& operator=(const SC_FishNotifyFireBullet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyFireBullet& default_instance();

  void Swap(SC_FishNotifyFireBullet* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyFireBullet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyFireBullet& from);
  void MergeFrom(const SC_FishNotifyFireBullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objid = 1;
  inline bool has_m_objid() const;
  inline void clear_m_objid();
  static const int kMObjidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objid() const;
  inline void set_m_objid(::google::protobuf::int32 value);

  // required int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // required int32 m_seatid = 3;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 3;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // required .rpc.t_Vector2 m_dir = 4;
  inline bool has_m_dir() const;
  inline void clear_m_dir();
  static const int kMDirFieldNumber = 4;
  inline const ::rpc::t_Vector2& m_dir() const;
  inline ::rpc::t_Vector2* mutable_m_dir();
  inline ::rpc::t_Vector2* release_m_dir();
  inline void set_allocated_m_dir(::rpc::t_Vector2* m_dir);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyFireBullet)
 private:
  inline void set_has_m_objid();
  inline void clear_has_m_objid();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();
  inline void set_has_m_dir();
  inline void clear_has_m_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objid_;
  ::google::protobuf::int32 m_type_;
  ::rpc::t_Vector2* m_dir_;
  ::google::protobuf::int32 m_seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyFireBullet* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyFireFish : public ::google::protobuf::Message {
 public:
  SC_FishNotifyFireFish();
  virtual ~SC_FishNotifyFireFish();

  SC_FishNotifyFireFish(const SC_FishNotifyFireFish& from);

  inline SC_FishNotifyFireFish& operator=(const SC_FishNotifyFireFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyFireFish& default_instance();

  void Swap(SC_FishNotifyFireFish* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyFireFish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyFireFish& from);
  void MergeFrom(const SC_FishNotifyFireFish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objid = 1;
  inline bool has_m_objid() const;
  inline void clear_m_objid();
  static const int kMObjidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objid() const;
  inline void set_m_objid(::google::protobuf::int32 value);

  // required int32 m_fishtype = 2;
  inline bool has_m_fishtype() const;
  inline void clear_m_fishtype();
  static const int kMFishtypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_fishtype() const;
  inline void set_m_fishtype(::google::protobuf::int32 value);

  // required int32 m_pathtype = 3;
  inline bool has_m_pathtype() const;
  inline void clear_m_pathtype();
  static const int kMPathtypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_pathtype() const;
  inline void set_m_pathtype(::google::protobuf::int32 value);

  // required int32 m_pathid = 4;
  inline bool has_m_pathid() const;
  inline void clear_m_pathid();
  static const int kMPathidFieldNumber = 4;
  inline ::google::protobuf::int32 m_pathid() const;
  inline void set_m_pathid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyFireFish)
 private:
  inline void set_has_m_objid();
  inline void clear_has_m_objid();
  inline void set_has_m_fishtype();
  inline void clear_has_m_fishtype();
  inline void set_has_m_pathtype();
  inline void clear_has_m_pathtype();
  inline void set_has_m_pathid();
  inline void clear_has_m_pathid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objid_;
  ::google::protobuf::int32 m_fishtype_;
  ::google::protobuf::int32 m_pathtype_;
  ::google::protobuf::int32 m_pathid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyFireFish* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyAddBullet : public ::google::protobuf::Message {
 public:
  SC_FishNotifyAddBullet();
  virtual ~SC_FishNotifyAddBullet();

  SC_FishNotifyAddBullet(const SC_FishNotifyAddBullet& from);

  inline SC_FishNotifyAddBullet& operator=(const SC_FishNotifyAddBullet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyAddBullet& default_instance();

  void Swap(SC_FishNotifyAddBullet* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyAddBullet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyAddBullet& from);
  void MergeFrom(const SC_FishNotifyAddBullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objid = 1;
  inline bool has_m_objid() const;
  inline void clear_m_objid();
  static const int kMObjidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objid() const;
  inline void set_m_objid(::google::protobuf::int32 value);

  // required int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // required int32 m_seatid = 3;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 3;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // required .rpc.t_Vector2 m_dir = 4;
  inline bool has_m_dir() const;
  inline void clear_m_dir();
  static const int kMDirFieldNumber = 4;
  inline const ::rpc::t_Vector2& m_dir() const;
  inline ::rpc::t_Vector2* mutable_m_dir();
  inline ::rpc::t_Vector2* release_m_dir();
  inline void set_allocated_m_dir(::rpc::t_Vector2* m_dir);

  // required .rpc.t_Vector2 m_pos = 5;
  inline bool has_m_pos() const;
  inline void clear_m_pos();
  static const int kMPosFieldNumber = 5;
  inline const ::rpc::t_Vector2& m_pos() const;
  inline ::rpc::t_Vector2* mutable_m_pos();
  inline ::rpc::t_Vector2* release_m_pos();
  inline void set_allocated_m_pos(::rpc::t_Vector2* m_pos);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyAddBullet)
 private:
  inline void set_has_m_objid();
  inline void clear_has_m_objid();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();
  inline void set_has_m_dir();
  inline void clear_has_m_dir();
  inline void set_has_m_pos();
  inline void clear_has_m_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objid_;
  ::google::protobuf::int32 m_type_;
  ::rpc::t_Vector2* m_dir_;
  ::rpc::t_Vector2* m_pos_;
  ::google::protobuf::int32 m_seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyAddBullet* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyAddBomb : public ::google::protobuf::Message {
 public:
  SC_FishNotifyAddBomb();
  virtual ~SC_FishNotifyAddBomb();

  SC_FishNotifyAddBomb(const SC_FishNotifyAddBomb& from);

  inline SC_FishNotifyAddBomb& operator=(const SC_FishNotifyAddBomb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyAddBomb& default_instance();

  void Swap(SC_FishNotifyAddBomb* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyAddBomb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyAddBomb& from);
  void MergeFrom(const SC_FishNotifyAddBomb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objid = 1;
  inline bool has_m_objid() const;
  inline void clear_m_objid();
  static const int kMObjidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objid() const;
  inline void set_m_objid(::google::protobuf::int32 value);

  // required int32 m_playerid = 2;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 2;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required int32 m_seatid = 3;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 3;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // repeated .rpc.t_Vector2 m_path = 4;
  inline int m_path_size() const;
  inline void clear_m_path();
  static const int kMPathFieldNumber = 4;
  inline const ::rpc::t_Vector2& m_path(int index) const;
  inline ::rpc::t_Vector2* mutable_m_path(int index);
  inline ::rpc::t_Vector2* add_m_path();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_Vector2 >&
      m_path() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_Vector2 >*
      mutable_m_path();

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyAddBomb)
 private:
  inline void set_has_m_objid();
  inline void clear_has_m_objid();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objid_;
  ::google::protobuf::int32 m_playerid_;
  ::google::protobuf::RepeatedPtrField< ::rpc::t_Vector2 > m_path_;
  ::google::protobuf::int32 m_seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyAddBomb* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyAddFish : public ::google::protobuf::Message {
 public:
  SC_FishNotifyAddFish();
  virtual ~SC_FishNotifyAddFish();

  SC_FishNotifyAddFish(const SC_FishNotifyAddFish& from);

  inline SC_FishNotifyAddFish& operator=(const SC_FishNotifyAddFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyAddFish& default_instance();

  void Swap(SC_FishNotifyAddFish* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyAddFish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyAddFish& from);
  void MergeFrom(const SC_FishNotifyAddFish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objid = 1;
  inline bool has_m_objid() const;
  inline void clear_m_objid();
  static const int kMObjidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objid() const;
  inline void set_m_objid(::google::protobuf::int32 value);

  // required int32 m_fishtype = 2;
  inline bool has_m_fishtype() const;
  inline void clear_m_fishtype();
  static const int kMFishtypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_fishtype() const;
  inline void set_m_fishtype(::google::protobuf::int32 value);

  // required int32 m_pathtype = 3;
  inline bool has_m_pathtype() const;
  inline void clear_m_pathtype();
  static const int kMPathtypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_pathtype() const;
  inline void set_m_pathtype(::google::protobuf::int32 value);

  // required int32 m_pathid = 4;
  inline bool has_m_pathid() const;
  inline void clear_m_pathid();
  static const int kMPathidFieldNumber = 4;
  inline ::google::protobuf::int32 m_pathid() const;
  inline void set_m_pathid(::google::protobuf::int32 value);

  // required float m_runper = 5;
  inline bool has_m_runper() const;
  inline void clear_m_runper();
  static const int kMRunperFieldNumber = 5;
  inline float m_runper() const;
  inline void set_m_runper(float value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyAddFish)
 private:
  inline void set_has_m_objid();
  inline void clear_has_m_objid();
  inline void set_has_m_fishtype();
  inline void clear_has_m_fishtype();
  inline void set_has_m_pathtype();
  inline void clear_has_m_pathtype();
  inline void set_has_m_pathid();
  inline void clear_has_m_pathid();
  inline void set_has_m_runper();
  inline void clear_has_m_runper();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objid_;
  ::google::protobuf::int32 m_fishtype_;
  ::google::protobuf::int32 m_pathtype_;
  ::google::protobuf::int32 m_pathid_;
  float m_runper_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyAddFish* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyRmvBullet : public ::google::protobuf::Message {
 public:
  SC_FishNotifyRmvBullet();
  virtual ~SC_FishNotifyRmvBullet();

  SC_FishNotifyRmvBullet(const SC_FishNotifyRmvBullet& from);

  inline SC_FishNotifyRmvBullet& operator=(const SC_FishNotifyRmvBullet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyRmvBullet& default_instance();

  void Swap(SC_FishNotifyRmvBullet* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyRmvBullet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyRmvBullet& from);
  void MergeFrom(const SC_FishNotifyRmvBullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objid = 1;
  inline bool has_m_objid() const;
  inline void clear_m_objid();
  static const int kMObjidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objid() const;
  inline void set_m_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyRmvBullet)
 private:
  inline void set_has_m_objid();
  inline void clear_has_m_objid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyRmvBullet* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyRmvFish : public ::google::protobuf::Message {
 public:
  SC_FishNotifyRmvFish();
  virtual ~SC_FishNotifyRmvFish();

  SC_FishNotifyRmvFish(const SC_FishNotifyRmvFish& from);

  inline SC_FishNotifyRmvFish& operator=(const SC_FishNotifyRmvFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyRmvFish& default_instance();

  void Swap(SC_FishNotifyRmvFish* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyRmvFish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyRmvFish& from);
  void MergeFrom(const SC_FishNotifyRmvFish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_objid = 1;
  inline bool has_m_objid() const;
  inline void clear_m_objid();
  static const int kMObjidFieldNumber = 1;
  inline ::google::protobuf::int32 m_objid() const;
  inline void set_m_objid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyRmvFish)
 private:
  inline void set_has_m_objid();
  inline void clear_has_m_objid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_objid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyRmvFish* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyRmvPlayer : public ::google::protobuf::Message {
 public:
  SC_FishNotifyRmvPlayer();
  virtual ~SC_FishNotifyRmvPlayer();

  SC_FishNotifyRmvPlayer(const SC_FishNotifyRmvPlayer& from);

  inline SC_FishNotifyRmvPlayer& operator=(const SC_FishNotifyRmvPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyRmvPlayer& default_instance();

  void Swap(SC_FishNotifyRmvPlayer* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyRmvPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyRmvPlayer& from);
  void MergeFrom(const SC_FishNotifyRmvPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_seatid = 1;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 1;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyRmvPlayer)
 private:
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyRmvPlayer* default_instance_;
};
// -------------------------------------------------------------------

class CS_FishReqSwitchCannon : public ::google::protobuf::Message {
 public:
  CS_FishReqSwitchCannon();
  virtual ~CS_FishReqSwitchCannon();

  CS_FishReqSwitchCannon(const CS_FishReqSwitchCannon& from);

  inline CS_FishReqSwitchCannon& operator=(const CS_FishReqSwitchCannon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_FishReqSwitchCannon& default_instance();

  void Swap(CS_FishReqSwitchCannon* other);

  // implements Message ----------------------------------------------

  CS_FishReqSwitchCannon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_FishReqSwitchCannon& from);
  void MergeFrom(const CS_FishReqSwitchCannon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_icannontype = 1;
  inline bool has_m_icannontype() const;
  inline void clear_m_icannontype();
  static const int kMIcannontypeFieldNumber = 1;
  inline ::google::protobuf::int32 m_icannontype() const;
  inline void set_m_icannontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.CS_FishReqSwitchCannon)
 private:
  inline void set_has_m_icannontype();
  inline void clear_has_m_icannontype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_icannontype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static CS_FishReqSwitchCannon* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifySwitchCannon : public ::google::protobuf::Message {
 public:
  SC_FishNotifySwitchCannon();
  virtual ~SC_FishNotifySwitchCannon();

  SC_FishNotifySwitchCannon(const SC_FishNotifySwitchCannon& from);

  inline SC_FishNotifySwitchCannon& operator=(const SC_FishNotifySwitchCannon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifySwitchCannon& default_instance();

  void Swap(SC_FishNotifySwitchCannon* other);

  // implements Message ----------------------------------------------

  SC_FishNotifySwitchCannon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifySwitchCannon& from);
  void MergeFrom(const SC_FishNotifySwitchCannon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_iplayerid = 1;
  inline bool has_m_iplayerid() const;
  inline void clear_m_iplayerid();
  static const int kMIplayeridFieldNumber = 1;
  inline ::google::protobuf::int32 m_iplayerid() const;
  inline void set_m_iplayerid(::google::protobuf::int32 value);

  // required int32 m_iseatid = 2;
  inline bool has_m_iseatid() const;
  inline void clear_m_iseatid();
  static const int kMIseatidFieldNumber = 2;
  inline ::google::protobuf::int32 m_iseatid() const;
  inline void set_m_iseatid(::google::protobuf::int32 value);

  // required int32 m_icannontype = 3;
  inline bool has_m_icannontype() const;
  inline void clear_m_icannontype();
  static const int kMIcannontypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_icannontype() const;
  inline void set_m_icannontype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifySwitchCannon)
 private:
  inline void set_has_m_iplayerid();
  inline void clear_has_m_iplayerid();
  inline void set_has_m_iseatid();
  inline void clear_has_m_iseatid();
  inline void set_has_m_icannontype();
  inline void clear_has_m_icannontype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_iplayerid_;
  ::google::protobuf::int32 m_iseatid_;
  ::google::protobuf::int32 m_icannontype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifySwitchCannon* default_instance_;
};
// -------------------------------------------------------------------

class CS_FishChangeFireCost : public ::google::protobuf::Message {
 public:
  CS_FishChangeFireCost();
  virtual ~CS_FishChangeFireCost();

  CS_FishChangeFireCost(const CS_FishChangeFireCost& from);

  inline CS_FishChangeFireCost& operator=(const CS_FishChangeFireCost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_FishChangeFireCost& default_instance();

  void Swap(CS_FishChangeFireCost* other);

  // implements Message ----------------------------------------------

  CS_FishChangeFireCost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_FishChangeFireCost& from);
  void MergeFrom(const CS_FishChangeFireCost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_icost = 1;
  inline bool has_m_icost() const;
  inline void clear_m_icost();
  static const int kMIcostFieldNumber = 1;
  inline ::google::protobuf::int32 m_icost() const;
  inline void set_m_icost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.CS_FishChangeFireCost)
 private:
  inline void set_has_m_icost();
  inline void clear_has_m_icost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_icost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static CS_FishChangeFireCost* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishChangeFireCost : public ::google::protobuf::Message {
 public:
  SC_FishChangeFireCost();
  virtual ~SC_FishChangeFireCost();

  SC_FishChangeFireCost(const SC_FishChangeFireCost& from);

  inline SC_FishChangeFireCost& operator=(const SC_FishChangeFireCost& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishChangeFireCost& default_instance();

  void Swap(SC_FishChangeFireCost* other);

  // implements Message ----------------------------------------------

  SC_FishChangeFireCost* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishChangeFireCost& from);
  void MergeFrom(const SC_FishChangeFireCost& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_iseatid = 1;
  inline bool has_m_iseatid() const;
  inline void clear_m_iseatid();
  static const int kMIseatidFieldNumber = 1;
  inline ::google::protobuf::int32 m_iseatid() const;
  inline void set_m_iseatid(::google::protobuf::int32 value);

  // required int32 m_icost = 2;
  inline bool has_m_icost() const;
  inline void clear_m_icost();
  static const int kMIcostFieldNumber = 2;
  inline ::google::protobuf::int32 m_icost() const;
  inline void set_m_icost(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishChangeFireCost)
 private:
  inline void set_has_m_iseatid();
  inline void clear_has_m_iseatid();
  inline void set_has_m_icost();
  inline void clear_has_m_icost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_iseatid_;
  ::google::protobuf::int32 m_icost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishChangeFireCost* default_instance_;
};
// -------------------------------------------------------------------

class CS_FishSendBullet : public ::google::protobuf::Message {
 public:
  CS_FishSendBullet();
  virtual ~CS_FishSendBullet();

  CS_FishSendBullet(const CS_FishSendBullet& from);

  inline CS_FishSendBullet& operator=(const CS_FishSendBullet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_FishSendBullet& default_instance();

  void Swap(CS_FishSendBullet* other);

  // implements Message ----------------------------------------------

  CS_FishSendBullet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_FishSendBullet& from);
  void MergeFrom(const CS_FishSendBullet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_multiple = 1;
  inline bool has_m_multiple() const;
  inline void clear_m_multiple();
  static const int kMMultipleFieldNumber = 1;
  inline ::google::protobuf::int32 m_multiple() const;
  inline void set_m_multiple(::google::protobuf::int32 value);

  // required .rpc.t_Vector2 m_dir = 2;
  inline bool has_m_dir() const;
  inline void clear_m_dir();
  static const int kMDirFieldNumber = 2;
  inline const ::rpc::t_Vector2& m_dir() const;
  inline ::rpc::t_Vector2* mutable_m_dir();
  inline ::rpc::t_Vector2* release_m_dir();
  inline void set_allocated_m_dir(::rpc::t_Vector2* m_dir);

  // @@protoc_insertion_point(class_scope:rpc.CS_FishSendBullet)
 private:
  inline void set_has_m_multiple();
  inline void clear_has_m_multiple();
  inline void set_has_m_dir();
  inline void clear_has_m_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rpc::t_Vector2* m_dir_;
  ::google::protobuf::int32 m_multiple_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static CS_FishSendBullet* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishNotifyHitFish : public ::google::protobuf::Message {
 public:
  SC_FishNotifyHitFish();
  virtual ~SC_FishNotifyHitFish();

  SC_FishNotifyHitFish(const SC_FishNotifyHitFish& from);

  inline SC_FishNotifyHitFish& operator=(const SC_FishNotifyHitFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishNotifyHitFish& default_instance();

  void Swap(SC_FishNotifyHitFish* other);

  // implements Message ----------------------------------------------

  SC_FishNotifyHitFish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishNotifyHitFish& from);
  void MergeFrom(const SC_FishNotifyHitFish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_bulletid = 1;
  inline bool has_m_bulletid() const;
  inline void clear_m_bulletid();
  static const int kMBulletidFieldNumber = 1;
  inline ::google::protobuf::int32 m_bulletid() const;
  inline void set_m_bulletid(::google::protobuf::int32 value);

  // required int32 m_fishid = 2;
  inline bool has_m_fishid() const;
  inline void clear_m_fishid();
  static const int kMFishidFieldNumber = 2;
  inline ::google::protobuf::int32 m_fishid() const;
  inline void set_m_fishid(::google::protobuf::int32 value);

  // required int32 m_seatid = 3;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 3;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // required int32 m_playerid = 4;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 4;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required int32 m_money = 5;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 5;
  inline ::google::protobuf::int32 m_money() const;
  inline void set_m_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishNotifyHitFish)
 private:
  inline void set_has_m_bulletid();
  inline void clear_has_m_bulletid();
  inline void set_has_m_fishid();
  inline void clear_has_m_fishid();
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_money();
  inline void clear_has_m_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_bulletid_;
  ::google::protobuf::int32 m_fishid_;
  ::google::protobuf::int32 m_seatid_;
  ::google::protobuf::int32 m_playerid_;
  ::google::protobuf::int32 m_money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishNotifyHitFish* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishLockFish : public ::google::protobuf::Message {
 public:
  SC_FishLockFish();
  virtual ~SC_FishLockFish();

  SC_FishLockFish(const SC_FishLockFish& from);

  inline SC_FishLockFish& operator=(const SC_FishLockFish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishLockFish& default_instance();

  void Swap(SC_FishLockFish* other);

  // implements Message ----------------------------------------------

  SC_FishLockFish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishLockFish& from);
  void MergeFrom(const SC_FishLockFish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_fishid = 1;
  inline bool has_m_fishid() const;
  inline void clear_m_fishid();
  static const int kMFishidFieldNumber = 1;
  inline ::google::protobuf::int32 m_fishid() const;
  inline void set_m_fishid(::google::protobuf::int32 value);

  // required int32 m_seatid = 2;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishLockFish)
 private:
  inline void set_has_m_fishid();
  inline void clear_has_m_fishid();
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_fishid_;
  ::google::protobuf::int32 m_seatid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishLockFish* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishRmvDrillBomb : public ::google::protobuf::Message {
 public:
  SC_FishRmvDrillBomb();
  virtual ~SC_FishRmvDrillBomb();

  SC_FishRmvDrillBomb(const SC_FishRmvDrillBomb& from);

  inline SC_FishRmvDrillBomb& operator=(const SC_FishRmvDrillBomb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishRmvDrillBomb& default_instance();

  void Swap(SC_FishRmvDrillBomb* other);

  // implements Message ----------------------------------------------

  SC_FishRmvDrillBomb* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishRmvDrillBomb& from);
  void MergeFrom(const SC_FishRmvDrillBomb& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_bulletId = 1;
  inline bool has_m_bulletid() const;
  inline void clear_m_bulletid();
  static const int kMBulletIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_bulletid() const;
  inline void set_m_bulletid(::google::protobuf::int32 value);

  // required int32 m_seatid = 2;
  inline bool has_m_seatid() const;
  inline void clear_m_seatid();
  static const int kMSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 m_seatid() const;
  inline void set_m_seatid(::google::protobuf::int32 value);

  // required int32 m_playerid = 3;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 3;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required int32 m_money = 4;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 m_money() const;
  inline void set_m_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishRmvDrillBomb)
 private:
  inline void set_has_m_bulletid();
  inline void clear_has_m_bulletid();
  inline void set_has_m_seatid();
  inline void clear_has_m_seatid();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_money();
  inline void clear_has_m_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_bulletid_;
  ::google::protobuf::int32 m_seatid_;
  ::google::protobuf::int32 m_playerid_;
  ::google::protobuf::int32 m_money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishRmvDrillBomb* default_instance_;
};
// -------------------------------------------------------------------

class CS_FishNotifyHitted : public ::google::protobuf::Message {
 public:
  CS_FishNotifyHitted();
  virtual ~CS_FishNotifyHitted();

  CS_FishNotifyHitted(const CS_FishNotifyHitted& from);

  inline CS_FishNotifyHitted& operator=(const CS_FishNotifyHitted& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_FishNotifyHitted& default_instance();

  void Swap(CS_FishNotifyHitted* other);

  // implements Message ----------------------------------------------

  CS_FishNotifyHitted* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_FishNotifyHitted& from);
  void MergeFrom(const CS_FishNotifyHitted& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_fishid = 1;
  inline bool has_m_fishid() const;
  inline void clear_m_fishid();
  static const int kMFishidFieldNumber = 1;
  inline ::google::protobuf::int32 m_fishid() const;
  inline void set_m_fishid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.CS_FishNotifyHitted)
 private:
  inline void set_has_m_fishid();
  inline void clear_has_m_fishid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_fishid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static CS_FishNotifyHitted* default_instance_;
};
// -------------------------------------------------------------------

class SC_FishEnterNextLvl : public ::google::protobuf::Message {
 public:
  SC_FishEnterNextLvl();
  virtual ~SC_FishEnterNextLvl();

  SC_FishEnterNextLvl(const SC_FishEnterNextLvl& from);

  inline SC_FishEnterNextLvl& operator=(const SC_FishEnterNextLvl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FishEnterNextLvl& default_instance();

  void Swap(SC_FishEnterNextLvl* other);

  // implements Message ----------------------------------------------

  SC_FishEnterNextLvl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FishEnterNextLvl& from);
  void MergeFrom(const SC_FishEnterNextLvl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_Lvl = 1;
  inline bool has_m_lvl() const;
  inline void clear_m_lvl();
  static const int kMLvlFieldNumber = 1;
  inline ::google::protobuf::int32 m_lvl() const;
  inline void set_m_lvl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FishEnterNextLvl)
 private:
  inline void set_has_m_lvl();
  inline void clear_has_m_lvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_lvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFish_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFish_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFish_2eproto();

  void InitAsDefaultInstance();
  static SC_FishEnterNextLvl* default_instance_;
};
// ===================================================================


// ===================================================================

// t_Vector2

// required float x = 1;
inline bool t_Vector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_Vector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_Vector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_Vector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float t_Vector2::x() const {
  return x_;
}
inline void t_Vector2::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool t_Vector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_Vector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_Vector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_Vector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float t_Vector2::y() const {
  return y_;
}
inline void t_Vector2::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// t_Vector3

// required float x = 1;
inline bool t_Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float t_Vector3::x() const {
  return x_;
}
inline void t_Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool t_Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float t_Vector3::y() const {
  return y_;
}
inline void t_Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool t_Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float t_Vector3::z() const {
  return z_;
}
inline void t_Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// t_fish_seat

// required int32 m_seatid = 1;
inline bool t_fish_seat::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_fish_seat::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_fish_seat::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_fish_seat::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 t_fish_seat::m_seatid() const {
  return m_seatid_;
}
inline void t_fish_seat::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// required int32 m_playerid = 2;
inline bool t_fish_seat::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_fish_seat::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_fish_seat::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_fish_seat::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 t_fish_seat::m_playerid() const {
  return m_playerid_;
}
inline void t_fish_seat::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required string m_playername = 3;
inline bool t_fish_seat::has_m_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_fish_seat::set_has_m_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_fish_seat::clear_has_m_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_fish_seat::clear_m_playername() {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    m_playername_->clear();
  }
  clear_has_m_playername();
}
inline const ::std::string& t_fish_seat::m_playername() const {
  return *m_playername_;
}
inline void t_fish_seat::set_m_playername(const ::std::string& value) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(value);
}
inline void t_fish_seat::set_m_playername(const char* value) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(value);
}
inline void t_fish_seat::set_m_playername(const char* value, size_t size) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_fish_seat::mutable_m_playername() {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  return m_playername_;
}
inline ::std::string* t_fish_seat::release_m_playername() {
  clear_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_playername_;
    m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_fish_seat::set_allocated_m_playername(::std::string* m_playername) {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playername_;
  }
  if (m_playername) {
    set_has_m_playername();
    m_playername_ = m_playername;
  } else {
    clear_has_m_playername();
    m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_headid = 4;
inline bool t_fish_seat::has_m_headid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_fish_seat::set_has_m_headid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_fish_seat::clear_has_m_headid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_fish_seat::clear_m_headid() {
  m_headid_ = 0;
  clear_has_m_headid();
}
inline ::google::protobuf::int32 t_fish_seat::m_headid() const {
  return m_headid_;
}
inline void t_fish_seat::set_m_headid(::google::protobuf::int32 value) {
  set_has_m_headid();
  m_headid_ = value;
}

// -------------------------------------------------------------------

// t_fish_table

// required int32 m_tableid = 1;
inline bool t_fish_table::has_m_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_fish_table::set_has_m_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_fish_table::clear_has_m_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_fish_table::clear_m_tableid() {
  m_tableid_ = 0;
  clear_has_m_tableid();
}
inline ::google::protobuf::int32 t_fish_table::m_tableid() const {
  return m_tableid_;
}
inline void t_fish_table::set_m_tableid(::google::protobuf::int32 value) {
  set_has_m_tableid();
  m_tableid_ = value;
}

// repeated .rpc.t_fish_seat m_seats = 2;
inline int t_fish_table::m_seats_size() const {
  return m_seats_.size();
}
inline void t_fish_table::clear_m_seats() {
  m_seats_.Clear();
}
inline const ::rpc::t_fish_seat& t_fish_table::m_seats(int index) const {
  return m_seats_.Get(index);
}
inline ::rpc::t_fish_seat* t_fish_table::mutable_m_seats(int index) {
  return m_seats_.Mutable(index);
}
inline ::rpc::t_fish_seat* t_fish_table::add_m_seats() {
  return m_seats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_seat >&
t_fish_table::m_seats() const {
  return m_seats_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_seat >*
t_fish_table::mutable_m_seats() {
  return &m_seats_;
}

// -------------------------------------------------------------------

// t_FishPlayer

// required int32 m_seatid = 1;
inline bool t_FishPlayer::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_FishPlayer::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_FishPlayer::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_FishPlayer::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 t_FishPlayer::m_seatid() const {
  return m_seatid_;
}
inline void t_FishPlayer::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// required int32 m_playerid = 2;
inline bool t_FishPlayer::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_FishPlayer::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_FishPlayer::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_FishPlayer::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 t_FishPlayer::m_playerid() const {
  return m_playerid_;
}
inline void t_FishPlayer::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required string m_playername = 3;
inline bool t_FishPlayer::has_m_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_FishPlayer::set_has_m_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_FishPlayer::clear_has_m_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_FishPlayer::clear_m_playername() {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    m_playername_->clear();
  }
  clear_has_m_playername();
}
inline const ::std::string& t_FishPlayer::m_playername() const {
  return *m_playername_;
}
inline void t_FishPlayer::set_m_playername(const ::std::string& value) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(value);
}
inline void t_FishPlayer::set_m_playername(const char* value) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(value);
}
inline void t_FishPlayer::set_m_playername(const char* value, size_t size) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_FishPlayer::mutable_m_playername() {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  return m_playername_;
}
inline ::std::string* t_FishPlayer::release_m_playername() {
  clear_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_playername_;
    m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_FishPlayer::set_allocated_m_playername(::std::string* m_playername) {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playername_;
  }
  if (m_playername) {
    set_has_m_playername();
    m_playername_ = m_playername;
  } else {
    clear_has_m_playername();
    m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_headid = 4;
inline bool t_FishPlayer::has_m_headid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_FishPlayer::set_has_m_headid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_FishPlayer::clear_has_m_headid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_FishPlayer::clear_m_headid() {
  m_headid_ = 0;
  clear_has_m_headid();
}
inline ::google::protobuf::int32 t_FishPlayer::m_headid() const {
  return m_headid_;
}
inline void t_FishPlayer::set_m_headid(::google::protobuf::int32 value) {
  set_has_m_headid();
  m_headid_ = value;
}

// -------------------------------------------------------------------

// SC_FishGameData

// required int32 m_playernum = 1;
inline bool SC_FishGameData::has_m_playernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishGameData::set_has_m_playernum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishGameData::clear_has_m_playernum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishGameData::clear_m_playernum() {
  m_playernum_ = 0;
  clear_has_m_playernum();
}
inline ::google::protobuf::int32 SC_FishGameData::m_playernum() const {
  return m_playernum_;
}
inline void SC_FishGameData::set_m_playernum(::google::protobuf::int32 value) {
  set_has_m_playernum();
  m_playernum_ = value;
}

// repeated .rpc.t_fish_table m_tables = 2;
inline int SC_FishGameData::m_tables_size() const {
  return m_tables_.size();
}
inline void SC_FishGameData::clear_m_tables() {
  m_tables_.Clear();
}
inline const ::rpc::t_fish_table& SC_FishGameData::m_tables(int index) const {
  return m_tables_.Get(index);
}
inline ::rpc::t_fish_table* SC_FishGameData::mutable_m_tables(int index) {
  return m_tables_.Mutable(index);
}
inline ::rpc::t_fish_table* SC_FishGameData::add_m_tables() {
  return m_tables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_table >&
SC_FishGameData::m_tables() const {
  return m_tables_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_table >*
SC_FishGameData::mutable_m_tables() {
  return &m_tables_;
}

// -------------------------------------------------------------------

// SC_FishTables

// repeated .rpc.t_fish_table m_tables = 1;
inline int SC_FishTables::m_tables_size() const {
  return m_tables_.size();
}
inline void SC_FishTables::clear_m_tables() {
  m_tables_.Clear();
}
inline const ::rpc::t_fish_table& SC_FishTables::m_tables(int index) const {
  return m_tables_.Get(index);
}
inline ::rpc::t_fish_table* SC_FishTables::mutable_m_tables(int index) {
  return m_tables_.Mutable(index);
}
inline ::rpc::t_fish_table* SC_FishTables::add_m_tables() {
  return m_tables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_table >&
SC_FishTables::m_tables() const {
  return m_tables_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_fish_table >*
SC_FishTables::mutable_m_tables() {
  return &m_tables_;
}

// -------------------------------------------------------------------

// CS_FishEnterTable

// required int32 m_tableid = 1;
inline bool CS_FishEnterTable::has_m_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_FishEnterTable::set_has_m_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_FishEnterTable::clear_has_m_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_FishEnterTable::clear_m_tableid() {
  m_tableid_ = 0;
  clear_has_m_tableid();
}
inline ::google::protobuf::int32 CS_FishEnterTable::m_tableid() const {
  return m_tableid_;
}
inline void CS_FishEnterTable::set_m_tableid(::google::protobuf::int32 value) {
  set_has_m_tableid();
  m_tableid_ = value;
}

// required int32 m_seatid = 2;
inline bool CS_FishEnterTable::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_FishEnterTable::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_FishEnterTable::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_FishEnterTable::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 CS_FishEnterTable::m_seatid() const {
  return m_seatid_;
}
inline void CS_FishEnterTable::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// -------------------------------------------------------------------

// SC_FishEnterTableRst

// required int32 m_rst = 1;
inline bool SC_FishEnterTableRst::has_m_rst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishEnterTableRst::set_has_m_rst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishEnterTableRst::clear_has_m_rst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishEnterTableRst::clear_m_rst() {
  m_rst_ = 0;
  clear_has_m_rst();
}
inline ::google::protobuf::int32 SC_FishEnterTableRst::m_rst() const {
  return m_rst_;
}
inline void SC_FishEnterTableRst::set_m_rst(::google::protobuf::int32 value) {
  set_has_m_rst();
  m_rst_ = value;
}

// required int32 m_tableId = 2;
inline bool SC_FishEnterTableRst::has_m_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishEnterTableRst::set_has_m_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishEnterTableRst::clear_has_m_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishEnterTableRst::clear_m_tableid() {
  m_tableid_ = 0;
  clear_has_m_tableid();
}
inline ::google::protobuf::int32 SC_FishEnterTableRst::m_tableid() const {
  return m_tableid_;
}
inline void SC_FishEnterTableRst::set_m_tableid(::google::protobuf::int32 value) {
  set_has_m_tableid();
  m_tableid_ = value;
}

// required int32 m_seatId = 3;
inline bool SC_FishEnterTableRst::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishEnterTableRst::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishEnterTableRst::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishEnterTableRst::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishEnterTableRst::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishEnterTableRst::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// repeated .rpc.t_FishPlayer m_players = 4;
inline int SC_FishEnterTableRst::m_players_size() const {
  return m_players_.size();
}
inline void SC_FishEnterTableRst::clear_m_players() {
  m_players_.Clear();
}
inline const ::rpc::t_FishPlayer& SC_FishEnterTableRst::m_players(int index) const {
  return m_players_.Get(index);
}
inline ::rpc::t_FishPlayer* SC_FishEnterTableRst::mutable_m_players(int index) {
  return m_players_.Mutable(index);
}
inline ::rpc::t_FishPlayer* SC_FishEnterTableRst::add_m_players() {
  return m_players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FishPlayer >&
SC_FishEnterTableRst::m_players() const {
  return m_players_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FishPlayer >*
SC_FishEnterTableRst::mutable_m_players() {
  return &m_players_;
}

// optional int32 m_bomb = 5;
inline bool SC_FishEnterTableRst::has_m_bomb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_FishEnterTableRst::set_has_m_bomb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_FishEnterTableRst::clear_has_m_bomb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_FishEnterTableRst::clear_m_bomb() {
  m_bomb_ = 0;
  clear_has_m_bomb();
}
inline ::google::protobuf::int32 SC_FishEnterTableRst::m_bomb() const {
  return m_bomb_;
}
inline void SC_FishEnterTableRst::set_m_bomb(::google::protobuf::int32 value) {
  set_has_m_bomb();
  m_bomb_ = value;
}

// -------------------------------------------------------------------

// SC_FishPlayerLeave

// required int32 m_seatid = 1;
inline bool SC_FishPlayerLeave::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishPlayerLeave::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishPlayerLeave::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishPlayerLeave::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishPlayerLeave::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishPlayerLeave::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// -------------------------------------------------------------------

// SC_FishNotifyAddPlayerMySelf

// required int32 m_seatid = 1;
inline bool SC_FishNotifyAddPlayerMySelf::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyAddPlayerMySelf::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyAddPlayerMySelf::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyAddPlayerMySelf::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddPlayerMySelf::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishNotifyAddPlayerMySelf::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// required int32 m_playerid = 2;
inline bool SC_FishNotifyAddPlayerMySelf::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishNotifyAddPlayerMySelf::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishNotifyAddPlayerMySelf::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishNotifyAddPlayerMySelf::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddPlayerMySelf::m_playerid() const {
  return m_playerid_;
}
inline void SC_FishNotifyAddPlayerMySelf::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required string m_playername = 3;
inline bool SC_FishNotifyAddPlayerMySelf::has_m_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishNotifyAddPlayerMySelf::set_has_m_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishNotifyAddPlayerMySelf::clear_has_m_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishNotifyAddPlayerMySelf::clear_m_playername() {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    m_playername_->clear();
  }
  clear_has_m_playername();
}
inline const ::std::string& SC_FishNotifyAddPlayerMySelf::m_playername() const {
  return *m_playername_;
}
inline void SC_FishNotifyAddPlayerMySelf::set_m_playername(const ::std::string& value) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(value);
}
inline void SC_FishNotifyAddPlayerMySelf::set_m_playername(const char* value) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(value);
}
inline void SC_FishNotifyAddPlayerMySelf::set_m_playername(const char* value, size_t size) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SC_FishNotifyAddPlayerMySelf::mutable_m_playername() {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  return m_playername_;
}
inline ::std::string* SC_FishNotifyAddPlayerMySelf::release_m_playername() {
  clear_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_playername_;
    m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SC_FishNotifyAddPlayerMySelf::set_allocated_m_playername(::std::string* m_playername) {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playername_;
  }
  if (m_playername) {
    set_has_m_playername();
    m_playername_ = m_playername;
  } else {
    clear_has_m_playername();
    m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_bulletNum = 4;
inline bool SC_FishNotifyAddPlayerMySelf::has_m_bulletnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_FishNotifyAddPlayerMySelf::set_has_m_bulletnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_FishNotifyAddPlayerMySelf::clear_has_m_bulletnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_FishNotifyAddPlayerMySelf::clear_m_bulletnum() {
  m_bulletnum_ = 0;
  clear_has_m_bulletnum();
}
inline ::google::protobuf::int32 SC_FishNotifyAddPlayerMySelf::m_bulletnum() const {
  return m_bulletnum_;
}
inline void SC_FishNotifyAddPlayerMySelf::set_m_bulletnum(::google::protobuf::int32 value) {
  set_has_m_bulletnum();
  m_bulletnum_ = value;
}

// required int32 m_bomb = 5;
inline bool SC_FishNotifyAddPlayerMySelf::has_m_bomb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_FishNotifyAddPlayerMySelf::set_has_m_bomb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_FishNotifyAddPlayerMySelf::clear_has_m_bomb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_FishNotifyAddPlayerMySelf::clear_m_bomb() {
  m_bomb_ = 0;
  clear_has_m_bomb();
}
inline ::google::protobuf::int32 SC_FishNotifyAddPlayerMySelf::m_bomb() const {
  return m_bomb_;
}
inline void SC_FishNotifyAddPlayerMySelf::set_m_bomb(::google::protobuf::int32 value) {
  set_has_m_bomb();
  m_bomb_ = value;
}

// -------------------------------------------------------------------

// SC_FishNotifyAddPlayer

// required int32 m_seatid = 1;
inline bool SC_FishNotifyAddPlayer::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyAddPlayer::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyAddPlayer::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyAddPlayer::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddPlayer::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishNotifyAddPlayer::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// required int32 m_playerid = 2;
inline bool SC_FishNotifyAddPlayer::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishNotifyAddPlayer::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishNotifyAddPlayer::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishNotifyAddPlayer::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddPlayer::m_playerid() const {
  return m_playerid_;
}
inline void SC_FishNotifyAddPlayer::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required string m_playername = 3;
inline bool SC_FishNotifyAddPlayer::has_m_playername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishNotifyAddPlayer::set_has_m_playername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishNotifyAddPlayer::clear_has_m_playername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishNotifyAddPlayer::clear_m_playername() {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    m_playername_->clear();
  }
  clear_has_m_playername();
}
inline const ::std::string& SC_FishNotifyAddPlayer::m_playername() const {
  return *m_playername_;
}
inline void SC_FishNotifyAddPlayer::set_m_playername(const ::std::string& value) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(value);
}
inline void SC_FishNotifyAddPlayer::set_m_playername(const char* value) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(value);
}
inline void SC_FishNotifyAddPlayer::set_m_playername(const char* value, size_t size) {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  m_playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SC_FishNotifyAddPlayer::mutable_m_playername() {
  set_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    m_playername_ = new ::std::string;
  }
  return m_playername_;
}
inline ::std::string* SC_FishNotifyAddPlayer::release_m_playername() {
  clear_has_m_playername();
  if (m_playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_playername_;
    m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SC_FishNotifyAddPlayer::set_allocated_m_playername(::std::string* m_playername) {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playername_;
  }
  if (m_playername) {
    set_has_m_playername();
    m_playername_ = m_playername;
  } else {
    clear_has_m_playername();
    m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_bomb = 4;
inline bool SC_FishNotifyAddPlayer::has_m_bomb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_FishNotifyAddPlayer::set_has_m_bomb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_FishNotifyAddPlayer::clear_has_m_bomb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_FishNotifyAddPlayer::clear_m_bomb() {
  m_bomb_ = 0;
  clear_has_m_bomb();
}
inline ::google::protobuf::int32 SC_FishNotifyAddPlayer::m_bomb() const {
  return m_bomb_;
}
inline void SC_FishNotifyAddPlayer::set_m_bomb(::google::protobuf::int32 value) {
  set_has_m_bomb();
  m_bomb_ = value;
}

// -------------------------------------------------------------------

// SC_FishNotifyFireBullet

// required int32 m_objid = 1;
inline bool SC_FishNotifyFireBullet::has_m_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyFireBullet::set_has_m_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyFireBullet::clear_has_m_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyFireBullet::clear_m_objid() {
  m_objid_ = 0;
  clear_has_m_objid();
}
inline ::google::protobuf::int32 SC_FishNotifyFireBullet::m_objid() const {
  return m_objid_;
}
inline void SC_FishNotifyFireBullet::set_m_objid(::google::protobuf::int32 value) {
  set_has_m_objid();
  m_objid_ = value;
}

// required int32 m_type = 2;
inline bool SC_FishNotifyFireBullet::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishNotifyFireBullet::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishNotifyFireBullet::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishNotifyFireBullet::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 SC_FishNotifyFireBullet::m_type() const {
  return m_type_;
}
inline void SC_FishNotifyFireBullet::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// required int32 m_seatid = 3;
inline bool SC_FishNotifyFireBullet::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishNotifyFireBullet::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishNotifyFireBullet::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishNotifyFireBullet::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishNotifyFireBullet::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishNotifyFireBullet::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// required .rpc.t_Vector2 m_dir = 4;
inline bool SC_FishNotifyFireBullet::has_m_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_FishNotifyFireBullet::set_has_m_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_FishNotifyFireBullet::clear_has_m_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_FishNotifyFireBullet::clear_m_dir() {
  if (m_dir_ != NULL) m_dir_->::rpc::t_Vector2::Clear();
  clear_has_m_dir();
}
inline const ::rpc::t_Vector2& SC_FishNotifyFireBullet::m_dir() const {
  return m_dir_ != NULL ? *m_dir_ : *default_instance_->m_dir_;
}
inline ::rpc::t_Vector2* SC_FishNotifyFireBullet::mutable_m_dir() {
  set_has_m_dir();
  if (m_dir_ == NULL) m_dir_ = new ::rpc::t_Vector2;
  return m_dir_;
}
inline ::rpc::t_Vector2* SC_FishNotifyFireBullet::release_m_dir() {
  clear_has_m_dir();
  ::rpc::t_Vector2* temp = m_dir_;
  m_dir_ = NULL;
  return temp;
}
inline void SC_FishNotifyFireBullet::set_allocated_m_dir(::rpc::t_Vector2* m_dir) {
  delete m_dir_;
  m_dir_ = m_dir;
  if (m_dir) {
    set_has_m_dir();
  } else {
    clear_has_m_dir();
  }
}

// -------------------------------------------------------------------

// SC_FishNotifyFireFish

// required int32 m_objid = 1;
inline bool SC_FishNotifyFireFish::has_m_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyFireFish::set_has_m_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyFireFish::clear_has_m_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyFireFish::clear_m_objid() {
  m_objid_ = 0;
  clear_has_m_objid();
}
inline ::google::protobuf::int32 SC_FishNotifyFireFish::m_objid() const {
  return m_objid_;
}
inline void SC_FishNotifyFireFish::set_m_objid(::google::protobuf::int32 value) {
  set_has_m_objid();
  m_objid_ = value;
}

// required int32 m_fishtype = 2;
inline bool SC_FishNotifyFireFish::has_m_fishtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishNotifyFireFish::set_has_m_fishtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishNotifyFireFish::clear_has_m_fishtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishNotifyFireFish::clear_m_fishtype() {
  m_fishtype_ = 0;
  clear_has_m_fishtype();
}
inline ::google::protobuf::int32 SC_FishNotifyFireFish::m_fishtype() const {
  return m_fishtype_;
}
inline void SC_FishNotifyFireFish::set_m_fishtype(::google::protobuf::int32 value) {
  set_has_m_fishtype();
  m_fishtype_ = value;
}

// required int32 m_pathtype = 3;
inline bool SC_FishNotifyFireFish::has_m_pathtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishNotifyFireFish::set_has_m_pathtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishNotifyFireFish::clear_has_m_pathtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishNotifyFireFish::clear_m_pathtype() {
  m_pathtype_ = 0;
  clear_has_m_pathtype();
}
inline ::google::protobuf::int32 SC_FishNotifyFireFish::m_pathtype() const {
  return m_pathtype_;
}
inline void SC_FishNotifyFireFish::set_m_pathtype(::google::protobuf::int32 value) {
  set_has_m_pathtype();
  m_pathtype_ = value;
}

// required int32 m_pathid = 4;
inline bool SC_FishNotifyFireFish::has_m_pathid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_FishNotifyFireFish::set_has_m_pathid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_FishNotifyFireFish::clear_has_m_pathid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_FishNotifyFireFish::clear_m_pathid() {
  m_pathid_ = 0;
  clear_has_m_pathid();
}
inline ::google::protobuf::int32 SC_FishNotifyFireFish::m_pathid() const {
  return m_pathid_;
}
inline void SC_FishNotifyFireFish::set_m_pathid(::google::protobuf::int32 value) {
  set_has_m_pathid();
  m_pathid_ = value;
}

// -------------------------------------------------------------------

// SC_FishNotifyAddBullet

// required int32 m_objid = 1;
inline bool SC_FishNotifyAddBullet::has_m_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyAddBullet::set_has_m_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyAddBullet::clear_has_m_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyAddBullet::clear_m_objid() {
  m_objid_ = 0;
  clear_has_m_objid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddBullet::m_objid() const {
  return m_objid_;
}
inline void SC_FishNotifyAddBullet::set_m_objid(::google::protobuf::int32 value) {
  set_has_m_objid();
  m_objid_ = value;
}

// required int32 m_type = 2;
inline bool SC_FishNotifyAddBullet::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishNotifyAddBullet::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishNotifyAddBullet::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishNotifyAddBullet::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 SC_FishNotifyAddBullet::m_type() const {
  return m_type_;
}
inline void SC_FishNotifyAddBullet::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// required int32 m_seatid = 3;
inline bool SC_FishNotifyAddBullet::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishNotifyAddBullet::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishNotifyAddBullet::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishNotifyAddBullet::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddBullet::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishNotifyAddBullet::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// required .rpc.t_Vector2 m_dir = 4;
inline bool SC_FishNotifyAddBullet::has_m_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_FishNotifyAddBullet::set_has_m_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_FishNotifyAddBullet::clear_has_m_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_FishNotifyAddBullet::clear_m_dir() {
  if (m_dir_ != NULL) m_dir_->::rpc::t_Vector2::Clear();
  clear_has_m_dir();
}
inline const ::rpc::t_Vector2& SC_FishNotifyAddBullet::m_dir() const {
  return m_dir_ != NULL ? *m_dir_ : *default_instance_->m_dir_;
}
inline ::rpc::t_Vector2* SC_FishNotifyAddBullet::mutable_m_dir() {
  set_has_m_dir();
  if (m_dir_ == NULL) m_dir_ = new ::rpc::t_Vector2;
  return m_dir_;
}
inline ::rpc::t_Vector2* SC_FishNotifyAddBullet::release_m_dir() {
  clear_has_m_dir();
  ::rpc::t_Vector2* temp = m_dir_;
  m_dir_ = NULL;
  return temp;
}
inline void SC_FishNotifyAddBullet::set_allocated_m_dir(::rpc::t_Vector2* m_dir) {
  delete m_dir_;
  m_dir_ = m_dir;
  if (m_dir) {
    set_has_m_dir();
  } else {
    clear_has_m_dir();
  }
}

// required .rpc.t_Vector2 m_pos = 5;
inline bool SC_FishNotifyAddBullet::has_m_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_FishNotifyAddBullet::set_has_m_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_FishNotifyAddBullet::clear_has_m_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_FishNotifyAddBullet::clear_m_pos() {
  if (m_pos_ != NULL) m_pos_->::rpc::t_Vector2::Clear();
  clear_has_m_pos();
}
inline const ::rpc::t_Vector2& SC_FishNotifyAddBullet::m_pos() const {
  return m_pos_ != NULL ? *m_pos_ : *default_instance_->m_pos_;
}
inline ::rpc::t_Vector2* SC_FishNotifyAddBullet::mutable_m_pos() {
  set_has_m_pos();
  if (m_pos_ == NULL) m_pos_ = new ::rpc::t_Vector2;
  return m_pos_;
}
inline ::rpc::t_Vector2* SC_FishNotifyAddBullet::release_m_pos() {
  clear_has_m_pos();
  ::rpc::t_Vector2* temp = m_pos_;
  m_pos_ = NULL;
  return temp;
}
inline void SC_FishNotifyAddBullet::set_allocated_m_pos(::rpc::t_Vector2* m_pos) {
  delete m_pos_;
  m_pos_ = m_pos;
  if (m_pos) {
    set_has_m_pos();
  } else {
    clear_has_m_pos();
  }
}

// -------------------------------------------------------------------

// SC_FishNotifyAddBomb

// required int32 m_objid = 1;
inline bool SC_FishNotifyAddBomb::has_m_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyAddBomb::set_has_m_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyAddBomb::clear_has_m_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyAddBomb::clear_m_objid() {
  m_objid_ = 0;
  clear_has_m_objid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddBomb::m_objid() const {
  return m_objid_;
}
inline void SC_FishNotifyAddBomb::set_m_objid(::google::protobuf::int32 value) {
  set_has_m_objid();
  m_objid_ = value;
}

// required int32 m_playerid = 2;
inline bool SC_FishNotifyAddBomb::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishNotifyAddBomb::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishNotifyAddBomb::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishNotifyAddBomb::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddBomb::m_playerid() const {
  return m_playerid_;
}
inline void SC_FishNotifyAddBomb::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required int32 m_seatid = 3;
inline bool SC_FishNotifyAddBomb::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishNotifyAddBomb::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishNotifyAddBomb::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishNotifyAddBomb::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddBomb::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishNotifyAddBomb::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// repeated .rpc.t_Vector2 m_path = 4;
inline int SC_FishNotifyAddBomb::m_path_size() const {
  return m_path_.size();
}
inline void SC_FishNotifyAddBomb::clear_m_path() {
  m_path_.Clear();
}
inline const ::rpc::t_Vector2& SC_FishNotifyAddBomb::m_path(int index) const {
  return m_path_.Get(index);
}
inline ::rpc::t_Vector2* SC_FishNotifyAddBomb::mutable_m_path(int index) {
  return m_path_.Mutable(index);
}
inline ::rpc::t_Vector2* SC_FishNotifyAddBomb::add_m_path() {
  return m_path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_Vector2 >&
SC_FishNotifyAddBomb::m_path() const {
  return m_path_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_Vector2 >*
SC_FishNotifyAddBomb::mutable_m_path() {
  return &m_path_;
}

// -------------------------------------------------------------------

// SC_FishNotifyAddFish

// required int32 m_objid = 1;
inline bool SC_FishNotifyAddFish::has_m_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyAddFish::set_has_m_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyAddFish::clear_has_m_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyAddFish::clear_m_objid() {
  m_objid_ = 0;
  clear_has_m_objid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddFish::m_objid() const {
  return m_objid_;
}
inline void SC_FishNotifyAddFish::set_m_objid(::google::protobuf::int32 value) {
  set_has_m_objid();
  m_objid_ = value;
}

// required int32 m_fishtype = 2;
inline bool SC_FishNotifyAddFish::has_m_fishtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishNotifyAddFish::set_has_m_fishtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishNotifyAddFish::clear_has_m_fishtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishNotifyAddFish::clear_m_fishtype() {
  m_fishtype_ = 0;
  clear_has_m_fishtype();
}
inline ::google::protobuf::int32 SC_FishNotifyAddFish::m_fishtype() const {
  return m_fishtype_;
}
inline void SC_FishNotifyAddFish::set_m_fishtype(::google::protobuf::int32 value) {
  set_has_m_fishtype();
  m_fishtype_ = value;
}

// required int32 m_pathtype = 3;
inline bool SC_FishNotifyAddFish::has_m_pathtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishNotifyAddFish::set_has_m_pathtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishNotifyAddFish::clear_has_m_pathtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishNotifyAddFish::clear_m_pathtype() {
  m_pathtype_ = 0;
  clear_has_m_pathtype();
}
inline ::google::protobuf::int32 SC_FishNotifyAddFish::m_pathtype() const {
  return m_pathtype_;
}
inline void SC_FishNotifyAddFish::set_m_pathtype(::google::protobuf::int32 value) {
  set_has_m_pathtype();
  m_pathtype_ = value;
}

// required int32 m_pathid = 4;
inline bool SC_FishNotifyAddFish::has_m_pathid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_FishNotifyAddFish::set_has_m_pathid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_FishNotifyAddFish::clear_has_m_pathid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_FishNotifyAddFish::clear_m_pathid() {
  m_pathid_ = 0;
  clear_has_m_pathid();
}
inline ::google::protobuf::int32 SC_FishNotifyAddFish::m_pathid() const {
  return m_pathid_;
}
inline void SC_FishNotifyAddFish::set_m_pathid(::google::protobuf::int32 value) {
  set_has_m_pathid();
  m_pathid_ = value;
}

// required float m_runper = 5;
inline bool SC_FishNotifyAddFish::has_m_runper() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_FishNotifyAddFish::set_has_m_runper() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_FishNotifyAddFish::clear_has_m_runper() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_FishNotifyAddFish::clear_m_runper() {
  m_runper_ = 0;
  clear_has_m_runper();
}
inline float SC_FishNotifyAddFish::m_runper() const {
  return m_runper_;
}
inline void SC_FishNotifyAddFish::set_m_runper(float value) {
  set_has_m_runper();
  m_runper_ = value;
}

// -------------------------------------------------------------------

// SC_FishNotifyRmvBullet

// required int32 m_objid = 1;
inline bool SC_FishNotifyRmvBullet::has_m_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyRmvBullet::set_has_m_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyRmvBullet::clear_has_m_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyRmvBullet::clear_m_objid() {
  m_objid_ = 0;
  clear_has_m_objid();
}
inline ::google::protobuf::int32 SC_FishNotifyRmvBullet::m_objid() const {
  return m_objid_;
}
inline void SC_FishNotifyRmvBullet::set_m_objid(::google::protobuf::int32 value) {
  set_has_m_objid();
  m_objid_ = value;
}

// -------------------------------------------------------------------

// SC_FishNotifyRmvFish

// required int32 m_objid = 1;
inline bool SC_FishNotifyRmvFish::has_m_objid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyRmvFish::set_has_m_objid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyRmvFish::clear_has_m_objid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyRmvFish::clear_m_objid() {
  m_objid_ = 0;
  clear_has_m_objid();
}
inline ::google::protobuf::int32 SC_FishNotifyRmvFish::m_objid() const {
  return m_objid_;
}
inline void SC_FishNotifyRmvFish::set_m_objid(::google::protobuf::int32 value) {
  set_has_m_objid();
  m_objid_ = value;
}

// -------------------------------------------------------------------

// SC_FishNotifyRmvPlayer

// required int32 m_seatid = 1;
inline bool SC_FishNotifyRmvPlayer::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyRmvPlayer::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyRmvPlayer::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyRmvPlayer::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishNotifyRmvPlayer::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishNotifyRmvPlayer::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// -------------------------------------------------------------------

// CS_FishReqSwitchCannon

// required int32 m_icannontype = 1;
inline bool CS_FishReqSwitchCannon::has_m_icannontype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_FishReqSwitchCannon::set_has_m_icannontype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_FishReqSwitchCannon::clear_has_m_icannontype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_FishReqSwitchCannon::clear_m_icannontype() {
  m_icannontype_ = 0;
  clear_has_m_icannontype();
}
inline ::google::protobuf::int32 CS_FishReqSwitchCannon::m_icannontype() const {
  return m_icannontype_;
}
inline void CS_FishReqSwitchCannon::set_m_icannontype(::google::protobuf::int32 value) {
  set_has_m_icannontype();
  m_icannontype_ = value;
}

// -------------------------------------------------------------------

// SC_FishNotifySwitchCannon

// required int32 m_iplayerid = 1;
inline bool SC_FishNotifySwitchCannon::has_m_iplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifySwitchCannon::set_has_m_iplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifySwitchCannon::clear_has_m_iplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifySwitchCannon::clear_m_iplayerid() {
  m_iplayerid_ = 0;
  clear_has_m_iplayerid();
}
inline ::google::protobuf::int32 SC_FishNotifySwitchCannon::m_iplayerid() const {
  return m_iplayerid_;
}
inline void SC_FishNotifySwitchCannon::set_m_iplayerid(::google::protobuf::int32 value) {
  set_has_m_iplayerid();
  m_iplayerid_ = value;
}

// required int32 m_iseatid = 2;
inline bool SC_FishNotifySwitchCannon::has_m_iseatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishNotifySwitchCannon::set_has_m_iseatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishNotifySwitchCannon::clear_has_m_iseatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishNotifySwitchCannon::clear_m_iseatid() {
  m_iseatid_ = 0;
  clear_has_m_iseatid();
}
inline ::google::protobuf::int32 SC_FishNotifySwitchCannon::m_iseatid() const {
  return m_iseatid_;
}
inline void SC_FishNotifySwitchCannon::set_m_iseatid(::google::protobuf::int32 value) {
  set_has_m_iseatid();
  m_iseatid_ = value;
}

// required int32 m_icannontype = 3;
inline bool SC_FishNotifySwitchCannon::has_m_icannontype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishNotifySwitchCannon::set_has_m_icannontype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishNotifySwitchCannon::clear_has_m_icannontype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishNotifySwitchCannon::clear_m_icannontype() {
  m_icannontype_ = 0;
  clear_has_m_icannontype();
}
inline ::google::protobuf::int32 SC_FishNotifySwitchCannon::m_icannontype() const {
  return m_icannontype_;
}
inline void SC_FishNotifySwitchCannon::set_m_icannontype(::google::protobuf::int32 value) {
  set_has_m_icannontype();
  m_icannontype_ = value;
}

// -------------------------------------------------------------------

// CS_FishChangeFireCost

// required int32 m_icost = 1;
inline bool CS_FishChangeFireCost::has_m_icost() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_FishChangeFireCost::set_has_m_icost() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_FishChangeFireCost::clear_has_m_icost() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_FishChangeFireCost::clear_m_icost() {
  m_icost_ = 0;
  clear_has_m_icost();
}
inline ::google::protobuf::int32 CS_FishChangeFireCost::m_icost() const {
  return m_icost_;
}
inline void CS_FishChangeFireCost::set_m_icost(::google::protobuf::int32 value) {
  set_has_m_icost();
  m_icost_ = value;
}

// -------------------------------------------------------------------

// SC_FishChangeFireCost

// required int32 m_iseatid = 1;
inline bool SC_FishChangeFireCost::has_m_iseatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishChangeFireCost::set_has_m_iseatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishChangeFireCost::clear_has_m_iseatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishChangeFireCost::clear_m_iseatid() {
  m_iseatid_ = 0;
  clear_has_m_iseatid();
}
inline ::google::protobuf::int32 SC_FishChangeFireCost::m_iseatid() const {
  return m_iseatid_;
}
inline void SC_FishChangeFireCost::set_m_iseatid(::google::protobuf::int32 value) {
  set_has_m_iseatid();
  m_iseatid_ = value;
}

// required int32 m_icost = 2;
inline bool SC_FishChangeFireCost::has_m_icost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishChangeFireCost::set_has_m_icost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishChangeFireCost::clear_has_m_icost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishChangeFireCost::clear_m_icost() {
  m_icost_ = 0;
  clear_has_m_icost();
}
inline ::google::protobuf::int32 SC_FishChangeFireCost::m_icost() const {
  return m_icost_;
}
inline void SC_FishChangeFireCost::set_m_icost(::google::protobuf::int32 value) {
  set_has_m_icost();
  m_icost_ = value;
}

// -------------------------------------------------------------------

// CS_FishSendBullet

// required int32 m_multiple = 1;
inline bool CS_FishSendBullet::has_m_multiple() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_FishSendBullet::set_has_m_multiple() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_FishSendBullet::clear_has_m_multiple() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_FishSendBullet::clear_m_multiple() {
  m_multiple_ = 0;
  clear_has_m_multiple();
}
inline ::google::protobuf::int32 CS_FishSendBullet::m_multiple() const {
  return m_multiple_;
}
inline void CS_FishSendBullet::set_m_multiple(::google::protobuf::int32 value) {
  set_has_m_multiple();
  m_multiple_ = value;
}

// required .rpc.t_Vector2 m_dir = 2;
inline bool CS_FishSendBullet::has_m_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_FishSendBullet::set_has_m_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_FishSendBullet::clear_has_m_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_FishSendBullet::clear_m_dir() {
  if (m_dir_ != NULL) m_dir_->::rpc::t_Vector2::Clear();
  clear_has_m_dir();
}
inline const ::rpc::t_Vector2& CS_FishSendBullet::m_dir() const {
  return m_dir_ != NULL ? *m_dir_ : *default_instance_->m_dir_;
}
inline ::rpc::t_Vector2* CS_FishSendBullet::mutable_m_dir() {
  set_has_m_dir();
  if (m_dir_ == NULL) m_dir_ = new ::rpc::t_Vector2;
  return m_dir_;
}
inline ::rpc::t_Vector2* CS_FishSendBullet::release_m_dir() {
  clear_has_m_dir();
  ::rpc::t_Vector2* temp = m_dir_;
  m_dir_ = NULL;
  return temp;
}
inline void CS_FishSendBullet::set_allocated_m_dir(::rpc::t_Vector2* m_dir) {
  delete m_dir_;
  m_dir_ = m_dir;
  if (m_dir) {
    set_has_m_dir();
  } else {
    clear_has_m_dir();
  }
}

// -------------------------------------------------------------------

// SC_FishNotifyHitFish

// required int32 m_bulletid = 1;
inline bool SC_FishNotifyHitFish::has_m_bulletid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishNotifyHitFish::set_has_m_bulletid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishNotifyHitFish::clear_has_m_bulletid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishNotifyHitFish::clear_m_bulletid() {
  m_bulletid_ = 0;
  clear_has_m_bulletid();
}
inline ::google::protobuf::int32 SC_FishNotifyHitFish::m_bulletid() const {
  return m_bulletid_;
}
inline void SC_FishNotifyHitFish::set_m_bulletid(::google::protobuf::int32 value) {
  set_has_m_bulletid();
  m_bulletid_ = value;
}

// required int32 m_fishid = 2;
inline bool SC_FishNotifyHitFish::has_m_fishid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishNotifyHitFish::set_has_m_fishid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishNotifyHitFish::clear_has_m_fishid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishNotifyHitFish::clear_m_fishid() {
  m_fishid_ = 0;
  clear_has_m_fishid();
}
inline ::google::protobuf::int32 SC_FishNotifyHitFish::m_fishid() const {
  return m_fishid_;
}
inline void SC_FishNotifyHitFish::set_m_fishid(::google::protobuf::int32 value) {
  set_has_m_fishid();
  m_fishid_ = value;
}

// required int32 m_seatid = 3;
inline bool SC_FishNotifyHitFish::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishNotifyHitFish::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishNotifyHitFish::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishNotifyHitFish::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishNotifyHitFish::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishNotifyHitFish::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// required int32 m_playerid = 4;
inline bool SC_FishNotifyHitFish::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_FishNotifyHitFish::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_FishNotifyHitFish::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_FishNotifyHitFish::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 SC_FishNotifyHitFish::m_playerid() const {
  return m_playerid_;
}
inline void SC_FishNotifyHitFish::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required int32 m_money = 5;
inline bool SC_FishNotifyHitFish::has_m_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SC_FishNotifyHitFish::set_has_m_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SC_FishNotifyHitFish::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SC_FishNotifyHitFish::clear_m_money() {
  m_money_ = 0;
  clear_has_m_money();
}
inline ::google::protobuf::int32 SC_FishNotifyHitFish::m_money() const {
  return m_money_;
}
inline void SC_FishNotifyHitFish::set_m_money(::google::protobuf::int32 value) {
  set_has_m_money();
  m_money_ = value;
}

// -------------------------------------------------------------------

// SC_FishLockFish

// required int32 m_fishid = 1;
inline bool SC_FishLockFish::has_m_fishid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishLockFish::set_has_m_fishid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishLockFish::clear_has_m_fishid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishLockFish::clear_m_fishid() {
  m_fishid_ = 0;
  clear_has_m_fishid();
}
inline ::google::protobuf::int32 SC_FishLockFish::m_fishid() const {
  return m_fishid_;
}
inline void SC_FishLockFish::set_m_fishid(::google::protobuf::int32 value) {
  set_has_m_fishid();
  m_fishid_ = value;
}

// required int32 m_seatid = 2;
inline bool SC_FishLockFish::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishLockFish::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishLockFish::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishLockFish::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishLockFish::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishLockFish::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// -------------------------------------------------------------------

// SC_FishRmvDrillBomb

// required int32 m_bulletId = 1;
inline bool SC_FishRmvDrillBomb::has_m_bulletid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishRmvDrillBomb::set_has_m_bulletid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishRmvDrillBomb::clear_has_m_bulletid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishRmvDrillBomb::clear_m_bulletid() {
  m_bulletid_ = 0;
  clear_has_m_bulletid();
}
inline ::google::protobuf::int32 SC_FishRmvDrillBomb::m_bulletid() const {
  return m_bulletid_;
}
inline void SC_FishRmvDrillBomb::set_m_bulletid(::google::protobuf::int32 value) {
  set_has_m_bulletid();
  m_bulletid_ = value;
}

// required int32 m_seatid = 2;
inline bool SC_FishRmvDrillBomb::has_m_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FishRmvDrillBomb::set_has_m_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FishRmvDrillBomb::clear_has_m_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FishRmvDrillBomb::clear_m_seatid() {
  m_seatid_ = 0;
  clear_has_m_seatid();
}
inline ::google::protobuf::int32 SC_FishRmvDrillBomb::m_seatid() const {
  return m_seatid_;
}
inline void SC_FishRmvDrillBomb::set_m_seatid(::google::protobuf::int32 value) {
  set_has_m_seatid();
  m_seatid_ = value;
}

// required int32 m_playerid = 3;
inline bool SC_FishRmvDrillBomb::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FishRmvDrillBomb::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FishRmvDrillBomb::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FishRmvDrillBomb::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 SC_FishRmvDrillBomb::m_playerid() const {
  return m_playerid_;
}
inline void SC_FishRmvDrillBomb::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required int32 m_money = 4;
inline bool SC_FishRmvDrillBomb::has_m_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_FishRmvDrillBomb::set_has_m_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_FishRmvDrillBomb::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_FishRmvDrillBomb::clear_m_money() {
  m_money_ = 0;
  clear_has_m_money();
}
inline ::google::protobuf::int32 SC_FishRmvDrillBomb::m_money() const {
  return m_money_;
}
inline void SC_FishRmvDrillBomb::set_m_money(::google::protobuf::int32 value) {
  set_has_m_money();
  m_money_ = value;
}

// -------------------------------------------------------------------

// CS_FishNotifyHitted

// required int32 m_fishid = 1;
inline bool CS_FishNotifyHitted::has_m_fishid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_FishNotifyHitted::set_has_m_fishid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_FishNotifyHitted::clear_has_m_fishid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_FishNotifyHitted::clear_m_fishid() {
  m_fishid_ = 0;
  clear_has_m_fishid();
}
inline ::google::protobuf::int32 CS_FishNotifyHitted::m_fishid() const {
  return m_fishid_;
}
inline void CS_FishNotifyHitted::set_m_fishid(::google::protobuf::int32 value) {
  set_has_m_fishid();
  m_fishid_ = value;
}

// -------------------------------------------------------------------

// SC_FishEnterNextLvl

// required int32 m_Lvl = 1;
inline bool SC_FishEnterNextLvl::has_m_lvl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FishEnterNextLvl::set_has_m_lvl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FishEnterNextLvl::clear_has_m_lvl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FishEnterNextLvl::clear_m_lvl() {
  m_lvl_ = 0;
  clear_has_m_lvl();
}
inline ::google::protobuf::int32 SC_FishEnterNextLvl::m_lvl() const {
  return m_lvl_;
}
inline void SC_FishEnterNextLvl::set_m_lvl(::google::protobuf::int32 value) {
  set_has_m_lvl();
  m_lvl_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::emBulletType>() {
  return ::rpc::emBulletType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::emPacket_Fish>() {
  return ::rpc::emPacket_Fish_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Packet_5fFish_2eproto__INCLUDED
