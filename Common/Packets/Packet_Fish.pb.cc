// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_Fish.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Packet_Fish.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* t_Vector2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_Vector2_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_fish_seat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_fish_seat_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_fish_table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_fish_table_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_FishPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_FishPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishGameData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishGameData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishTables_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishTables_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_FishEnterTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_FishEnterTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishEnterTableRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishEnterTableRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishPlayerLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishPlayerLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyAddPlayerMySelf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyAddPlayerMySelf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyAddPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyAddPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyFireBullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyFireBullet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyFireFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyFireFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyAddBullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyAddBullet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyAddBomb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyAddBomb_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyAddFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyAddFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyRmvBullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyRmvBullet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyRmvFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyRmvFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyRmvPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyRmvPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_FishReqSwitchCannon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_FishReqSwitchCannon_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifySwitchCannon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifySwitchCannon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_FishChangeFireCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_FishChangeFireCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishChangeFireCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishChangeFireCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_FishSendBullet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_FishSendBullet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishNotifyHitFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishNotifyHitFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishLockFish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishLockFish_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishRmvDrillBomb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishRmvDrillBomb_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_FishNotifyHitted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_FishNotifyHitted_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FishEnterNextLvl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FishEnterNextLvl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* emBulletType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* emPacket_Fish_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Packet_5fFish_2eproto() {
  protobuf_AddDesc_Packet_5fFish_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Packet_Fish.proto");
  GOOGLE_CHECK(file != NULL);
  t_Vector2_descriptor_ = file->message_type(0);
  static const int t_Vector2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Vector2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Vector2, y_),
  };
  t_Vector2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_Vector2_descriptor_,
      t_Vector2::default_instance_,
      t_Vector2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Vector2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Vector2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_Vector2));
  t_Vector3_descriptor_ = file->message_type(1);
  static const int t_Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Vector3, z_),
  };
  t_Vector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_Vector3_descriptor_,
      t_Vector3::default_instance_,
      t_Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Vector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_Vector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_Vector3));
  t_fish_seat_descriptor_ = file->message_type(2);
  static const int t_fish_seat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_fish_seat, m_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_fish_seat, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_fish_seat, m_playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_fish_seat, m_headid_),
  };
  t_fish_seat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_fish_seat_descriptor_,
      t_fish_seat::default_instance_,
      t_fish_seat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_fish_seat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_fish_seat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_fish_seat));
  t_fish_table_descriptor_ = file->message_type(3);
  static const int t_fish_table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_fish_table, m_tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_fish_table, m_seats_),
  };
  t_fish_table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_fish_table_descriptor_,
      t_fish_table::default_instance_,
      t_fish_table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_fish_table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_fish_table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_fish_table));
  t_FishPlayer_descriptor_ = file->message_type(4);
  static const int t_FishPlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FishPlayer, m_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FishPlayer, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FishPlayer, m_playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FishPlayer, m_headid_),
  };
  t_FishPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_FishPlayer_descriptor_,
      t_FishPlayer::default_instance_,
      t_FishPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FishPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FishPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_FishPlayer));
  SC_FishGameData_descriptor_ = file->message_type(5);
  static const int SC_FishGameData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishGameData, m_playernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishGameData, m_tables_),
  };
  SC_FishGameData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishGameData_descriptor_,
      SC_FishGameData::default_instance_,
      SC_FishGameData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishGameData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishGameData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishGameData));
  SC_FishTables_descriptor_ = file->message_type(6);
  static const int SC_FishTables_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishTables, m_tables_),
  };
  SC_FishTables_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishTables_descriptor_,
      SC_FishTables::default_instance_,
      SC_FishTables_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishTables, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishTables, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishTables));
  CS_FishEnterTable_descriptor_ = file->message_type(7);
  static const int CS_FishEnterTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishEnterTable, m_tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishEnterTable, m_seatid_),
  };
  CS_FishEnterTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_FishEnterTable_descriptor_,
      CS_FishEnterTable::default_instance_,
      CS_FishEnterTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishEnterTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishEnterTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_FishEnterTable));
  SC_FishEnterTableRst_descriptor_ = file->message_type(8);
  static const int SC_FishEnterTableRst_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishEnterTableRst, m_rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishEnterTableRst, m_tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishEnterTableRst, m_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishEnterTableRst, m_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishEnterTableRst, m_bomb_),
  };
  SC_FishEnterTableRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishEnterTableRst_descriptor_,
      SC_FishEnterTableRst::default_instance_,
      SC_FishEnterTableRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishEnterTableRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishEnterTableRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishEnterTableRst));
  SC_FishPlayerLeave_descriptor_ = file->message_type(9);
  static const int SC_FishPlayerLeave_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishPlayerLeave, m_seatid_),
  };
  SC_FishPlayerLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishPlayerLeave_descriptor_,
      SC_FishPlayerLeave::default_instance_,
      SC_FishPlayerLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishPlayerLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishPlayerLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishPlayerLeave));
  SC_FishNotifyAddPlayerMySelf_descriptor_ = file->message_type(10);
  static const int SC_FishNotifyAddPlayerMySelf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayerMySelf, m_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayerMySelf, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayerMySelf, m_playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayerMySelf, m_bulletnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayerMySelf, m_bomb_),
  };
  SC_FishNotifyAddPlayerMySelf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyAddPlayerMySelf_descriptor_,
      SC_FishNotifyAddPlayerMySelf::default_instance_,
      SC_FishNotifyAddPlayerMySelf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayerMySelf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayerMySelf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyAddPlayerMySelf));
  SC_FishNotifyAddPlayer_descriptor_ = file->message_type(11);
  static const int SC_FishNotifyAddPlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayer, m_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayer, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayer, m_playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayer, m_bomb_),
  };
  SC_FishNotifyAddPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyAddPlayer_descriptor_,
      SC_FishNotifyAddPlayer::default_instance_,
      SC_FishNotifyAddPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyAddPlayer));
  SC_FishNotifyFireBullet_descriptor_ = file->message_type(12);
  static const int SC_FishNotifyFireBullet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireBullet, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireBullet, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireBullet, m_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireBullet, m_dir_),
  };
  SC_FishNotifyFireBullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyFireBullet_descriptor_,
      SC_FishNotifyFireBullet::default_instance_,
      SC_FishNotifyFireBullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireBullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireBullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyFireBullet));
  SC_FishNotifyFireFish_descriptor_ = file->message_type(13);
  static const int SC_FishNotifyFireFish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireFish, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireFish, m_fishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireFish, m_pathtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireFish, m_pathid_),
  };
  SC_FishNotifyFireFish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyFireFish_descriptor_,
      SC_FishNotifyFireFish::default_instance_,
      SC_FishNotifyFireFish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireFish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyFireFish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyFireFish));
  SC_FishNotifyAddBullet_descriptor_ = file->message_type(14);
  static const int SC_FishNotifyAddBullet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBullet, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBullet, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBullet, m_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBullet, m_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBullet, m_pos_),
  };
  SC_FishNotifyAddBullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyAddBullet_descriptor_,
      SC_FishNotifyAddBullet::default_instance_,
      SC_FishNotifyAddBullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyAddBullet));
  SC_FishNotifyAddBomb_descriptor_ = file->message_type(15);
  static const int SC_FishNotifyAddBomb_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBomb, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBomb, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBomb, m_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBomb, m_path_),
  };
  SC_FishNotifyAddBomb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyAddBomb_descriptor_,
      SC_FishNotifyAddBomb::default_instance_,
      SC_FishNotifyAddBomb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBomb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddBomb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyAddBomb));
  SC_FishNotifyAddFish_descriptor_ = file->message_type(16);
  static const int SC_FishNotifyAddFish_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddFish, m_objid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddFish, m_fishtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddFish, m_pathtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddFish, m_pathid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddFish, m_runper_),
  };
  SC_FishNotifyAddFish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyAddFish_descriptor_,
      SC_FishNotifyAddFish::default_instance_,
      SC_FishNotifyAddFish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddFish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyAddFish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyAddFish));
  SC_FishNotifyRmvBullet_descriptor_ = file->message_type(17);
  static const int SC_FishNotifyRmvBullet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyRmvBullet, m_objid_),
  };
  SC_FishNotifyRmvBullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyRmvBullet_descriptor_,
      SC_FishNotifyRmvBullet::default_instance_,
      SC_FishNotifyRmvBullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyRmvBullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyRmvBullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyRmvBullet));
  SC_FishNotifyRmvFish_descriptor_ = file->message_type(18);
  static const int SC_FishNotifyRmvFish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyRmvFish, m_objid_),
  };
  SC_FishNotifyRmvFish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyRmvFish_descriptor_,
      SC_FishNotifyRmvFish::default_instance_,
      SC_FishNotifyRmvFish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyRmvFish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyRmvFish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyRmvFish));
  SC_FishNotifyRmvPlayer_descriptor_ = file->message_type(19);
  static const int SC_FishNotifyRmvPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyRmvPlayer, m_seatid_),
  };
  SC_FishNotifyRmvPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyRmvPlayer_descriptor_,
      SC_FishNotifyRmvPlayer::default_instance_,
      SC_FishNotifyRmvPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyRmvPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyRmvPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyRmvPlayer));
  CS_FishReqSwitchCannon_descriptor_ = file->message_type(20);
  static const int CS_FishReqSwitchCannon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishReqSwitchCannon, m_icannontype_),
  };
  CS_FishReqSwitchCannon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_FishReqSwitchCannon_descriptor_,
      CS_FishReqSwitchCannon::default_instance_,
      CS_FishReqSwitchCannon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishReqSwitchCannon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishReqSwitchCannon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_FishReqSwitchCannon));
  SC_FishNotifySwitchCannon_descriptor_ = file->message_type(21);
  static const int SC_FishNotifySwitchCannon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifySwitchCannon, m_iplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifySwitchCannon, m_iseatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifySwitchCannon, m_icannontype_),
  };
  SC_FishNotifySwitchCannon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifySwitchCannon_descriptor_,
      SC_FishNotifySwitchCannon::default_instance_,
      SC_FishNotifySwitchCannon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifySwitchCannon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifySwitchCannon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifySwitchCannon));
  CS_FishChangeFireCost_descriptor_ = file->message_type(22);
  static const int CS_FishChangeFireCost_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishChangeFireCost, m_icost_),
  };
  CS_FishChangeFireCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_FishChangeFireCost_descriptor_,
      CS_FishChangeFireCost::default_instance_,
      CS_FishChangeFireCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishChangeFireCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishChangeFireCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_FishChangeFireCost));
  SC_FishChangeFireCost_descriptor_ = file->message_type(23);
  static const int SC_FishChangeFireCost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishChangeFireCost, m_iseatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishChangeFireCost, m_icost_),
  };
  SC_FishChangeFireCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishChangeFireCost_descriptor_,
      SC_FishChangeFireCost::default_instance_,
      SC_FishChangeFireCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishChangeFireCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishChangeFireCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishChangeFireCost));
  CS_FishSendBullet_descriptor_ = file->message_type(24);
  static const int CS_FishSendBullet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishSendBullet, m_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishSendBullet, m_dir_),
  };
  CS_FishSendBullet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_FishSendBullet_descriptor_,
      CS_FishSendBullet::default_instance_,
      CS_FishSendBullet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishSendBullet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishSendBullet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_FishSendBullet));
  SC_FishNotifyHitFish_descriptor_ = file->message_type(25);
  static const int SC_FishNotifyHitFish_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyHitFish, m_bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyHitFish, m_fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyHitFish, m_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyHitFish, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyHitFish, m_money_),
  };
  SC_FishNotifyHitFish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishNotifyHitFish_descriptor_,
      SC_FishNotifyHitFish::default_instance_,
      SC_FishNotifyHitFish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyHitFish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishNotifyHitFish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishNotifyHitFish));
  SC_FishLockFish_descriptor_ = file->message_type(26);
  static const int SC_FishLockFish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishLockFish, m_fishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishLockFish, m_seatid_),
  };
  SC_FishLockFish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishLockFish_descriptor_,
      SC_FishLockFish::default_instance_,
      SC_FishLockFish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishLockFish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishLockFish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishLockFish));
  SC_FishRmvDrillBomb_descriptor_ = file->message_type(27);
  static const int SC_FishRmvDrillBomb_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishRmvDrillBomb, m_bulletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishRmvDrillBomb, m_seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishRmvDrillBomb, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishRmvDrillBomb, m_money_),
  };
  SC_FishRmvDrillBomb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishRmvDrillBomb_descriptor_,
      SC_FishRmvDrillBomb::default_instance_,
      SC_FishRmvDrillBomb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishRmvDrillBomb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishRmvDrillBomb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishRmvDrillBomb));
  CS_FishNotifyHitted_descriptor_ = file->message_type(28);
  static const int CS_FishNotifyHitted_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishNotifyHitted, m_fishid_),
  };
  CS_FishNotifyHitted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_FishNotifyHitted_descriptor_,
      CS_FishNotifyHitted::default_instance_,
      CS_FishNotifyHitted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishNotifyHitted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FishNotifyHitted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_FishNotifyHitted));
  SC_FishEnterNextLvl_descriptor_ = file->message_type(29);
  static const int SC_FishEnterNextLvl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishEnterNextLvl, m_lvl_),
  };
  SC_FishEnterNextLvl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FishEnterNextLvl_descriptor_,
      SC_FishEnterNextLvl::default_instance_,
      SC_FishEnterNextLvl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishEnterNextLvl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FishEnterNextLvl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FishEnterNextLvl));
  emBulletType_descriptor_ = file->enum_type(0);
  emPacket_Fish_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Packet_5fFish_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_Vector2_descriptor_, &t_Vector2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_Vector3_descriptor_, &t_Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_fish_seat_descriptor_, &t_fish_seat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_fish_table_descriptor_, &t_fish_table::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_FishPlayer_descriptor_, &t_FishPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishGameData_descriptor_, &SC_FishGameData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishTables_descriptor_, &SC_FishTables::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_FishEnterTable_descriptor_, &CS_FishEnterTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishEnterTableRst_descriptor_, &SC_FishEnterTableRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishPlayerLeave_descriptor_, &SC_FishPlayerLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyAddPlayerMySelf_descriptor_, &SC_FishNotifyAddPlayerMySelf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyAddPlayer_descriptor_, &SC_FishNotifyAddPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyFireBullet_descriptor_, &SC_FishNotifyFireBullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyFireFish_descriptor_, &SC_FishNotifyFireFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyAddBullet_descriptor_, &SC_FishNotifyAddBullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyAddBomb_descriptor_, &SC_FishNotifyAddBomb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyAddFish_descriptor_, &SC_FishNotifyAddFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyRmvBullet_descriptor_, &SC_FishNotifyRmvBullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyRmvFish_descriptor_, &SC_FishNotifyRmvFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyRmvPlayer_descriptor_, &SC_FishNotifyRmvPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_FishReqSwitchCannon_descriptor_, &CS_FishReqSwitchCannon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifySwitchCannon_descriptor_, &SC_FishNotifySwitchCannon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_FishChangeFireCost_descriptor_, &CS_FishChangeFireCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishChangeFireCost_descriptor_, &SC_FishChangeFireCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_FishSendBullet_descriptor_, &CS_FishSendBullet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishNotifyHitFish_descriptor_, &SC_FishNotifyHitFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishLockFish_descriptor_, &SC_FishLockFish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishRmvDrillBomb_descriptor_, &SC_FishRmvDrillBomb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_FishNotifyHitted_descriptor_, &CS_FishNotifyHitted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FishEnterNextLvl_descriptor_, &SC_FishEnterNextLvl::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Packet_5fFish_2eproto() {
  delete t_Vector2::default_instance_;
  delete t_Vector2_reflection_;
  delete t_Vector3::default_instance_;
  delete t_Vector3_reflection_;
  delete t_fish_seat::default_instance_;
  delete t_fish_seat_reflection_;
  delete t_fish_table::default_instance_;
  delete t_fish_table_reflection_;
  delete t_FishPlayer::default_instance_;
  delete t_FishPlayer_reflection_;
  delete SC_FishGameData::default_instance_;
  delete SC_FishGameData_reflection_;
  delete SC_FishTables::default_instance_;
  delete SC_FishTables_reflection_;
  delete CS_FishEnterTable::default_instance_;
  delete CS_FishEnterTable_reflection_;
  delete SC_FishEnterTableRst::default_instance_;
  delete SC_FishEnterTableRst_reflection_;
  delete SC_FishPlayerLeave::default_instance_;
  delete SC_FishPlayerLeave_reflection_;
  delete SC_FishNotifyAddPlayerMySelf::default_instance_;
  delete SC_FishNotifyAddPlayerMySelf_reflection_;
  delete SC_FishNotifyAddPlayer::default_instance_;
  delete SC_FishNotifyAddPlayer_reflection_;
  delete SC_FishNotifyFireBullet::default_instance_;
  delete SC_FishNotifyFireBullet_reflection_;
  delete SC_FishNotifyFireFish::default_instance_;
  delete SC_FishNotifyFireFish_reflection_;
  delete SC_FishNotifyAddBullet::default_instance_;
  delete SC_FishNotifyAddBullet_reflection_;
  delete SC_FishNotifyAddBomb::default_instance_;
  delete SC_FishNotifyAddBomb_reflection_;
  delete SC_FishNotifyAddFish::default_instance_;
  delete SC_FishNotifyAddFish_reflection_;
  delete SC_FishNotifyRmvBullet::default_instance_;
  delete SC_FishNotifyRmvBullet_reflection_;
  delete SC_FishNotifyRmvFish::default_instance_;
  delete SC_FishNotifyRmvFish_reflection_;
  delete SC_FishNotifyRmvPlayer::default_instance_;
  delete SC_FishNotifyRmvPlayer_reflection_;
  delete CS_FishReqSwitchCannon::default_instance_;
  delete CS_FishReqSwitchCannon_reflection_;
  delete SC_FishNotifySwitchCannon::default_instance_;
  delete SC_FishNotifySwitchCannon_reflection_;
  delete CS_FishChangeFireCost::default_instance_;
  delete CS_FishChangeFireCost_reflection_;
  delete SC_FishChangeFireCost::default_instance_;
  delete SC_FishChangeFireCost_reflection_;
  delete CS_FishSendBullet::default_instance_;
  delete CS_FishSendBullet_reflection_;
  delete SC_FishNotifyHitFish::default_instance_;
  delete SC_FishNotifyHitFish_reflection_;
  delete SC_FishLockFish::default_instance_;
  delete SC_FishLockFish_reflection_;
  delete SC_FishRmvDrillBomb::default_instance_;
  delete SC_FishRmvDrillBomb_reflection_;
  delete CS_FishNotifyHitted::default_instance_;
  delete CS_FishNotifyHitted_reflection_;
  delete SC_FishEnterNextLvl::default_instance_;
  delete SC_FishEnterNextLvl_reflection_;
}

void protobuf_AddDesc_Packet_5fFish_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rpc::protobuf_AddDesc_Packet_5fBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021Packet_Fish.proto\022\003rpc\032\021Packet_Base.pr"
    "oto\"!\n\tt_Vector2\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\","
    "\n\tt_Vector3\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003"
    " \002(\002\"[\n\013t_fish_seat\022\020\n\010m_seatid\030\001 \002(\005\022\022\n"
    "\nm_playerid\030\002 \002(\005\022\024\n\014m_playername\030\003 \002(\t\022"
    "\020\n\010m_headid\030\004 \002(\005\"D\n\014t_fish_table\022\021\n\tm_t"
    "ableid\030\001 \002(\005\022!\n\007m_seats\030\002 \003(\0132\020.rpc.t_fi"
    "sh_seat\"\\\n\014t_FishPlayer\022\020\n\010m_seatid\030\001 \002("
    "\005\022\022\n\nm_playerid\030\002 \002(\005\022\024\n\014m_playername\030\003 "
    "\002(\t\022\020\n\010m_headid\030\004 \002(\005\"K\n\017SC_FishGameData"
    "\022\023\n\013m_playernum\030\001 \002(\005\022#\n\010m_tables\030\002 \003(\0132"
    "\021.rpc.t_fish_table\"4\n\rSC_FishTables\022#\n\010m"
    "_tables\030\001 \003(\0132\021.rpc.t_fish_table\"8\n\021CS_F"
    "ishEnterTable\022\021\n\tm_tableid\030\001 \002(\005\022\020\n\010m_se"
    "atid\030\002 \002(\005\"\200\001\n\024SC_FishEnterTableRst\022\r\n\005m"
    "_rst\030\001 \002(\005\022\021\n\tm_tableId\030\002 \002(\005\022\020\n\010m_seatI"
    "d\030\003 \002(\005\022$\n\tm_players\030\004 \003(\0132\021.rpc.t_FishP"
    "layer\022\016\n\006m_bomb\030\005 \001(\005\"&\n\022SC_FishPlayerLe"
    "ave\022\020\n\010m_seatid\030\001 \002(\005\"\177\n\034SC_FishNotifyAd"
    "dPlayerMySelf\022\020\n\010m_seatid\030\001 \002(\005\022\022\n\nm_pla"
    "yerid\030\002 \002(\005\022\024\n\014m_playername\030\003 \002(\t\022\023\n\013m_b"
    "ulletNum\030\004 \002(\005\022\016\n\006m_bomb\030\005 \002(\005\"d\n\026SC_Fis"
    "hNotifyAddPlayer\022\020\n\010m_seatid\030\001 \002(\005\022\022\n\nm_"
    "playerid\030\002 \002(\005\022\024\n\014m_playername\030\003 \002(\t\022\016\n\006"
    "m_bomb\030\004 \002(\005\"k\n\027SC_FishNotifyFireBullet\022"
    "\017\n\007m_objid\030\001 \002(\005\022\016\n\006m_type\030\002 \002(\005\022\020\n\010m_se"
    "atid\030\003 \002(\005\022\035\n\005m_dir\030\004 \002(\0132\016.rpc.t_Vector"
    "2\"b\n\025SC_FishNotifyFireFish\022\017\n\007m_objid\030\001 "
    "\002(\005\022\022\n\nm_fishtype\030\002 \002(\005\022\022\n\nm_pathtype\030\003 "
    "\002(\005\022\020\n\010m_pathid\030\004 \002(\005\"\211\001\n\026SC_FishNotifyA"
    "ddBullet\022\017\n\007m_objid\030\001 \002(\005\022\016\n\006m_type\030\002 \002("
    "\005\022\020\n\010m_seatid\030\003 \002(\005\022\035\n\005m_dir\030\004 \002(\0132\016.rpc"
    ".t_Vector2\022\035\n\005m_pos\030\005 \002(\0132\016.rpc.t_Vector"
    "2\"m\n\024SC_FishNotifyAddBomb\022\017\n\007m_objid\030\001 \002"
    "(\005\022\022\n\nm_playerid\030\002 \002(\005\022\020\n\010m_seatid\030\003 \002(\005"
    "\022\036\n\006m_path\030\004 \003(\0132\016.rpc.t_Vector2\"s\n\024SC_F"
    "ishNotifyAddFish\022\017\n\007m_objid\030\001 \002(\005\022\022\n\nm_f"
    "ishtype\030\002 \002(\005\022\022\n\nm_pathtype\030\003 \002(\005\022\020\n\010m_p"
    "athid\030\004 \002(\005\022\020\n\010m_runper\030\005 \002(\002\")\n\026SC_Fish"
    "NotifyRmvBullet\022\017\n\007m_objid\030\001 \002(\005\"\'\n\024SC_F"
    "ishNotifyRmvFish\022\017\n\007m_objid\030\001 \002(\005\"*\n\026SC_"
    "FishNotifyRmvPlayer\022\020\n\010m_seatid\030\001 \002(\005\"/\n"
    "\026CS_FishReqSwitchCannon\022\025\n\rm_icannontype"
    "\030\001 \002(\005\"Z\n\031SC_FishNotifySwitchCannon\022\023\n\013m"
    "_iplayerid\030\001 \002(\005\022\021\n\tm_iseatid\030\002 \002(\005\022\025\n\rm"
    "_icannontype\030\003 \002(\005\"(\n\025CS_FishChangeFireC"
    "ost\022\017\n\007m_icost\030\001 \002(\005\";\n\025SC_FishChangeFir"
    "eCost\022\021\n\tm_iseatid\030\001 \002(\005\022\017\n\007m_icost\030\002 \002("
    "\005\"F\n\021CS_FishSendBullet\022\022\n\nm_multiple\030\001 \002"
    "(\005\022\035\n\005m_dir\030\002 \002(\0132\016.rpc.t_Vector2\"s\n\024SC_"
    "FishNotifyHitFish\022\022\n\nm_bulletid\030\001 \002(\005\022\020\n"
    "\010m_fishid\030\002 \002(\005\022\020\n\010m_seatid\030\003 \002(\005\022\022\n\nm_p"
    "layerid\030\004 \002(\005\022\017\n\007m_money\030\005 \002(\005\"5\n\017SC_Fis"
    "hLockFish\022\020\n\010m_fishid\030\001 \002(\005\022\020\n\010m_seatid\030"
    "\002 \002(\005\"`\n\023SC_FishRmvDrillBomb\022\022\n\nm_bullet"
    "Id\030\001 \002(\005\022\020\n\010m_seatid\030\002 \002(\005\022\022\n\nm_playerid"
    "\030\003 \002(\005\022\017\n\007m_money\030\004 \002(\005\"\'\n\023CS_FishNotify"
    "Hitted\022\020\n\010m_fishid\030\001 \002(\005\"$\n\023SC_FishEnter"
    "NextLvl\022\r\n\005m_Lvl\030\001 \002(\005*\266\001\n\014emBulletType\022"
    "\031\n\025BulletType_fishingnet\020\001\022\025\n\021BulletType"
    "_normal\020\002\022\037\n\033BulletType_electromagnetism"
    "\020\003\022\024\n\020BulletType_drill\020\004\022\023\n\017BulletType_b"
    "omb\020\005\022\024\n\020BulletType_laser\020\006\022\022\n\016BulletTyp"
    "e_max\020\007*\325\006\n\remPacket_Fish\022\022\n\rem_Fish_Beg"
    "in\020\200\006\022\027\n\022em_CS_FishGameData\020\201\006\022\027\n\022em_SC_"
    "FishGameData\020\202\006\022\025\n\020em_CS_FishTables\020\203\006\022\025"
    "\n\020em_SC_FishTables\020\204\006\022\031\n\024em_CS_FishEnter"
    "Table\020\205\006\022\034\n\027em_SC_FishEnterTableRst\020\206\006\022$"
    "\n\037em_SC_FishNotifyAddPlayerMySelf\020\207\006\022\036\n\031"
    "em_SC_FishNotifyAddPlayer\020\210\006\022\037\n\032em_SC_Fi"
    "shNotifyFireBullet\020\211\006\022\035\n\030em_SC_FishNotif"
    "yFireFish\020\212\006\022\036\n\031em_SC_FishNotifyAddBulle"
    "t\020\213\006\022\034\n\027em_SC_FishNotifyAddBomb\020\214\006\022\034\n\027em"
    "_SC_FishNotifyAddFish\020\215\006\022\036\n\031em_SC_FishNo"
    "tifyRmvBullet\020\216\006\022\034\n\027em_SC_FishNotifyRmvF"
    "ish\020\217\006\022\036\n\031em_SC_FishNotifyRmvPlayer\020\220\006\022\036"
    "\n\031em_CS_FishReqSwitchCannon\020\221\006\022!\n\034em_SC_"
    "FishNotifySwitchCannon\020\222\006\022\035\n\030em_CS_FishC"
    "hangeFireCost\020\223\006\022\035\n\030em_SC_FishChangeFire"
    "Cost\020\224\006\022\031\n\024em_CS_FishSendBullet\020\225\006\022\034\n\027em"
    "_SC_FishNotifyHitFish\020\226\006\022\027\n\022em_SC_FishLo"
    "ckFish\020\227\006\022\033\n\026em_SC_FishRmvDrillBomb\020\230\006\022\033"
    "\n\026em_CS_FishNotifyHitted\020\231\006\022\033\n\026em_SC_Fis"
    "hAllFishLeave\020\232\006\022\033\n\026em_SC_FishEnterNextL"
    "vl\020\233\006\022\020\n\013em_Fish_End\020\377\007", 3383);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Packet_Fish.proto", &protobuf_RegisterTypes);
  t_Vector2::default_instance_ = new t_Vector2();
  t_Vector3::default_instance_ = new t_Vector3();
  t_fish_seat::default_instance_ = new t_fish_seat();
  t_fish_table::default_instance_ = new t_fish_table();
  t_FishPlayer::default_instance_ = new t_FishPlayer();
  SC_FishGameData::default_instance_ = new SC_FishGameData();
  SC_FishTables::default_instance_ = new SC_FishTables();
  CS_FishEnterTable::default_instance_ = new CS_FishEnterTable();
  SC_FishEnterTableRst::default_instance_ = new SC_FishEnterTableRst();
  SC_FishPlayerLeave::default_instance_ = new SC_FishPlayerLeave();
  SC_FishNotifyAddPlayerMySelf::default_instance_ = new SC_FishNotifyAddPlayerMySelf();
  SC_FishNotifyAddPlayer::default_instance_ = new SC_FishNotifyAddPlayer();
  SC_FishNotifyFireBullet::default_instance_ = new SC_FishNotifyFireBullet();
  SC_FishNotifyFireFish::default_instance_ = new SC_FishNotifyFireFish();
  SC_FishNotifyAddBullet::default_instance_ = new SC_FishNotifyAddBullet();
  SC_FishNotifyAddBomb::default_instance_ = new SC_FishNotifyAddBomb();
  SC_FishNotifyAddFish::default_instance_ = new SC_FishNotifyAddFish();
  SC_FishNotifyRmvBullet::default_instance_ = new SC_FishNotifyRmvBullet();
  SC_FishNotifyRmvFish::default_instance_ = new SC_FishNotifyRmvFish();
  SC_FishNotifyRmvPlayer::default_instance_ = new SC_FishNotifyRmvPlayer();
  CS_FishReqSwitchCannon::default_instance_ = new CS_FishReqSwitchCannon();
  SC_FishNotifySwitchCannon::default_instance_ = new SC_FishNotifySwitchCannon();
  CS_FishChangeFireCost::default_instance_ = new CS_FishChangeFireCost();
  SC_FishChangeFireCost::default_instance_ = new SC_FishChangeFireCost();
  CS_FishSendBullet::default_instance_ = new CS_FishSendBullet();
  SC_FishNotifyHitFish::default_instance_ = new SC_FishNotifyHitFish();
  SC_FishLockFish::default_instance_ = new SC_FishLockFish();
  SC_FishRmvDrillBomb::default_instance_ = new SC_FishRmvDrillBomb();
  CS_FishNotifyHitted::default_instance_ = new CS_FishNotifyHitted();
  SC_FishEnterNextLvl::default_instance_ = new SC_FishEnterNextLvl();
  t_Vector2::default_instance_->InitAsDefaultInstance();
  t_Vector3::default_instance_->InitAsDefaultInstance();
  t_fish_seat::default_instance_->InitAsDefaultInstance();
  t_fish_table::default_instance_->InitAsDefaultInstance();
  t_FishPlayer::default_instance_->InitAsDefaultInstance();
  SC_FishGameData::default_instance_->InitAsDefaultInstance();
  SC_FishTables::default_instance_->InitAsDefaultInstance();
  CS_FishEnterTable::default_instance_->InitAsDefaultInstance();
  SC_FishEnterTableRst::default_instance_->InitAsDefaultInstance();
  SC_FishPlayerLeave::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyAddPlayerMySelf::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyAddPlayer::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyFireBullet::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyFireFish::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyAddBullet::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyAddBomb::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyAddFish::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyRmvBullet::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyRmvFish::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyRmvPlayer::default_instance_->InitAsDefaultInstance();
  CS_FishReqSwitchCannon::default_instance_->InitAsDefaultInstance();
  SC_FishNotifySwitchCannon::default_instance_->InitAsDefaultInstance();
  CS_FishChangeFireCost::default_instance_->InitAsDefaultInstance();
  SC_FishChangeFireCost::default_instance_->InitAsDefaultInstance();
  CS_FishSendBullet::default_instance_->InitAsDefaultInstance();
  SC_FishNotifyHitFish::default_instance_->InitAsDefaultInstance();
  SC_FishLockFish::default_instance_->InitAsDefaultInstance();
  SC_FishRmvDrillBomb::default_instance_->InitAsDefaultInstance();
  CS_FishNotifyHitted::default_instance_->InitAsDefaultInstance();
  SC_FishEnterNextLvl::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Packet_5fFish_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Packet_5fFish_2eproto {
  StaticDescriptorInitializer_Packet_5fFish_2eproto() {
    protobuf_AddDesc_Packet_5fFish_2eproto();
  }
} static_descriptor_initializer_Packet_5fFish_2eproto_;
const ::google::protobuf::EnumDescriptor* emBulletType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emBulletType_descriptor_;
}
bool emBulletType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* emPacket_Fish_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emPacket_Fish_descriptor_;
}
bool emPacket_Fish_IsValid(int value) {
  switch(value) {
    case 768:
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 779:
    case 780:
    case 781:
    case 782:
    case 783:
    case 784:
    case 785:
    case 786:
    case 787:
    case 788:
    case 789:
    case 790:
    case 791:
    case 792:
    case 793:
    case 794:
    case 795:
    case 1023:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int t_Vector2::kXFieldNumber;
const int t_Vector2::kYFieldNumber;
#endif  // !_MSC_VER

t_Vector2::t_Vector2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_Vector2::InitAsDefaultInstance() {
}

t_Vector2::t_Vector2(const t_Vector2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_Vector2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_Vector2::~t_Vector2() {
  SharedDtor();
}

void t_Vector2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t_Vector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_Vector2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_Vector2_descriptor_;
}

const t_Vector2& t_Vector2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

t_Vector2* t_Vector2::default_instance_ = NULL;

t_Vector2* t_Vector2::New() const {
  return new t_Vector2;
}

void t_Vector2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_Vector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_Vector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_Vector2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_Vector2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_Vector2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_Vector2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_Vector2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_Vector2::MergeFrom(const t_Vector2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_Vector2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_Vector2::CopyFrom(const t_Vector2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_Vector2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void t_Vector2::Swap(t_Vector2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_Vector2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_Vector2_descriptor_;
  metadata.reflection = t_Vector2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_Vector3::kXFieldNumber;
const int t_Vector3::kYFieldNumber;
const int t_Vector3::kZFieldNumber;
#endif  // !_MSC_VER

t_Vector3::t_Vector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_Vector3::InitAsDefaultInstance() {
}

t_Vector3::t_Vector3(const t_Vector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_Vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_Vector3::~t_Vector3() {
  SharedDtor();
}

void t_Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t_Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_Vector3_descriptor_;
}

const t_Vector3& t_Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

t_Vector3* t_Vector3::default_instance_ = NULL;

t_Vector3* t_Vector3::New() const {
  return new t_Vector3;
}

void t_Vector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_Vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_Vector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_Vector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_Vector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_Vector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_Vector3::MergeFrom(const t_Vector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_Vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_Vector3::CopyFrom(const t_Vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_Vector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void t_Vector3::Swap(t_Vector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_Vector3_descriptor_;
  metadata.reflection = t_Vector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_fish_seat::kMSeatidFieldNumber;
const int t_fish_seat::kMPlayeridFieldNumber;
const int t_fish_seat::kMPlayernameFieldNumber;
const int t_fish_seat::kMHeadidFieldNumber;
#endif  // !_MSC_VER

t_fish_seat::t_fish_seat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_fish_seat::InitAsDefaultInstance() {
}

t_fish_seat::t_fish_seat(const t_fish_seat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_fish_seat::SharedCtor() {
  _cached_size_ = 0;
  m_seatid_ = 0;
  m_playerid_ = 0;
  m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_fish_seat::~t_fish_seat() {
  SharedDtor();
}

void t_fish_seat::SharedDtor() {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playername_;
  }
  if (this != default_instance_) {
  }
}

void t_fish_seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_fish_seat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_fish_seat_descriptor_;
}

const t_fish_seat& t_fish_seat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

t_fish_seat* t_fish_seat::default_instance_ = NULL;

t_fish_seat* t_fish_seat::New() const {
  return new t_fish_seat;
}

void t_fish_seat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_seatid_ = 0;
    m_playerid_ = 0;
    if (has_m_playername()) {
      if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
        m_playername_->clear();
      }
    }
    m_headid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_fish_seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // required int32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_playername;
        break;
      }

      // required string m_playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_playername().data(), this->m_playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_headid;
        break;
      }

      // required int32 m_headid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headid_)));
          set_has_m_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_fish_seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_seatid(), output);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_playerid(), output);
  }

  // required string m_playername = 3;
  if (has_m_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playername().data(), this->m_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_playername(), output);
  }

  // required int32 m_headid = 4;
  if (has_m_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_fish_seat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_seatid(), target);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_playerid(), target);
  }

  // required string m_playername = 3;
  if (has_m_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playername().data(), this->m_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_playername(), target);
  }

  // required int32 m_headid = 4;
  if (has_m_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_fish_seat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_seatid = 1;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

    // required int32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required string m_playername = 3;
    if (has_m_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_playername());
    }

    // required int32 m_headid = 4;
    if (has_m_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_fish_seat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_fish_seat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_fish_seat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_fish_seat::MergeFrom(const t_fish_seat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_playername()) {
      set_m_playername(from.m_playername());
    }
    if (from.has_m_headid()) {
      set_m_headid(from.m_headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_fish_seat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_fish_seat::CopyFrom(const t_fish_seat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_fish_seat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void t_fish_seat::Swap(t_fish_seat* other) {
  if (other != this) {
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_playername_, other->m_playername_);
    std::swap(m_headid_, other->m_headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_fish_seat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_fish_seat_descriptor_;
  metadata.reflection = t_fish_seat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_fish_table::kMTableidFieldNumber;
const int t_fish_table::kMSeatsFieldNumber;
#endif  // !_MSC_VER

t_fish_table::t_fish_table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_fish_table::InitAsDefaultInstance() {
}

t_fish_table::t_fish_table(const t_fish_table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_fish_table::SharedCtor() {
  _cached_size_ = 0;
  m_tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_fish_table::~t_fish_table() {
  SharedDtor();
}

void t_fish_table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t_fish_table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_fish_table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_fish_table_descriptor_;
}

const t_fish_table& t_fish_table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

t_fish_table* t_fish_table::default_instance_ = NULL;

t_fish_table* t_fish_table::New() const {
  return new t_fish_table;
}

void t_fish_table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_tableid_ = 0;
  }
  m_seats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_fish_table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tableid_)));
          set_has_m_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_seats;
        break;
      }

      // repeated .rpc.t_fish_seat m_seats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_seats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_seats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_seats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_fish_table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_tableid = 1;
  if (has_m_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_tableid(), output);
  }

  // repeated .rpc.t_fish_seat m_seats = 2;
  for (int i = 0; i < this->m_seats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_seats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_fish_table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_tableid = 1;
  if (has_m_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_tableid(), target);
  }

  // repeated .rpc.t_fish_seat m_seats = 2;
  for (int i = 0; i < this->m_seats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_seats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_fish_table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_tableid = 1;
    if (has_m_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tableid());
    }

  }
  // repeated .rpc.t_fish_seat m_seats = 2;
  total_size += 1 * this->m_seats_size();
  for (int i = 0; i < this->m_seats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_seats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_fish_table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_fish_table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_fish_table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_fish_table::MergeFrom(const t_fish_table& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_seats_.MergeFrom(from.m_seats_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tableid()) {
      set_m_tableid(from.m_tableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_fish_table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_fish_table::CopyFrom(const t_fish_table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_fish_table::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_seats_size(); i++) {
    if (!this->m_seats(i).IsInitialized()) return false;
  }
  return true;
}

void t_fish_table::Swap(t_fish_table* other) {
  if (other != this) {
    std::swap(m_tableid_, other->m_tableid_);
    m_seats_.Swap(&other->m_seats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_fish_table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_fish_table_descriptor_;
  metadata.reflection = t_fish_table_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_FishPlayer::kMSeatidFieldNumber;
const int t_FishPlayer::kMPlayeridFieldNumber;
const int t_FishPlayer::kMPlayernameFieldNumber;
const int t_FishPlayer::kMHeadidFieldNumber;
#endif  // !_MSC_VER

t_FishPlayer::t_FishPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_FishPlayer::InitAsDefaultInstance() {
}

t_FishPlayer::t_FishPlayer(const t_FishPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_FishPlayer::SharedCtor() {
  _cached_size_ = 0;
  m_seatid_ = 0;
  m_playerid_ = 0;
  m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_FishPlayer::~t_FishPlayer() {
  SharedDtor();
}

void t_FishPlayer::SharedDtor() {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playername_;
  }
  if (this != default_instance_) {
  }
}

void t_FishPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_FishPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_FishPlayer_descriptor_;
}

const t_FishPlayer& t_FishPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

t_FishPlayer* t_FishPlayer::default_instance_ = NULL;

t_FishPlayer* t_FishPlayer::New() const {
  return new t_FishPlayer;
}

void t_FishPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_seatid_ = 0;
    m_playerid_ = 0;
    if (has_m_playername()) {
      if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
        m_playername_->clear();
      }
    }
    m_headid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_FishPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // required int32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_playername;
        break;
      }

      // required string m_playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_playername().data(), this->m_playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_headid;
        break;
      }

      // required int32 m_headid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headid_)));
          set_has_m_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_FishPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_seatid(), output);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_playerid(), output);
  }

  // required string m_playername = 3;
  if (has_m_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playername().data(), this->m_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_playername(), output);
  }

  // required int32 m_headid = 4;
  if (has_m_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_FishPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_seatid(), target);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_playerid(), target);
  }

  // required string m_playername = 3;
  if (has_m_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playername().data(), this->m_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_playername(), target);
  }

  // required int32 m_headid = 4;
  if (has_m_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_FishPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_seatid = 1;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

    // required int32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required string m_playername = 3;
    if (has_m_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_playername());
    }

    // required int32 m_headid = 4;
    if (has_m_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_FishPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_FishPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_FishPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_FishPlayer::MergeFrom(const t_FishPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_playername()) {
      set_m_playername(from.m_playername());
    }
    if (from.has_m_headid()) {
      set_m_headid(from.m_headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_FishPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_FishPlayer::CopyFrom(const t_FishPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_FishPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void t_FishPlayer::Swap(t_FishPlayer* other) {
  if (other != this) {
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_playername_, other->m_playername_);
    std::swap(m_headid_, other->m_headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_FishPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_FishPlayer_descriptor_;
  metadata.reflection = t_FishPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishGameData::kMPlayernumFieldNumber;
const int SC_FishGameData::kMTablesFieldNumber;
#endif  // !_MSC_VER

SC_FishGameData::SC_FishGameData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishGameData::InitAsDefaultInstance() {
}

SC_FishGameData::SC_FishGameData(const SC_FishGameData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishGameData::SharedCtor() {
  _cached_size_ = 0;
  m_playernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishGameData::~SC_FishGameData() {
  SharedDtor();
}

void SC_FishGameData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishGameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishGameData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishGameData_descriptor_;
}

const SC_FishGameData& SC_FishGameData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishGameData* SC_FishGameData::default_instance_ = NULL;

SC_FishGameData* SC_FishGameData::New() const {
  return new SC_FishGameData;
}

void SC_FishGameData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playernum_ = 0;
  }
  m_tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playernum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playernum_)));
          set_has_m_playernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_tables;
        break;
      }

      // repeated .rpc.t_fish_table m_tables = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_tables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playernum = 1;
  if (has_m_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playernum(), output);
  }

  // repeated .rpc.t_fish_table m_tables = 2;
  for (int i = 0; i < this->m_tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_tables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishGameData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playernum = 1;
  if (has_m_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playernum(), target);
  }

  // repeated .rpc.t_fish_table m_tables = 2;
  for (int i = 0; i < this->m_tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_tables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishGameData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playernum = 1;
    if (has_m_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playernum());
    }

  }
  // repeated .rpc.t_fish_table m_tables = 2;
  total_size += 1 * this->m_tables_size();
  for (int i = 0; i < this->m_tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishGameData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishGameData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishGameData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishGameData::MergeFrom(const SC_FishGameData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tables_.MergeFrom(from.m_tables_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playernum()) {
      set_m_playernum(from.m_playernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishGameData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishGameData::CopyFrom(const SC_FishGameData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishGameData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < m_tables_size(); i++) {
    if (!this->m_tables(i).IsInitialized()) return false;
  }
  return true;
}

void SC_FishGameData::Swap(SC_FishGameData* other) {
  if (other != this) {
    std::swap(m_playernum_, other->m_playernum_);
    m_tables_.Swap(&other->m_tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishGameData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishGameData_descriptor_;
  metadata.reflection = SC_FishGameData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishTables::kMTablesFieldNumber;
#endif  // !_MSC_VER

SC_FishTables::SC_FishTables()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishTables::InitAsDefaultInstance() {
}

SC_FishTables::SC_FishTables(const SC_FishTables& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishTables::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishTables::~SC_FishTables() {
  SharedDtor();
}

void SC_FishTables::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishTables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishTables::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishTables_descriptor_;
}

const SC_FishTables& SC_FishTables::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishTables* SC_FishTables::default_instance_ = NULL;

SC_FishTables* SC_FishTables::New() const {
  return new SC_FishTables;
}

void SC_FishTables::Clear() {
  m_tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.t_fish_table m_tables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_tables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.t_fish_table m_tables = 1;
  for (int i = 0; i < this->m_tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_tables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishTables::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.t_fish_table m_tables = 1;
  for (int i = 0; i < this->m_tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_tables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishTables::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.t_fish_table m_tables = 1;
  total_size += 1 * this->m_tables_size();
  for (int i = 0; i < this->m_tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_tables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishTables::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishTables* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishTables*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishTables::MergeFrom(const SC_FishTables& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_tables_.MergeFrom(from.m_tables_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishTables::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishTables::CopyFrom(const SC_FishTables& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishTables::IsInitialized() const {

  for (int i = 0; i < m_tables_size(); i++) {
    if (!this->m_tables(i).IsInitialized()) return false;
  }
  return true;
}

void SC_FishTables::Swap(SC_FishTables* other) {
  if (other != this) {
    m_tables_.Swap(&other->m_tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishTables::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishTables_descriptor_;
  metadata.reflection = SC_FishTables_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_FishEnterTable::kMTableidFieldNumber;
const int CS_FishEnterTable::kMSeatidFieldNumber;
#endif  // !_MSC_VER

CS_FishEnterTable::CS_FishEnterTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_FishEnterTable::InitAsDefaultInstance() {
}

CS_FishEnterTable::CS_FishEnterTable(const CS_FishEnterTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_FishEnterTable::SharedCtor() {
  _cached_size_ = 0;
  m_tableid_ = 0;
  m_seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_FishEnterTable::~CS_FishEnterTable() {
  SharedDtor();
}

void CS_FishEnterTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_FishEnterTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_FishEnterTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_FishEnterTable_descriptor_;
}

const CS_FishEnterTable& CS_FishEnterTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

CS_FishEnterTable* CS_FishEnterTable::default_instance_ = NULL;

CS_FishEnterTable* CS_FishEnterTable::New() const {
  return new CS_FishEnterTable;
}

void CS_FishEnterTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_tableid_ = 0;
    m_seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_FishEnterTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_tableid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tableid_)));
          set_has_m_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_seatid;
        break;
      }

      // required int32 m_seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_FishEnterTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_tableid = 1;
  if (has_m_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_tableid(), output);
  }

  // required int32 m_seatid = 2;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_FishEnterTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_tableid = 1;
  if (has_m_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_tableid(), target);
  }

  // required int32 m_seatid = 2;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_FishEnterTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_tableid = 1;
    if (has_m_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tableid());
    }

    // required int32 m_seatid = 2;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_FishEnterTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_FishEnterTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_FishEnterTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_FishEnterTable::MergeFrom(const CS_FishEnterTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_tableid()) {
      set_m_tableid(from.m_tableid());
    }
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_FishEnterTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_FishEnterTable::CopyFrom(const CS_FishEnterTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FishEnterTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS_FishEnterTable::Swap(CS_FishEnterTable* other) {
  if (other != this) {
    std::swap(m_tableid_, other->m_tableid_);
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_FishEnterTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_FishEnterTable_descriptor_;
  metadata.reflection = CS_FishEnterTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishEnterTableRst::kMRstFieldNumber;
const int SC_FishEnterTableRst::kMTableIdFieldNumber;
const int SC_FishEnterTableRst::kMSeatIdFieldNumber;
const int SC_FishEnterTableRst::kMPlayersFieldNumber;
const int SC_FishEnterTableRst::kMBombFieldNumber;
#endif  // !_MSC_VER

SC_FishEnterTableRst::SC_FishEnterTableRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishEnterTableRst::InitAsDefaultInstance() {
}

SC_FishEnterTableRst::SC_FishEnterTableRst(const SC_FishEnterTableRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishEnterTableRst::SharedCtor() {
  _cached_size_ = 0;
  m_rst_ = 0;
  m_tableid_ = 0;
  m_seatid_ = 0;
  m_bomb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishEnterTableRst::~SC_FishEnterTableRst() {
  SharedDtor();
}

void SC_FishEnterTableRst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishEnterTableRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishEnterTableRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishEnterTableRst_descriptor_;
}

const SC_FishEnterTableRst& SC_FishEnterTableRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishEnterTableRst* SC_FishEnterTableRst::default_instance_ = NULL;

SC_FishEnterTableRst* SC_FishEnterTableRst::New() const {
  return new SC_FishEnterTableRst;
}

void SC_FishEnterTableRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rst_ = 0;
    m_tableid_ = 0;
    m_seatid_ = 0;
    m_bomb_ = 0;
  }
  m_players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishEnterTableRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rst_)));
          set_has_m_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_tableId;
        break;
      }

      // required int32 m_tableId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tableid_)));
          set_has_m_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_seatId;
        break;
      }

      // required int32 m_seatId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_seatId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_players;
        break;
      }

      // repeated .rpc.t_FishPlayer m_players = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_players;
        if (input->ExpectTag(40)) goto parse_m_bomb;
        break;
      }

      // optional int32 m_bomb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bomb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bomb_)));
          set_has_m_bomb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishEnterTableRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rst(), output);
  }

  // required int32 m_tableId = 2;
  if (has_m_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_tableid(), output);
  }

  // required int32 m_seatId = 3;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_seatid(), output);
  }

  // repeated .rpc.t_FishPlayer m_players = 4;
  for (int i = 0; i < this->m_players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_players(i), output);
  }

  // optional int32 m_bomb = 5;
  if (has_m_bomb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_bomb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishEnterTableRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rst(), target);
  }

  // required int32 m_tableId = 2;
  if (has_m_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_tableid(), target);
  }

  // required int32 m_seatId = 3;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_seatid(), target);
  }

  // repeated .rpc.t_FishPlayer m_players = 4;
  for (int i = 0; i < this->m_players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_players(i), target);
  }

  // optional int32 m_bomb = 5;
  if (has_m_bomb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_bomb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishEnterTableRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_rst = 1;
    if (has_m_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rst());
    }

    // required int32 m_tableId = 2;
    if (has_m_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tableid());
    }

    // required int32 m_seatId = 3;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

    // optional int32 m_bomb = 5;
    if (has_m_bomb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bomb());
    }

  }
  // repeated .rpc.t_FishPlayer m_players = 4;
  total_size += 1 * this->m_players_size();
  for (int i = 0; i < this->m_players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishEnterTableRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishEnterTableRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishEnterTableRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishEnterTableRst::MergeFrom(const SC_FishEnterTableRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_players_.MergeFrom(from.m_players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rst()) {
      set_m_rst(from.m_rst());
    }
    if (from.has_m_tableid()) {
      set_m_tableid(from.m_tableid());
    }
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
    if (from.has_m_bomb()) {
      set_m_bomb(from.m_bomb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishEnterTableRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishEnterTableRst::CopyFrom(const SC_FishEnterTableRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishEnterTableRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < m_players_size(); i++) {
    if (!this->m_players(i).IsInitialized()) return false;
  }
  return true;
}

void SC_FishEnterTableRst::Swap(SC_FishEnterTableRst* other) {
  if (other != this) {
    std::swap(m_rst_, other->m_rst_);
    std::swap(m_tableid_, other->m_tableid_);
    std::swap(m_seatid_, other->m_seatid_);
    m_players_.Swap(&other->m_players_);
    std::swap(m_bomb_, other->m_bomb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishEnterTableRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishEnterTableRst_descriptor_;
  metadata.reflection = SC_FishEnterTableRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishPlayerLeave::kMSeatidFieldNumber;
#endif  // !_MSC_VER

SC_FishPlayerLeave::SC_FishPlayerLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishPlayerLeave::InitAsDefaultInstance() {
}

SC_FishPlayerLeave::SC_FishPlayerLeave(const SC_FishPlayerLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishPlayerLeave::SharedCtor() {
  _cached_size_ = 0;
  m_seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishPlayerLeave::~SC_FishPlayerLeave() {
  SharedDtor();
}

void SC_FishPlayerLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishPlayerLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishPlayerLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishPlayerLeave_descriptor_;
}

const SC_FishPlayerLeave& SC_FishPlayerLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishPlayerLeave* SC_FishPlayerLeave::default_instance_ = NULL;

SC_FishPlayerLeave* SC_FishPlayerLeave::New() const {
  return new SC_FishPlayerLeave;
}

void SC_FishPlayerLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishPlayerLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishPlayerLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishPlayerLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishPlayerLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_seatid = 1;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishPlayerLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishPlayerLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishPlayerLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishPlayerLeave::MergeFrom(const SC_FishPlayerLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishPlayerLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishPlayerLeave::CopyFrom(const SC_FishPlayerLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishPlayerLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_FishPlayerLeave::Swap(SC_FishPlayerLeave* other) {
  if (other != this) {
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishPlayerLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishPlayerLeave_descriptor_;
  metadata.reflection = SC_FishPlayerLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyAddPlayerMySelf::kMSeatidFieldNumber;
const int SC_FishNotifyAddPlayerMySelf::kMPlayeridFieldNumber;
const int SC_FishNotifyAddPlayerMySelf::kMPlayernameFieldNumber;
const int SC_FishNotifyAddPlayerMySelf::kMBulletNumFieldNumber;
const int SC_FishNotifyAddPlayerMySelf::kMBombFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyAddPlayerMySelf::SC_FishNotifyAddPlayerMySelf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyAddPlayerMySelf::InitAsDefaultInstance() {
}

SC_FishNotifyAddPlayerMySelf::SC_FishNotifyAddPlayerMySelf(const SC_FishNotifyAddPlayerMySelf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyAddPlayerMySelf::SharedCtor() {
  _cached_size_ = 0;
  m_seatid_ = 0;
  m_playerid_ = 0;
  m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_bulletnum_ = 0;
  m_bomb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyAddPlayerMySelf::~SC_FishNotifyAddPlayerMySelf() {
  SharedDtor();
}

void SC_FishNotifyAddPlayerMySelf::SharedDtor() {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playername_;
  }
  if (this != default_instance_) {
  }
}

void SC_FishNotifyAddPlayerMySelf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyAddPlayerMySelf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyAddPlayerMySelf_descriptor_;
}

const SC_FishNotifyAddPlayerMySelf& SC_FishNotifyAddPlayerMySelf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyAddPlayerMySelf* SC_FishNotifyAddPlayerMySelf::default_instance_ = NULL;

SC_FishNotifyAddPlayerMySelf* SC_FishNotifyAddPlayerMySelf::New() const {
  return new SC_FishNotifyAddPlayerMySelf;
}

void SC_FishNotifyAddPlayerMySelf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_seatid_ = 0;
    m_playerid_ = 0;
    if (has_m_playername()) {
      if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
        m_playername_->clear();
      }
    }
    m_bulletnum_ = 0;
    m_bomb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyAddPlayerMySelf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // required int32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_playername;
        break;
      }

      // required string m_playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_playername().data(), this->m_playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bulletNum;
        break;
      }

      // required int32 m_bulletNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bulletNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bulletnum_)));
          set_has_m_bulletnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bomb;
        break;
      }

      // required int32 m_bomb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bomb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bomb_)));
          set_has_m_bomb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyAddPlayerMySelf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_seatid(), output);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_playerid(), output);
  }

  // required string m_playername = 3;
  if (has_m_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playername().data(), this->m_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_playername(), output);
  }

  // required int32 m_bulletNum = 4;
  if (has_m_bulletnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bulletnum(), output);
  }

  // required int32 m_bomb = 5;
  if (has_m_bomb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_bomb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyAddPlayerMySelf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_seatid(), target);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_playerid(), target);
  }

  // required string m_playername = 3;
  if (has_m_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playername().data(), this->m_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_playername(), target);
  }

  // required int32 m_bulletNum = 4;
  if (has_m_bulletnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_bulletnum(), target);
  }

  // required int32 m_bomb = 5;
  if (has_m_bomb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_bomb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyAddPlayerMySelf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_seatid = 1;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

    // required int32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required string m_playername = 3;
    if (has_m_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_playername());
    }

    // required int32 m_bulletNum = 4;
    if (has_m_bulletnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bulletnum());
    }

    // required int32 m_bomb = 5;
    if (has_m_bomb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bomb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyAddPlayerMySelf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyAddPlayerMySelf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyAddPlayerMySelf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyAddPlayerMySelf::MergeFrom(const SC_FishNotifyAddPlayerMySelf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_playername()) {
      set_m_playername(from.m_playername());
    }
    if (from.has_m_bulletnum()) {
      set_m_bulletnum(from.m_bulletnum());
    }
    if (from.has_m_bomb()) {
      set_m_bomb(from.m_bomb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyAddPlayerMySelf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyAddPlayerMySelf::CopyFrom(const SC_FishNotifyAddPlayerMySelf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyAddPlayerMySelf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SC_FishNotifyAddPlayerMySelf::Swap(SC_FishNotifyAddPlayerMySelf* other) {
  if (other != this) {
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_playername_, other->m_playername_);
    std::swap(m_bulletnum_, other->m_bulletnum_);
    std::swap(m_bomb_, other->m_bomb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyAddPlayerMySelf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyAddPlayerMySelf_descriptor_;
  metadata.reflection = SC_FishNotifyAddPlayerMySelf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyAddPlayer::kMSeatidFieldNumber;
const int SC_FishNotifyAddPlayer::kMPlayeridFieldNumber;
const int SC_FishNotifyAddPlayer::kMPlayernameFieldNumber;
const int SC_FishNotifyAddPlayer::kMBombFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyAddPlayer::SC_FishNotifyAddPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyAddPlayer::InitAsDefaultInstance() {
}

SC_FishNotifyAddPlayer::SC_FishNotifyAddPlayer(const SC_FishNotifyAddPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyAddPlayer::SharedCtor() {
  _cached_size_ = 0;
  m_seatid_ = 0;
  m_playerid_ = 0;
  m_playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_bomb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyAddPlayer::~SC_FishNotifyAddPlayer() {
  SharedDtor();
}

void SC_FishNotifyAddPlayer::SharedDtor() {
  if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
    delete m_playername_;
  }
  if (this != default_instance_) {
  }
}

void SC_FishNotifyAddPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyAddPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyAddPlayer_descriptor_;
}

const SC_FishNotifyAddPlayer& SC_FishNotifyAddPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyAddPlayer* SC_FishNotifyAddPlayer::default_instance_ = NULL;

SC_FishNotifyAddPlayer* SC_FishNotifyAddPlayer::New() const {
  return new SC_FishNotifyAddPlayer;
}

void SC_FishNotifyAddPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_seatid_ = 0;
    m_playerid_ = 0;
    if (has_m_playername()) {
      if (m_playername_ != &::google::protobuf::internal::kEmptyString) {
        m_playername_->clear();
      }
    }
    m_bomb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyAddPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // required int32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_playername;
        break;
      }

      // required string m_playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_playername().data(), this->m_playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bomb;
        break;
      }

      // required int32 m_bomb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bomb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bomb_)));
          set_has_m_bomb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyAddPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_seatid(), output);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_playerid(), output);
  }

  // required string m_playername = 3;
  if (has_m_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playername().data(), this->m_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_playername(), output);
  }

  // required int32 m_bomb = 4;
  if (has_m_bomb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bomb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyAddPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_seatid(), target);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_playerid(), target);
  }

  // required string m_playername = 3;
  if (has_m_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playername().data(), this->m_playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_playername(), target);
  }

  // required int32 m_bomb = 4;
  if (has_m_bomb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_bomb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyAddPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_seatid = 1;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

    // required int32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required string m_playername = 3;
    if (has_m_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_playername());
    }

    // required int32 m_bomb = 4;
    if (has_m_bomb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bomb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyAddPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyAddPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyAddPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyAddPlayer::MergeFrom(const SC_FishNotifyAddPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_playername()) {
      set_m_playername(from.m_playername());
    }
    if (from.has_m_bomb()) {
      set_m_bomb(from.m_bomb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyAddPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyAddPlayer::CopyFrom(const SC_FishNotifyAddPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyAddPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SC_FishNotifyAddPlayer::Swap(SC_FishNotifyAddPlayer* other) {
  if (other != this) {
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_playername_, other->m_playername_);
    std::swap(m_bomb_, other->m_bomb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyAddPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyAddPlayer_descriptor_;
  metadata.reflection = SC_FishNotifyAddPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyFireBullet::kMObjidFieldNumber;
const int SC_FishNotifyFireBullet::kMTypeFieldNumber;
const int SC_FishNotifyFireBullet::kMSeatidFieldNumber;
const int SC_FishNotifyFireBullet::kMDirFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyFireBullet::SC_FishNotifyFireBullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyFireBullet::InitAsDefaultInstance() {
  m_dir_ = const_cast< ::rpc::t_Vector2*>(&::rpc::t_Vector2::default_instance());
}

SC_FishNotifyFireBullet::SC_FishNotifyFireBullet(const SC_FishNotifyFireBullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyFireBullet::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_type_ = 0;
  m_seatid_ = 0;
  m_dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyFireBullet::~SC_FishNotifyFireBullet() {
  SharedDtor();
}

void SC_FishNotifyFireBullet::SharedDtor() {
  if (this != default_instance_) {
    delete m_dir_;
  }
}

void SC_FishNotifyFireBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyFireBullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyFireBullet_descriptor_;
}

const SC_FishNotifyFireBullet& SC_FishNotifyFireBullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyFireBullet* SC_FishNotifyFireBullet::default_instance_ = NULL;

SC_FishNotifyFireBullet* SC_FishNotifyFireBullet::New() const {
  return new SC_FishNotifyFireBullet;
}

void SC_FishNotifyFireBullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_type_ = 0;
    m_seatid_ = 0;
    if (has_m_dir()) {
      if (m_dir_ != NULL) m_dir_->::rpc::t_Vector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyFireBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // required int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_seatid;
        break;
      }

      // required int32 m_seatid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_dir;
        break;
      }

      // required .rpc.t_Vector2 m_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyFireBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // required int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // required int32 m_seatid = 3;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_seatid(), output);
  }

  // required .rpc.t_Vector2 m_dir = 4;
  if (has_m_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyFireBullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // required int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // required int32 m_seatid = 3;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_seatid(), target);
  }

  // required .rpc.t_Vector2 m_dir = 4;
  if (has_m_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyFireBullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // required int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // required int32 m_seatid = 3;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

    // required .rpc.t_Vector2 m_dir = 4;
    if (has_m_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyFireBullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyFireBullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyFireBullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyFireBullet::MergeFrom(const SC_FishNotifyFireBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
    if (from.has_m_dir()) {
      mutable_m_dir()->::rpc::t_Vector2::MergeFrom(from.m_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyFireBullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyFireBullet::CopyFrom(const SC_FishNotifyFireBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyFireBullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_m_dir()) {
    if (!this->m_dir().IsInitialized()) return false;
  }
  return true;
}

void SC_FishNotifyFireBullet::Swap(SC_FishNotifyFireBullet* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(m_dir_, other->m_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyFireBullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyFireBullet_descriptor_;
  metadata.reflection = SC_FishNotifyFireBullet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyFireFish::kMObjidFieldNumber;
const int SC_FishNotifyFireFish::kMFishtypeFieldNumber;
const int SC_FishNotifyFireFish::kMPathtypeFieldNumber;
const int SC_FishNotifyFireFish::kMPathidFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyFireFish::SC_FishNotifyFireFish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyFireFish::InitAsDefaultInstance() {
}

SC_FishNotifyFireFish::SC_FishNotifyFireFish(const SC_FishNotifyFireFish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyFireFish::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_fishtype_ = 0;
  m_pathtype_ = 0;
  m_pathid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyFireFish::~SC_FishNotifyFireFish() {
  SharedDtor();
}

void SC_FishNotifyFireFish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishNotifyFireFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyFireFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyFireFish_descriptor_;
}

const SC_FishNotifyFireFish& SC_FishNotifyFireFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyFireFish* SC_FishNotifyFireFish::default_instance_ = NULL;

SC_FishNotifyFireFish* SC_FishNotifyFireFish::New() const {
  return new SC_FishNotifyFireFish;
}

void SC_FishNotifyFireFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_fishtype_ = 0;
    m_pathtype_ = 0;
    m_pathid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyFireFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fishtype;
        break;
      }

      // required int32 m_fishtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fishtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fishtype_)));
          set_has_m_fishtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_pathtype;
        break;
      }

      // required int32 m_pathtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pathtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pathtype_)));
          set_has_m_pathtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_pathid;
        break;
      }

      // required int32 m_pathid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pathid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pathid_)));
          set_has_m_pathid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyFireFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // required int32 m_fishtype = 2;
  if (has_m_fishtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fishtype(), output);
  }

  // required int32 m_pathtype = 3;
  if (has_m_pathtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_pathtype(), output);
  }

  // required int32 m_pathid = 4;
  if (has_m_pathid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_pathid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyFireFish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // required int32 m_fishtype = 2;
  if (has_m_fishtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fishtype(), target);
  }

  // required int32 m_pathtype = 3;
  if (has_m_pathtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_pathtype(), target);
  }

  // required int32 m_pathid = 4;
  if (has_m_pathid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_pathid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyFireFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // required int32 m_fishtype = 2;
    if (has_m_fishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fishtype());
    }

    // required int32 m_pathtype = 3;
    if (has_m_pathtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pathtype());
    }

    // required int32 m_pathid = 4;
    if (has_m_pathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pathid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyFireFish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyFireFish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyFireFish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyFireFish::MergeFrom(const SC_FishNotifyFireFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_fishtype()) {
      set_m_fishtype(from.m_fishtype());
    }
    if (from.has_m_pathtype()) {
      set_m_pathtype(from.m_pathtype());
    }
    if (from.has_m_pathid()) {
      set_m_pathid(from.m_pathid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyFireFish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyFireFish::CopyFrom(const SC_FishNotifyFireFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyFireFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SC_FishNotifyFireFish::Swap(SC_FishNotifyFireFish* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_fishtype_, other->m_fishtype_);
    std::swap(m_pathtype_, other->m_pathtype_);
    std::swap(m_pathid_, other->m_pathid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyFireFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyFireFish_descriptor_;
  metadata.reflection = SC_FishNotifyFireFish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyAddBullet::kMObjidFieldNumber;
const int SC_FishNotifyAddBullet::kMTypeFieldNumber;
const int SC_FishNotifyAddBullet::kMSeatidFieldNumber;
const int SC_FishNotifyAddBullet::kMDirFieldNumber;
const int SC_FishNotifyAddBullet::kMPosFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyAddBullet::SC_FishNotifyAddBullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyAddBullet::InitAsDefaultInstance() {
  m_dir_ = const_cast< ::rpc::t_Vector2*>(&::rpc::t_Vector2::default_instance());
  m_pos_ = const_cast< ::rpc::t_Vector2*>(&::rpc::t_Vector2::default_instance());
}

SC_FishNotifyAddBullet::SC_FishNotifyAddBullet(const SC_FishNotifyAddBullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyAddBullet::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_type_ = 0;
  m_seatid_ = 0;
  m_dir_ = NULL;
  m_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyAddBullet::~SC_FishNotifyAddBullet() {
  SharedDtor();
}

void SC_FishNotifyAddBullet::SharedDtor() {
  if (this != default_instance_) {
    delete m_dir_;
    delete m_pos_;
  }
}

void SC_FishNotifyAddBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyAddBullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyAddBullet_descriptor_;
}

const SC_FishNotifyAddBullet& SC_FishNotifyAddBullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyAddBullet* SC_FishNotifyAddBullet::default_instance_ = NULL;

SC_FishNotifyAddBullet* SC_FishNotifyAddBullet::New() const {
  return new SC_FishNotifyAddBullet;
}

void SC_FishNotifyAddBullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_type_ = 0;
    m_seatid_ = 0;
    if (has_m_dir()) {
      if (m_dir_ != NULL) m_dir_->::rpc::t_Vector2::Clear();
    }
    if (has_m_pos()) {
      if (m_pos_ != NULL) m_pos_->::rpc::t_Vector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyAddBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // required int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_seatid;
        break;
      }

      // required int32 m_seatid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_dir;
        break;
      }

      // required .rpc.t_Vector2 m_dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_pos;
        break;
      }

      // required .rpc.t_Vector2 m_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyAddBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // required int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // required int32 m_seatid = 3;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_seatid(), output);
  }

  // required .rpc.t_Vector2 m_dir = 4;
  if (has_m_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_dir(), output);
  }

  // required .rpc.t_Vector2 m_pos = 5;
  if (has_m_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyAddBullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // required int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // required int32 m_seatid = 3;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_seatid(), target);
  }

  // required .rpc.t_Vector2 m_dir = 4;
  if (has_m_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_dir(), target);
  }

  // required .rpc.t_Vector2 m_pos = 5;
  if (has_m_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyAddBullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // required int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // required int32 m_seatid = 3;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

    // required .rpc.t_Vector2 m_dir = 4;
    if (has_m_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_dir());
    }

    // required .rpc.t_Vector2 m_pos = 5;
    if (has_m_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyAddBullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyAddBullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyAddBullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyAddBullet::MergeFrom(const SC_FishNotifyAddBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
    if (from.has_m_dir()) {
      mutable_m_dir()->::rpc::t_Vector2::MergeFrom(from.m_dir());
    }
    if (from.has_m_pos()) {
      mutable_m_pos()->::rpc::t_Vector2::MergeFrom(from.m_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyAddBullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyAddBullet::CopyFrom(const SC_FishNotifyAddBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyAddBullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_m_dir()) {
    if (!this->m_dir().IsInitialized()) return false;
  }
  if (has_m_pos()) {
    if (!this->m_pos().IsInitialized()) return false;
  }
  return true;
}

void SC_FishNotifyAddBullet::Swap(SC_FishNotifyAddBullet* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(m_dir_, other->m_dir_);
    std::swap(m_pos_, other->m_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyAddBullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyAddBullet_descriptor_;
  metadata.reflection = SC_FishNotifyAddBullet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyAddBomb::kMObjidFieldNumber;
const int SC_FishNotifyAddBomb::kMPlayeridFieldNumber;
const int SC_FishNotifyAddBomb::kMSeatidFieldNumber;
const int SC_FishNotifyAddBomb::kMPathFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyAddBomb::SC_FishNotifyAddBomb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyAddBomb::InitAsDefaultInstance() {
}

SC_FishNotifyAddBomb::SC_FishNotifyAddBomb(const SC_FishNotifyAddBomb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyAddBomb::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_playerid_ = 0;
  m_seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyAddBomb::~SC_FishNotifyAddBomb() {
  SharedDtor();
}

void SC_FishNotifyAddBomb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishNotifyAddBomb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyAddBomb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyAddBomb_descriptor_;
}

const SC_FishNotifyAddBomb& SC_FishNotifyAddBomb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyAddBomb* SC_FishNotifyAddBomb::default_instance_ = NULL;

SC_FishNotifyAddBomb* SC_FishNotifyAddBomb::New() const {
  return new SC_FishNotifyAddBomb;
}

void SC_FishNotifyAddBomb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_playerid_ = 0;
    m_seatid_ = 0;
  }
  m_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyAddBomb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // required int32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_seatid;
        break;
      }

      // required int32 m_seatid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_path;
        break;
      }

      // repeated .rpc.t_Vector2 m_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyAddBomb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_playerid(), output);
  }

  // required int32 m_seatid = 3;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_seatid(), output);
  }

  // repeated .rpc.t_Vector2 m_path = 4;
  for (int i = 0; i < this->m_path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyAddBomb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_playerid(), target);
  }

  // required int32 m_seatid = 3;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_seatid(), target);
  }

  // repeated .rpc.t_Vector2 m_path = 4;
  for (int i = 0; i < this->m_path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyAddBomb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // required int32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required int32 m_seatid = 3;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

  }
  // repeated .rpc.t_Vector2 m_path = 4;
  total_size += 1 * this->m_path_size();
  for (int i = 0; i < this->m_path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyAddBomb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyAddBomb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyAddBomb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyAddBomb::MergeFrom(const SC_FishNotifyAddBomb& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_path_.MergeFrom(from.m_path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyAddBomb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyAddBomb::CopyFrom(const SC_FishNotifyAddBomb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyAddBomb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < m_path_size(); i++) {
    if (!this->m_path(i).IsInitialized()) return false;
  }
  return true;
}

void SC_FishNotifyAddBomb::Swap(SC_FishNotifyAddBomb* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_seatid_, other->m_seatid_);
    m_path_.Swap(&other->m_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyAddBomb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyAddBomb_descriptor_;
  metadata.reflection = SC_FishNotifyAddBomb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyAddFish::kMObjidFieldNumber;
const int SC_FishNotifyAddFish::kMFishtypeFieldNumber;
const int SC_FishNotifyAddFish::kMPathtypeFieldNumber;
const int SC_FishNotifyAddFish::kMPathidFieldNumber;
const int SC_FishNotifyAddFish::kMRunperFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyAddFish::SC_FishNotifyAddFish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyAddFish::InitAsDefaultInstance() {
}

SC_FishNotifyAddFish::SC_FishNotifyAddFish(const SC_FishNotifyAddFish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyAddFish::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  m_fishtype_ = 0;
  m_pathtype_ = 0;
  m_pathid_ = 0;
  m_runper_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyAddFish::~SC_FishNotifyAddFish() {
  SharedDtor();
}

void SC_FishNotifyAddFish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishNotifyAddFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyAddFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyAddFish_descriptor_;
}

const SC_FishNotifyAddFish& SC_FishNotifyAddFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyAddFish* SC_FishNotifyAddFish::default_instance_ = NULL;

SC_FishNotifyAddFish* SC_FishNotifyAddFish::New() const {
  return new SC_FishNotifyAddFish;
}

void SC_FishNotifyAddFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
    m_fishtype_ = 0;
    m_pathtype_ = 0;
    m_pathid_ = 0;
    m_runper_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyAddFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fishtype;
        break;
      }

      // required int32 m_fishtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fishtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fishtype_)));
          set_has_m_fishtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_pathtype;
        break;
      }

      // required int32 m_pathtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pathtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pathtype_)));
          set_has_m_pathtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_pathid;
        break;
      }

      // required int32 m_pathid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pathid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pathid_)));
          set_has_m_pathid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_m_runper;
        break;
      }

      // required float m_runper = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_runper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_runper_)));
          set_has_m_runper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyAddFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  // required int32 m_fishtype = 2;
  if (has_m_fishtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fishtype(), output);
  }

  // required int32 m_pathtype = 3;
  if (has_m_pathtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_pathtype(), output);
  }

  // required int32 m_pathid = 4;
  if (has_m_pathid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_pathid(), output);
  }

  // required float m_runper = 5;
  if (has_m_runper()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->m_runper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyAddFish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  // required int32 m_fishtype = 2;
  if (has_m_fishtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fishtype(), target);
  }

  // required int32 m_pathtype = 3;
  if (has_m_pathtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_pathtype(), target);
  }

  // required int32 m_pathid = 4;
  if (has_m_pathid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_pathid(), target);
  }

  // required float m_runper = 5;
  if (has_m_runper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->m_runper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyAddFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

    // required int32 m_fishtype = 2;
    if (has_m_fishtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fishtype());
    }

    // required int32 m_pathtype = 3;
    if (has_m_pathtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pathtype());
    }

    // required int32 m_pathid = 4;
    if (has_m_pathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pathid());
    }

    // required float m_runper = 5;
    if (has_m_runper()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyAddFish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyAddFish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyAddFish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyAddFish::MergeFrom(const SC_FishNotifyAddFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
    if (from.has_m_fishtype()) {
      set_m_fishtype(from.m_fishtype());
    }
    if (from.has_m_pathtype()) {
      set_m_pathtype(from.m_pathtype());
    }
    if (from.has_m_pathid()) {
      set_m_pathid(from.m_pathid());
    }
    if (from.has_m_runper()) {
      set_m_runper(from.m_runper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyAddFish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyAddFish::CopyFrom(const SC_FishNotifyAddFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyAddFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SC_FishNotifyAddFish::Swap(SC_FishNotifyAddFish* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(m_fishtype_, other->m_fishtype_);
    std::swap(m_pathtype_, other->m_pathtype_);
    std::swap(m_pathid_, other->m_pathid_);
    std::swap(m_runper_, other->m_runper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyAddFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyAddFish_descriptor_;
  metadata.reflection = SC_FishNotifyAddFish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyRmvBullet::kMObjidFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyRmvBullet::SC_FishNotifyRmvBullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyRmvBullet::InitAsDefaultInstance() {
}

SC_FishNotifyRmvBullet::SC_FishNotifyRmvBullet(const SC_FishNotifyRmvBullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyRmvBullet::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyRmvBullet::~SC_FishNotifyRmvBullet() {
  SharedDtor();
}

void SC_FishNotifyRmvBullet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishNotifyRmvBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyRmvBullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyRmvBullet_descriptor_;
}

const SC_FishNotifyRmvBullet& SC_FishNotifyRmvBullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyRmvBullet* SC_FishNotifyRmvBullet::default_instance_ = NULL;

SC_FishNotifyRmvBullet* SC_FishNotifyRmvBullet::New() const {
  return new SC_FishNotifyRmvBullet;
}

void SC_FishNotifyRmvBullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyRmvBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyRmvBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyRmvBullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyRmvBullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyRmvBullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyRmvBullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyRmvBullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyRmvBullet::MergeFrom(const SC_FishNotifyRmvBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyRmvBullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyRmvBullet::CopyFrom(const SC_FishNotifyRmvBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyRmvBullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_FishNotifyRmvBullet::Swap(SC_FishNotifyRmvBullet* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyRmvBullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyRmvBullet_descriptor_;
  metadata.reflection = SC_FishNotifyRmvBullet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyRmvFish::kMObjidFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyRmvFish::SC_FishNotifyRmvFish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyRmvFish::InitAsDefaultInstance() {
}

SC_FishNotifyRmvFish::SC_FishNotifyRmvFish(const SC_FishNotifyRmvFish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyRmvFish::SharedCtor() {
  _cached_size_ = 0;
  m_objid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyRmvFish::~SC_FishNotifyRmvFish() {
  SharedDtor();
}

void SC_FishNotifyRmvFish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishNotifyRmvFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyRmvFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyRmvFish_descriptor_;
}

const SC_FishNotifyRmvFish& SC_FishNotifyRmvFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyRmvFish* SC_FishNotifyRmvFish::default_instance_ = NULL;

SC_FishNotifyRmvFish* SC_FishNotifyRmvFish::New() const {
  return new SC_FishNotifyRmvFish;
}

void SC_FishNotifyRmvFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_objid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyRmvFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_objid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_objid_)));
          set_has_m_objid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyRmvFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_objid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyRmvFish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_objid = 1;
  if (has_m_objid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_objid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyRmvFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_objid = 1;
    if (has_m_objid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_objid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyRmvFish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyRmvFish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyRmvFish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyRmvFish::MergeFrom(const SC_FishNotifyRmvFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_objid()) {
      set_m_objid(from.m_objid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyRmvFish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyRmvFish::CopyFrom(const SC_FishNotifyRmvFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyRmvFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_FishNotifyRmvFish::Swap(SC_FishNotifyRmvFish* other) {
  if (other != this) {
    std::swap(m_objid_, other->m_objid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyRmvFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyRmvFish_descriptor_;
  metadata.reflection = SC_FishNotifyRmvFish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyRmvPlayer::kMSeatidFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyRmvPlayer::SC_FishNotifyRmvPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyRmvPlayer::InitAsDefaultInstance() {
}

SC_FishNotifyRmvPlayer::SC_FishNotifyRmvPlayer(const SC_FishNotifyRmvPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyRmvPlayer::SharedCtor() {
  _cached_size_ = 0;
  m_seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyRmvPlayer::~SC_FishNotifyRmvPlayer() {
  SharedDtor();
}

void SC_FishNotifyRmvPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishNotifyRmvPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyRmvPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyRmvPlayer_descriptor_;
}

const SC_FishNotifyRmvPlayer& SC_FishNotifyRmvPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyRmvPlayer* SC_FishNotifyRmvPlayer::default_instance_ = NULL;

SC_FishNotifyRmvPlayer* SC_FishNotifyRmvPlayer::New() const {
  return new SC_FishNotifyRmvPlayer;
}

void SC_FishNotifyRmvPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyRmvPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_seatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyRmvPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyRmvPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_seatid = 1;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyRmvPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_seatid = 1;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyRmvPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyRmvPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyRmvPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyRmvPlayer::MergeFrom(const SC_FishNotifyRmvPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyRmvPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyRmvPlayer::CopyFrom(const SC_FishNotifyRmvPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyRmvPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_FishNotifyRmvPlayer::Swap(SC_FishNotifyRmvPlayer* other) {
  if (other != this) {
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyRmvPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyRmvPlayer_descriptor_;
  metadata.reflection = SC_FishNotifyRmvPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_FishReqSwitchCannon::kMIcannontypeFieldNumber;
#endif  // !_MSC_VER

CS_FishReqSwitchCannon::CS_FishReqSwitchCannon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_FishReqSwitchCannon::InitAsDefaultInstance() {
}

CS_FishReqSwitchCannon::CS_FishReqSwitchCannon(const CS_FishReqSwitchCannon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_FishReqSwitchCannon::SharedCtor() {
  _cached_size_ = 0;
  m_icannontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_FishReqSwitchCannon::~CS_FishReqSwitchCannon() {
  SharedDtor();
}

void CS_FishReqSwitchCannon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_FishReqSwitchCannon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_FishReqSwitchCannon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_FishReqSwitchCannon_descriptor_;
}

const CS_FishReqSwitchCannon& CS_FishReqSwitchCannon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

CS_FishReqSwitchCannon* CS_FishReqSwitchCannon::default_instance_ = NULL;

CS_FishReqSwitchCannon* CS_FishReqSwitchCannon::New() const {
  return new CS_FishReqSwitchCannon;
}

void CS_FishReqSwitchCannon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_icannontype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_FishReqSwitchCannon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_icannontype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_icannontype_)));
          set_has_m_icannontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_FishReqSwitchCannon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_icannontype = 1;
  if (has_m_icannontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_icannontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_FishReqSwitchCannon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_icannontype = 1;
  if (has_m_icannontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_icannontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_FishReqSwitchCannon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_icannontype = 1;
    if (has_m_icannontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_icannontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_FishReqSwitchCannon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_FishReqSwitchCannon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_FishReqSwitchCannon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_FishReqSwitchCannon::MergeFrom(const CS_FishReqSwitchCannon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_icannontype()) {
      set_m_icannontype(from.m_icannontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_FishReqSwitchCannon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_FishReqSwitchCannon::CopyFrom(const CS_FishReqSwitchCannon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FishReqSwitchCannon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_FishReqSwitchCannon::Swap(CS_FishReqSwitchCannon* other) {
  if (other != this) {
    std::swap(m_icannontype_, other->m_icannontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_FishReqSwitchCannon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_FishReqSwitchCannon_descriptor_;
  metadata.reflection = CS_FishReqSwitchCannon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifySwitchCannon::kMIplayeridFieldNumber;
const int SC_FishNotifySwitchCannon::kMIseatidFieldNumber;
const int SC_FishNotifySwitchCannon::kMIcannontypeFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifySwitchCannon::SC_FishNotifySwitchCannon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifySwitchCannon::InitAsDefaultInstance() {
}

SC_FishNotifySwitchCannon::SC_FishNotifySwitchCannon(const SC_FishNotifySwitchCannon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifySwitchCannon::SharedCtor() {
  _cached_size_ = 0;
  m_iplayerid_ = 0;
  m_iseatid_ = 0;
  m_icannontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifySwitchCannon::~SC_FishNotifySwitchCannon() {
  SharedDtor();
}

void SC_FishNotifySwitchCannon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishNotifySwitchCannon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifySwitchCannon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifySwitchCannon_descriptor_;
}

const SC_FishNotifySwitchCannon& SC_FishNotifySwitchCannon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifySwitchCannon* SC_FishNotifySwitchCannon::default_instance_ = NULL;

SC_FishNotifySwitchCannon* SC_FishNotifySwitchCannon::New() const {
  return new SC_FishNotifySwitchCannon;
}

void SC_FishNotifySwitchCannon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_iplayerid_ = 0;
    m_iseatid_ = 0;
    m_icannontype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifySwitchCannon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_iplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iplayerid_)));
          set_has_m_iplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_iseatid;
        break;
      }

      // required int32 m_iseatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_iseatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iseatid_)));
          set_has_m_iseatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_icannontype;
        break;
      }

      // required int32 m_icannontype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_icannontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_icannontype_)));
          set_has_m_icannontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifySwitchCannon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_iplayerid = 1;
  if (has_m_iplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_iplayerid(), output);
  }

  // required int32 m_iseatid = 2;
  if (has_m_iseatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_iseatid(), output);
  }

  // required int32 m_icannontype = 3;
  if (has_m_icannontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_icannontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifySwitchCannon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_iplayerid = 1;
  if (has_m_iplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_iplayerid(), target);
  }

  // required int32 m_iseatid = 2;
  if (has_m_iseatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_iseatid(), target);
  }

  // required int32 m_icannontype = 3;
  if (has_m_icannontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_icannontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifySwitchCannon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_iplayerid = 1;
    if (has_m_iplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iplayerid());
    }

    // required int32 m_iseatid = 2;
    if (has_m_iseatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iseatid());
    }

    // required int32 m_icannontype = 3;
    if (has_m_icannontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_icannontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifySwitchCannon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifySwitchCannon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifySwitchCannon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifySwitchCannon::MergeFrom(const SC_FishNotifySwitchCannon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_iplayerid()) {
      set_m_iplayerid(from.m_iplayerid());
    }
    if (from.has_m_iseatid()) {
      set_m_iseatid(from.m_iseatid());
    }
    if (from.has_m_icannontype()) {
      set_m_icannontype(from.m_icannontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifySwitchCannon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifySwitchCannon::CopyFrom(const SC_FishNotifySwitchCannon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifySwitchCannon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SC_FishNotifySwitchCannon::Swap(SC_FishNotifySwitchCannon* other) {
  if (other != this) {
    std::swap(m_iplayerid_, other->m_iplayerid_);
    std::swap(m_iseatid_, other->m_iseatid_);
    std::swap(m_icannontype_, other->m_icannontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifySwitchCannon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifySwitchCannon_descriptor_;
  metadata.reflection = SC_FishNotifySwitchCannon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_FishChangeFireCost::kMIcostFieldNumber;
#endif  // !_MSC_VER

CS_FishChangeFireCost::CS_FishChangeFireCost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_FishChangeFireCost::InitAsDefaultInstance() {
}

CS_FishChangeFireCost::CS_FishChangeFireCost(const CS_FishChangeFireCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_FishChangeFireCost::SharedCtor() {
  _cached_size_ = 0;
  m_icost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_FishChangeFireCost::~CS_FishChangeFireCost() {
  SharedDtor();
}

void CS_FishChangeFireCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_FishChangeFireCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_FishChangeFireCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_FishChangeFireCost_descriptor_;
}

const CS_FishChangeFireCost& CS_FishChangeFireCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

CS_FishChangeFireCost* CS_FishChangeFireCost::default_instance_ = NULL;

CS_FishChangeFireCost* CS_FishChangeFireCost::New() const {
  return new CS_FishChangeFireCost;
}

void CS_FishChangeFireCost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_icost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_FishChangeFireCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_icost = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_icost_)));
          set_has_m_icost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_FishChangeFireCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_icost = 1;
  if (has_m_icost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_icost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_FishChangeFireCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_icost = 1;
  if (has_m_icost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_icost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_FishChangeFireCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_icost = 1;
    if (has_m_icost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_icost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_FishChangeFireCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_FishChangeFireCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_FishChangeFireCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_FishChangeFireCost::MergeFrom(const CS_FishChangeFireCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_icost()) {
      set_m_icost(from.m_icost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_FishChangeFireCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_FishChangeFireCost::CopyFrom(const CS_FishChangeFireCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FishChangeFireCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_FishChangeFireCost::Swap(CS_FishChangeFireCost* other) {
  if (other != this) {
    std::swap(m_icost_, other->m_icost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_FishChangeFireCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_FishChangeFireCost_descriptor_;
  metadata.reflection = CS_FishChangeFireCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishChangeFireCost::kMIseatidFieldNumber;
const int SC_FishChangeFireCost::kMIcostFieldNumber;
#endif  // !_MSC_VER

SC_FishChangeFireCost::SC_FishChangeFireCost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishChangeFireCost::InitAsDefaultInstance() {
}

SC_FishChangeFireCost::SC_FishChangeFireCost(const SC_FishChangeFireCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishChangeFireCost::SharedCtor() {
  _cached_size_ = 0;
  m_iseatid_ = 0;
  m_icost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishChangeFireCost::~SC_FishChangeFireCost() {
  SharedDtor();
}

void SC_FishChangeFireCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishChangeFireCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishChangeFireCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishChangeFireCost_descriptor_;
}

const SC_FishChangeFireCost& SC_FishChangeFireCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishChangeFireCost* SC_FishChangeFireCost::default_instance_ = NULL;

SC_FishChangeFireCost* SC_FishChangeFireCost::New() const {
  return new SC_FishChangeFireCost;
}

void SC_FishChangeFireCost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_iseatid_ = 0;
    m_icost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishChangeFireCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_iseatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iseatid_)));
          set_has_m_iseatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_icost;
        break;
      }

      // required int32 m_icost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_icost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_icost_)));
          set_has_m_icost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishChangeFireCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_iseatid = 1;
  if (has_m_iseatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_iseatid(), output);
  }

  // required int32 m_icost = 2;
  if (has_m_icost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_icost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishChangeFireCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_iseatid = 1;
  if (has_m_iseatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_iseatid(), target);
  }

  // required int32 m_icost = 2;
  if (has_m_icost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_icost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishChangeFireCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_iseatid = 1;
    if (has_m_iseatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iseatid());
    }

    // required int32 m_icost = 2;
    if (has_m_icost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_icost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishChangeFireCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishChangeFireCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishChangeFireCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishChangeFireCost::MergeFrom(const SC_FishChangeFireCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_iseatid()) {
      set_m_iseatid(from.m_iseatid());
    }
    if (from.has_m_icost()) {
      set_m_icost(from.m_icost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishChangeFireCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishChangeFireCost::CopyFrom(const SC_FishChangeFireCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishChangeFireCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC_FishChangeFireCost::Swap(SC_FishChangeFireCost* other) {
  if (other != this) {
    std::swap(m_iseatid_, other->m_iseatid_);
    std::swap(m_icost_, other->m_icost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishChangeFireCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishChangeFireCost_descriptor_;
  metadata.reflection = SC_FishChangeFireCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_FishSendBullet::kMMultipleFieldNumber;
const int CS_FishSendBullet::kMDirFieldNumber;
#endif  // !_MSC_VER

CS_FishSendBullet::CS_FishSendBullet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_FishSendBullet::InitAsDefaultInstance() {
  m_dir_ = const_cast< ::rpc::t_Vector2*>(&::rpc::t_Vector2::default_instance());
}

CS_FishSendBullet::CS_FishSendBullet(const CS_FishSendBullet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_FishSendBullet::SharedCtor() {
  _cached_size_ = 0;
  m_multiple_ = 0;
  m_dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_FishSendBullet::~CS_FishSendBullet() {
  SharedDtor();
}

void CS_FishSendBullet::SharedDtor() {
  if (this != default_instance_) {
    delete m_dir_;
  }
}

void CS_FishSendBullet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_FishSendBullet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_FishSendBullet_descriptor_;
}

const CS_FishSendBullet& CS_FishSendBullet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

CS_FishSendBullet* CS_FishSendBullet::default_instance_ = NULL;

CS_FishSendBullet* CS_FishSendBullet::New() const {
  return new CS_FishSendBullet;
}

void CS_FishSendBullet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_multiple_ = 0;
    if (has_m_dir()) {
      if (m_dir_ != NULL) m_dir_->::rpc::t_Vector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_FishSendBullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_multiple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_multiple_)));
          set_has_m_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_dir;
        break;
      }

      // required .rpc.t_Vector2 m_dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_FishSendBullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_multiple = 1;
  if (has_m_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_multiple(), output);
  }

  // required .rpc.t_Vector2 m_dir = 2;
  if (has_m_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_FishSendBullet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_multiple = 1;
  if (has_m_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_multiple(), target);
  }

  // required .rpc.t_Vector2 m_dir = 2;
  if (has_m_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_FishSendBullet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_multiple = 1;
    if (has_m_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_multiple());
    }

    // required .rpc.t_Vector2 m_dir = 2;
    if (has_m_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_FishSendBullet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_FishSendBullet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_FishSendBullet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_FishSendBullet::MergeFrom(const CS_FishSendBullet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_multiple()) {
      set_m_multiple(from.m_multiple());
    }
    if (from.has_m_dir()) {
      mutable_m_dir()->::rpc::t_Vector2::MergeFrom(from.m_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_FishSendBullet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_FishSendBullet::CopyFrom(const CS_FishSendBullet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FishSendBullet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_m_dir()) {
    if (!this->m_dir().IsInitialized()) return false;
  }
  return true;
}

void CS_FishSendBullet::Swap(CS_FishSendBullet* other) {
  if (other != this) {
    std::swap(m_multiple_, other->m_multiple_);
    std::swap(m_dir_, other->m_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_FishSendBullet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_FishSendBullet_descriptor_;
  metadata.reflection = CS_FishSendBullet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishNotifyHitFish::kMBulletidFieldNumber;
const int SC_FishNotifyHitFish::kMFishidFieldNumber;
const int SC_FishNotifyHitFish::kMSeatidFieldNumber;
const int SC_FishNotifyHitFish::kMPlayeridFieldNumber;
const int SC_FishNotifyHitFish::kMMoneyFieldNumber;
#endif  // !_MSC_VER

SC_FishNotifyHitFish::SC_FishNotifyHitFish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishNotifyHitFish::InitAsDefaultInstance() {
}

SC_FishNotifyHitFish::SC_FishNotifyHitFish(const SC_FishNotifyHitFish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishNotifyHitFish::SharedCtor() {
  _cached_size_ = 0;
  m_bulletid_ = 0;
  m_fishid_ = 0;
  m_seatid_ = 0;
  m_playerid_ = 0;
  m_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishNotifyHitFish::~SC_FishNotifyHitFish() {
  SharedDtor();
}

void SC_FishNotifyHitFish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishNotifyHitFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishNotifyHitFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishNotifyHitFish_descriptor_;
}

const SC_FishNotifyHitFish& SC_FishNotifyHitFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishNotifyHitFish* SC_FishNotifyHitFish::default_instance_ = NULL;

SC_FishNotifyHitFish* SC_FishNotifyHitFish::New() const {
  return new SC_FishNotifyHitFish;
}

void SC_FishNotifyHitFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_bulletid_ = 0;
    m_fishid_ = 0;
    m_seatid_ = 0;
    m_playerid_ = 0;
    m_money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishNotifyHitFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_bulletid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bulletid_)));
          set_has_m_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_fishid;
        break;
      }

      // required int32 m_fishid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fishid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fishid_)));
          set_has_m_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_seatid;
        break;
      }

      // required int32 m_seatid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_playerid;
        break;
      }

      // required int32 m_playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_money;
        break;
      }

      // required int32 m_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishNotifyHitFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_bulletid = 1;
  if (has_m_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_bulletid(), output);
  }

  // required int32 m_fishid = 2;
  if (has_m_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_fishid(), output);
  }

  // required int32 m_seatid = 3;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_seatid(), output);
  }

  // required int32 m_playerid = 4;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_playerid(), output);
  }

  // required int32 m_money = 5;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishNotifyHitFish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_bulletid = 1;
  if (has_m_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_bulletid(), target);
  }

  // required int32 m_fishid = 2;
  if (has_m_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_fishid(), target);
  }

  // required int32 m_seatid = 3;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_seatid(), target);
  }

  // required int32 m_playerid = 4;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_playerid(), target);
  }

  // required int32 m_money = 5;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishNotifyHitFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_bulletid = 1;
    if (has_m_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bulletid());
    }

    // required int32 m_fishid = 2;
    if (has_m_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fishid());
    }

    // required int32 m_seatid = 3;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

    // required int32 m_playerid = 4;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required int32 m_money = 5;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishNotifyHitFish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishNotifyHitFish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishNotifyHitFish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishNotifyHitFish::MergeFrom(const SC_FishNotifyHitFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bulletid()) {
      set_m_bulletid(from.m_bulletid());
    }
    if (from.has_m_fishid()) {
      set_m_fishid(from.m_fishid());
    }
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishNotifyHitFish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishNotifyHitFish::CopyFrom(const SC_FishNotifyHitFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishNotifyHitFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SC_FishNotifyHitFish::Swap(SC_FishNotifyHitFish* other) {
  if (other != this) {
    std::swap(m_bulletid_, other->m_bulletid_);
    std::swap(m_fishid_, other->m_fishid_);
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishNotifyHitFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishNotifyHitFish_descriptor_;
  metadata.reflection = SC_FishNotifyHitFish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishLockFish::kMFishidFieldNumber;
const int SC_FishLockFish::kMSeatidFieldNumber;
#endif  // !_MSC_VER

SC_FishLockFish::SC_FishLockFish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishLockFish::InitAsDefaultInstance() {
}

SC_FishLockFish::SC_FishLockFish(const SC_FishLockFish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishLockFish::SharedCtor() {
  _cached_size_ = 0;
  m_fishid_ = 0;
  m_seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishLockFish::~SC_FishLockFish() {
  SharedDtor();
}

void SC_FishLockFish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishLockFish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishLockFish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishLockFish_descriptor_;
}

const SC_FishLockFish& SC_FishLockFish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishLockFish* SC_FishLockFish::default_instance_ = NULL;

SC_FishLockFish* SC_FishLockFish::New() const {
  return new SC_FishLockFish;
}

void SC_FishLockFish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fishid_ = 0;
    m_seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishLockFish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_fishid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fishid_)));
          set_has_m_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_seatid;
        break;
      }

      // required int32 m_seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishLockFish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_fishid = 1;
  if (has_m_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_fishid(), output);
  }

  // required int32 m_seatid = 2;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishLockFish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_fishid = 1;
  if (has_m_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_fishid(), target);
  }

  // required int32 m_seatid = 2;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishLockFish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_fishid = 1;
    if (has_m_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fishid());
    }

    // required int32 m_seatid = 2;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishLockFish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishLockFish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishLockFish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishLockFish::MergeFrom(const SC_FishLockFish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fishid()) {
      set_m_fishid(from.m_fishid());
    }
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishLockFish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishLockFish::CopyFrom(const SC_FishLockFish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishLockFish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC_FishLockFish::Swap(SC_FishLockFish* other) {
  if (other != this) {
    std::swap(m_fishid_, other->m_fishid_);
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishLockFish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishLockFish_descriptor_;
  metadata.reflection = SC_FishLockFish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishRmvDrillBomb::kMBulletIdFieldNumber;
const int SC_FishRmvDrillBomb::kMSeatidFieldNumber;
const int SC_FishRmvDrillBomb::kMPlayeridFieldNumber;
const int SC_FishRmvDrillBomb::kMMoneyFieldNumber;
#endif  // !_MSC_VER

SC_FishRmvDrillBomb::SC_FishRmvDrillBomb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishRmvDrillBomb::InitAsDefaultInstance() {
}

SC_FishRmvDrillBomb::SC_FishRmvDrillBomb(const SC_FishRmvDrillBomb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishRmvDrillBomb::SharedCtor() {
  _cached_size_ = 0;
  m_bulletid_ = 0;
  m_seatid_ = 0;
  m_playerid_ = 0;
  m_money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishRmvDrillBomb::~SC_FishRmvDrillBomb() {
  SharedDtor();
}

void SC_FishRmvDrillBomb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishRmvDrillBomb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishRmvDrillBomb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishRmvDrillBomb_descriptor_;
}

const SC_FishRmvDrillBomb& SC_FishRmvDrillBomb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishRmvDrillBomb* SC_FishRmvDrillBomb::default_instance_ = NULL;

SC_FishRmvDrillBomb* SC_FishRmvDrillBomb::New() const {
  return new SC_FishRmvDrillBomb;
}

void SC_FishRmvDrillBomb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_bulletid_ = 0;
    m_seatid_ = 0;
    m_playerid_ = 0;
    m_money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishRmvDrillBomb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_bulletId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bulletid_)));
          set_has_m_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_seatid;
        break;
      }

      // required int32 m_seatid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_seatid_)));
          set_has_m_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_playerid;
        break;
      }

      // required int32 m_playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_money;
        break;
      }

      // required int32 m_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishRmvDrillBomb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_bulletId = 1;
  if (has_m_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_bulletid(), output);
  }

  // required int32 m_seatid = 2;
  if (has_m_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_seatid(), output);
  }

  // required int32 m_playerid = 3;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_playerid(), output);
  }

  // required int32 m_money = 4;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishRmvDrillBomb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_bulletId = 1;
  if (has_m_bulletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_bulletid(), target);
  }

  // required int32 m_seatid = 2;
  if (has_m_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_seatid(), target);
  }

  // required int32 m_playerid = 3;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_playerid(), target);
  }

  // required int32 m_money = 4;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishRmvDrillBomb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_bulletId = 1;
    if (has_m_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bulletid());
    }

    // required int32 m_seatid = 2;
    if (has_m_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_seatid());
    }

    // required int32 m_playerid = 3;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required int32 m_money = 4;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishRmvDrillBomb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishRmvDrillBomb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishRmvDrillBomb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishRmvDrillBomb::MergeFrom(const SC_FishRmvDrillBomb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_bulletid()) {
      set_m_bulletid(from.m_bulletid());
    }
    if (from.has_m_seatid()) {
      set_m_seatid(from.m_seatid());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishRmvDrillBomb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishRmvDrillBomb::CopyFrom(const SC_FishRmvDrillBomb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishRmvDrillBomb::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SC_FishRmvDrillBomb::Swap(SC_FishRmvDrillBomb* other) {
  if (other != this) {
    std::swap(m_bulletid_, other->m_bulletid_);
    std::swap(m_seatid_, other->m_seatid_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishRmvDrillBomb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishRmvDrillBomb_descriptor_;
  metadata.reflection = SC_FishRmvDrillBomb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_FishNotifyHitted::kMFishidFieldNumber;
#endif  // !_MSC_VER

CS_FishNotifyHitted::CS_FishNotifyHitted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_FishNotifyHitted::InitAsDefaultInstance() {
}

CS_FishNotifyHitted::CS_FishNotifyHitted(const CS_FishNotifyHitted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_FishNotifyHitted::SharedCtor() {
  _cached_size_ = 0;
  m_fishid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_FishNotifyHitted::~CS_FishNotifyHitted() {
  SharedDtor();
}

void CS_FishNotifyHitted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_FishNotifyHitted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_FishNotifyHitted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_FishNotifyHitted_descriptor_;
}

const CS_FishNotifyHitted& CS_FishNotifyHitted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

CS_FishNotifyHitted* CS_FishNotifyHitted::default_instance_ = NULL;

CS_FishNotifyHitted* CS_FishNotifyHitted::New() const {
  return new CS_FishNotifyHitted;
}

void CS_FishNotifyHitted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fishid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_FishNotifyHitted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_fishid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fishid_)));
          set_has_m_fishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_FishNotifyHitted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_fishid = 1;
  if (has_m_fishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_fishid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_FishNotifyHitted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_fishid = 1;
  if (has_m_fishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_fishid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_FishNotifyHitted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_fishid = 1;
    if (has_m_fishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fishid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_FishNotifyHitted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_FishNotifyHitted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_FishNotifyHitted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_FishNotifyHitted::MergeFrom(const CS_FishNotifyHitted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fishid()) {
      set_m_fishid(from.m_fishid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_FishNotifyHitted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_FishNotifyHitted::CopyFrom(const CS_FishNotifyHitted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FishNotifyHitted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_FishNotifyHitted::Swap(CS_FishNotifyHitted* other) {
  if (other != this) {
    std::swap(m_fishid_, other->m_fishid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_FishNotifyHitted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_FishNotifyHitted_descriptor_;
  metadata.reflection = CS_FishNotifyHitted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FishEnterNextLvl::kMLvlFieldNumber;
#endif  // !_MSC_VER

SC_FishEnterNextLvl::SC_FishEnterNextLvl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FishEnterNextLvl::InitAsDefaultInstance() {
}

SC_FishEnterNextLvl::SC_FishEnterNextLvl(const SC_FishEnterNextLvl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FishEnterNextLvl::SharedCtor() {
  _cached_size_ = 0;
  m_lvl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FishEnterNextLvl::~SC_FishEnterNextLvl() {
  SharedDtor();
}

void SC_FishEnterNextLvl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FishEnterNextLvl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FishEnterNextLvl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FishEnterNextLvl_descriptor_;
}

const SC_FishEnterNextLvl& SC_FishEnterNextLvl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFish_2eproto();
  return *default_instance_;
}

SC_FishEnterNextLvl* SC_FishEnterNextLvl::default_instance_ = NULL;

SC_FishEnterNextLvl* SC_FishEnterNextLvl::New() const {
  return new SC_FishEnterNextLvl;
}

void SC_FishEnterNextLvl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lvl_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FishEnterNextLvl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_Lvl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvl_)));
          set_has_m_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FishEnterNextLvl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_Lvl = 1;
  if (has_m_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FishEnterNextLvl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_Lvl = 1;
  if (has_m_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FishEnterNextLvl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_Lvl = 1;
    if (has_m_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FishEnterNextLvl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FishEnterNextLvl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FishEnterNextLvl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FishEnterNextLvl::MergeFrom(const SC_FishEnterNextLvl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lvl()) {
      set_m_lvl(from.m_lvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FishEnterNextLvl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FishEnterNextLvl::CopyFrom(const SC_FishEnterNextLvl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FishEnterNextLvl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_FishEnterNextLvl::Swap(SC_FishEnterNextLvl* other) {
  if (other != this) {
    std::swap(m_lvl_, other->m_lvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FishEnterNextLvl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FishEnterNextLvl_descriptor_;
  metadata.reflection = SC_FishEnterNextLvl_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
