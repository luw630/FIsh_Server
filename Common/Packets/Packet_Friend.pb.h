// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_Friend.proto

#ifndef PROTOBUF_Packet_5fFriend_2eproto__INCLUDED
#define PROTOBUF_Packet_5fFriend_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Packet_Base.pb.h"
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Packet_5fFriend_2eproto();
void protobuf_AssignDesc_Packet_5fFriend_2eproto();
void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

class t_FriendItem;
class t_FriendReqItem;
class t_FriendMsgRecordItem;
class SC_FriendList;
class SC_FriendReqList;
class CS_ReqAddFriend;
class CS_FriendFind;
class SC_FriendFindRst;
class CS_DelFriend;
class SC_AddFriend;
class SC_NotifyReqAddFriend;
class CS_FriendVerifyOtherReq;
class SC_FriendNotifyVerifyRst;
class CS_FriendSendMsg;
class SC_NotifyFriendMsg;
class CS_FriendMsgRecord;
class SC_FriendMsgRecord;

enum emPacket_Friend {
  em_CS_FriendList = 544,
  em_SC_FriendList = 545,
  em_CS_FriendReqList = 556,
  em_SC_FriendReqList = 557,
  em_CS_FriendFind = 558,
  em_SC_FriendFindRst = 559,
  em_CS_ReqAddFriend = 546,
  em_CS_DelFriend = 547,
  em_SC_AddFriend = 548,
  em_SC_NotifyReqAddFriend = 549,
  em_CS_FriendVerifyOtherReq = 550,
  em_SC_FriendNotifyVerifyRst = 551,
  em_CS_FriendSendMsg = 552,
  em_SC_NotifyFriendMsg = 553,
  em_CS_FriendMsgRecord = 554,
  em_SC_FriendMsgRecord = 555
};
bool emPacket_Friend_IsValid(int value);
const emPacket_Friend emPacket_Friend_MIN = em_CS_FriendList;
const emPacket_Friend emPacket_Friend_MAX = em_SC_FriendFindRst;
const int emPacket_Friend_ARRAYSIZE = emPacket_Friend_MAX + 1;

const ::google::protobuf::EnumDescriptor* emPacket_Friend_descriptor();
inline const ::std::string& emPacket_Friend_Name(emPacket_Friend value) {
  return ::google::protobuf::internal::NameOfEnum(
    emPacket_Friend_descriptor(), value);
}
inline bool emPacket_Friend_Parse(
    const ::std::string& name, emPacket_Friend* value) {
  return ::google::protobuf::internal::ParseNamedEnum<emPacket_Friend>(
    emPacket_Friend_descriptor(), name, value);
}
// ===================================================================

class t_FriendItem : public ::google::protobuf::Message {
 public:
  t_FriendItem();
  virtual ~t_FriendItem();

  t_FriendItem(const t_FriendItem& from);

  inline t_FriendItem& operator=(const t_FriendItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_FriendItem& default_instance();

  void Swap(t_FriendItem* other);

  // implements Message ----------------------------------------------

  t_FriendItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_FriendItem& from);
  void MergeFrom(const t_FriendItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required string m_name = 2;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 2;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // required uint64 m_money = 3;
  inline bool has_m_money() const;
  inline void clear_m_money();
  static const int kMMoneyFieldNumber = 3;
  inline ::google::protobuf::uint64 m_money() const;
  inline void set_m_money(::google::protobuf::uint64 value);

  // required int32 m_headid = 4;
  inline bool has_m_headid() const;
  inline void clear_m_headid();
  static const int kMHeadidFieldNumber = 4;
  inline ::google::protobuf::int32 m_headid() const;
  inline void set_m_headid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.t_FriendItem)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_money();
  inline void clear_has_m_money();
  inline void set_has_m_headid();
  inline void clear_has_m_headid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_name_;
  ::google::protobuf::int32 m_playerid_;
  ::google::protobuf::int32 m_headid_;
  ::google::protobuf::uint64 m_money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static t_FriendItem* default_instance_;
};
// -------------------------------------------------------------------

class t_FriendReqItem : public ::google::protobuf::Message {
 public:
  t_FriendReqItem();
  virtual ~t_FriendReqItem();

  t_FriendReqItem(const t_FriendReqItem& from);

  inline t_FriendReqItem& operator=(const t_FriendReqItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_FriendReqItem& default_instance();

  void Swap(t_FriendReqItem* other);

  // implements Message ----------------------------------------------

  t_FriendReqItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_FriendReqItem& from);
  void MergeFrom(const t_FriendReqItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required string m_name = 2;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 2;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // required int32 m_headid = 3;
  inline bool has_m_headid() const;
  inline void clear_m_headid();
  static const int kMHeadidFieldNumber = 3;
  inline ::google::protobuf::int32 m_headid() const;
  inline void set_m_headid(::google::protobuf::int32 value);

  // required int32 m_time = 4;
  inline bool has_m_time() const;
  inline void clear_m_time();
  static const int kMTimeFieldNumber = 4;
  inline ::google::protobuf::int32 m_time() const;
  inline void set_m_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.t_FriendReqItem)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_headid();
  inline void clear_has_m_headid();
  inline void set_has_m_time();
  inline void clear_has_m_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_name_;
  ::google::protobuf::int32 m_playerid_;
  ::google::protobuf::int32 m_headid_;
  ::google::protobuf::int32 m_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static t_FriendReqItem* default_instance_;
};
// -------------------------------------------------------------------

class t_FriendMsgRecordItem : public ::google::protobuf::Message {
 public:
  t_FriendMsgRecordItem();
  virtual ~t_FriendMsgRecordItem();

  t_FriendMsgRecordItem(const t_FriendMsgRecordItem& from);

  inline t_FriendMsgRecordItem& operator=(const t_FriendMsgRecordItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_FriendMsgRecordItem& default_instance();

  void Swap(t_FriendMsgRecordItem* other);

  // implements Message ----------------------------------------------

  t_FriendMsgRecordItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_FriendMsgRecordItem& from);
  void MergeFrom(const t_FriendMsgRecordItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m_content = 1;
  inline bool has_m_content() const;
  inline void clear_m_content();
  static const int kMContentFieldNumber = 1;
  inline const ::std::string& m_content() const;
  inline void set_m_content(const ::std::string& value);
  inline void set_m_content(const char* value);
  inline void set_m_content(const char* value, size_t size);
  inline ::std::string* mutable_m_content();
  inline ::std::string* release_m_content();
  inline void set_allocated_m_content(::std::string* m_content);

  // required int32 m_time = 2;
  inline bool has_m_time() const;
  inline void clear_m_time();
  static const int kMTimeFieldNumber = 2;
  inline ::google::protobuf::int32 m_time() const;
  inline void set_m_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.t_FriendMsgRecordItem)
 private:
  inline void set_has_m_content();
  inline void clear_has_m_content();
  inline void set_has_m_time();
  inline void clear_has_m_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_content_;
  ::google::protobuf::int32 m_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static t_FriendMsgRecordItem* default_instance_;
};
// -------------------------------------------------------------------

class SC_FriendList : public ::google::protobuf::Message {
 public:
  SC_FriendList();
  virtual ~SC_FriendList();

  SC_FriendList(const SC_FriendList& from);

  inline SC_FriendList& operator=(const SC_FriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FriendList& default_instance();

  void Swap(SC_FriendList* other);

  // implements Message ----------------------------------------------

  SC_FriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FriendList& from);
  void MergeFrom(const SC_FriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.t_FriendItem m_data = 1;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 1;
  inline const ::rpc::t_FriendItem& m_data(int index) const;
  inline ::rpc::t_FriendItem* mutable_m_data(int index);
  inline ::rpc::t_FriendItem* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendItem >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendItem >*
      mutable_m_data();

  // @@protoc_insertion_point(class_scope:rpc.SC_FriendList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendItem > m_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static SC_FriendList* default_instance_;
};
// -------------------------------------------------------------------

class SC_FriendReqList : public ::google::protobuf::Message {
 public:
  SC_FriendReqList();
  virtual ~SC_FriendReqList();

  SC_FriendReqList(const SC_FriendReqList& from);

  inline SC_FriendReqList& operator=(const SC_FriendReqList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FriendReqList& default_instance();

  void Swap(SC_FriendReqList* other);

  // implements Message ----------------------------------------------

  SC_FriendReqList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FriendReqList& from);
  void MergeFrom(const SC_FriendReqList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.t_FriendReqItem m_data = 1;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 1;
  inline const ::rpc::t_FriendReqItem& m_data(int index) const;
  inline ::rpc::t_FriendReqItem* mutable_m_data(int index);
  inline ::rpc::t_FriendReqItem* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendReqItem >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendReqItem >*
      mutable_m_data();

  // @@protoc_insertion_point(class_scope:rpc.SC_FriendReqList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendReqItem > m_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static SC_FriendReqList* default_instance_;
};
// -------------------------------------------------------------------

class CS_ReqAddFriend : public ::google::protobuf::Message {
 public:
  CS_ReqAddFriend();
  virtual ~CS_ReqAddFriend();

  CS_ReqAddFriend(const CS_ReqAddFriend& from);

  inline CS_ReqAddFriend& operator=(const CS_ReqAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_ReqAddFriend& default_instance();

  void Swap(CS_ReqAddFriend* other);

  // implements Message ----------------------------------------------

  CS_ReqAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_ReqAddFriend& from);
  void MergeFrom(const CS_ReqAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.CS_ReqAddFriend)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static CS_ReqAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class CS_FriendFind : public ::google::protobuf::Message {
 public:
  CS_FriendFind();
  virtual ~CS_FriendFind();

  CS_FriendFind(const CS_FriendFind& from);

  inline CS_FriendFind& operator=(const CS_FriendFind& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_FriendFind& default_instance();

  void Swap(CS_FriendFind* other);

  // implements Message ----------------------------------------------

  CS_FriendFind* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_FriendFind& from);
  void MergeFrom(const CS_FriendFind& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.CS_FriendFind)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static CS_FriendFind* default_instance_;
};
// -------------------------------------------------------------------

class SC_FriendFindRst : public ::google::protobuf::Message {
 public:
  SC_FriendFindRst();
  virtual ~SC_FriendFindRst();

  SC_FriendFindRst(const SC_FriendFindRst& from);

  inline SC_FriendFindRst& operator=(const SC_FriendFindRst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FriendFindRst& default_instance();

  void Swap(SC_FriendFindRst* other);

  // implements Message ----------------------------------------------

  SC_FriendFindRst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FriendFindRst& from);
  void MergeFrom(const SC_FriendFindRst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bfind = 1;
  inline bool has_bfind() const;
  inline void clear_bfind();
  static const int kBfindFieldNumber = 1;
  inline ::google::protobuf::int32 bfind() const;
  inline void set_bfind(::google::protobuf::int32 value);

  // required int32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 headid = 4;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 4;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FriendFindRst)
 private:
  inline void set_has_bfind();
  inline void clear_has_bfind();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headid();
  inline void clear_has_headid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bfind_;
  ::google::protobuf::int32 playerid_;
  ::std::string* name_;
  ::google::protobuf::int32 headid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static SC_FriendFindRst* default_instance_;
};
// -------------------------------------------------------------------

class CS_DelFriend : public ::google::protobuf::Message {
 public:
  CS_DelFriend();
  virtual ~CS_DelFriend();

  CS_DelFriend(const CS_DelFriend& from);

  inline CS_DelFriend& operator=(const CS_DelFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_DelFriend& default_instance();

  void Swap(CS_DelFriend* other);

  // implements Message ----------------------------------------------

  CS_DelFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_DelFriend& from);
  void MergeFrom(const CS_DelFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_friendid = 1;
  inline bool has_m_friendid() const;
  inline void clear_m_friendid();
  static const int kMFriendidFieldNumber = 1;
  inline ::google::protobuf::int32 m_friendid() const;
  inline void set_m_friendid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.CS_DelFriend)
 private:
  inline void set_has_m_friendid();
  inline void clear_has_m_friendid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_friendid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static CS_DelFriend* default_instance_;
};
// -------------------------------------------------------------------

class SC_AddFriend : public ::google::protobuf::Message {
 public:
  SC_AddFriend();
  virtual ~SC_AddFriend();

  SC_AddFriend(const SC_AddFriend& from);

  inline SC_AddFriend& operator=(const SC_AddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_AddFriend& default_instance();

  void Swap(SC_AddFriend* other);

  // implements Message ----------------------------------------------

  SC_AddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_AddFriend& from);
  void MergeFrom(const SC_AddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .rpc.t_FriendItem m_data = 1;
  inline bool has_m_data() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 1;
  inline const ::rpc::t_FriendItem& m_data() const;
  inline ::rpc::t_FriendItem* mutable_m_data();
  inline ::rpc::t_FriendItem* release_m_data();
  inline void set_allocated_m_data(::rpc::t_FriendItem* m_data);

  // @@protoc_insertion_point(class_scope:rpc.SC_AddFriend)
 private:
  inline void set_has_m_data();
  inline void clear_has_m_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rpc::t_FriendItem* m_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static SC_AddFriend* default_instance_;
};
// -------------------------------------------------------------------

class SC_NotifyReqAddFriend : public ::google::protobuf::Message {
 public:
  SC_NotifyReqAddFriend();
  virtual ~SC_NotifyReqAddFriend();

  SC_NotifyReqAddFriend(const SC_NotifyReqAddFriend& from);

  inline SC_NotifyReqAddFriend& operator=(const SC_NotifyReqAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_NotifyReqAddFriend& default_instance();

  void Swap(SC_NotifyReqAddFriend* other);

  // implements Message ----------------------------------------------

  SC_NotifyReqAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_NotifyReqAddFriend& from);
  void MergeFrom(const SC_NotifyReqAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 headid = 3;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 3;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_NotifyReqAddFriend)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headid();
  inline void clear_has_headid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::int32 headid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static SC_NotifyReqAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class CS_FriendVerifyOtherReq : public ::google::protobuf::Message {
 public:
  CS_FriendVerifyOtherReq();
  virtual ~CS_FriendVerifyOtherReq();

  CS_FriendVerifyOtherReq(const CS_FriendVerifyOtherReq& from);

  inline CS_FriendVerifyOtherReq& operator=(const CS_FriendVerifyOtherReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_FriendVerifyOtherReq& default_instance();

  void Swap(CS_FriendVerifyOtherReq* other);

  // implements Message ----------------------------------------------

  CS_FriendVerifyOtherReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_FriendVerifyOtherReq& from);
  void MergeFrom(const CS_FriendVerifyOtherReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_agree = 1;
  inline bool has_m_agree() const;
  inline void clear_m_agree();
  static const int kMAgreeFieldNumber = 1;
  inline ::google::protobuf::int32 m_agree() const;
  inline void set_m_agree(::google::protobuf::int32 value);

  // required int32 m_playerid = 2;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 2;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.CS_FriendVerifyOtherReq)
 private:
  inline void set_has_m_agree();
  inline void clear_has_m_agree();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_agree_;
  ::google::protobuf::int32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static CS_FriendVerifyOtherReq* default_instance_;
};
// -------------------------------------------------------------------

class SC_FriendNotifyVerifyRst : public ::google::protobuf::Message {
 public:
  SC_FriendNotifyVerifyRst();
  virtual ~SC_FriendNotifyVerifyRst();

  SC_FriendNotifyVerifyRst(const SC_FriendNotifyVerifyRst& from);

  inline SC_FriendNotifyVerifyRst& operator=(const SC_FriendNotifyVerifyRst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FriendNotifyVerifyRst& default_instance();

  void Swap(SC_FriendNotifyVerifyRst* other);

  // implements Message ----------------------------------------------

  SC_FriendNotifyVerifyRst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FriendNotifyVerifyRst& from);
  void MergeFrom(const SC_FriendNotifyVerifyRst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 agree = 1;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 1;
  inline ::google::protobuf::int32 agree() const;
  inline void set_agree(::google::protobuf::int32 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 headid = 4;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 4;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SC_FriendNotifyVerifyRst)
 private:
  inline void set_has_agree();
  inline void clear_has_agree();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headid();
  inline void clear_has_headid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 agree_;
  ::google::protobuf::uint32 playerid_;
  ::std::string* name_;
  ::google::protobuf::int32 headid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static SC_FriendNotifyVerifyRst* default_instance_;
};
// -------------------------------------------------------------------

class CS_FriendSendMsg : public ::google::protobuf::Message {
 public:
  CS_FriendSendMsg();
  virtual ~CS_FriendSendMsg();

  CS_FriendSendMsg(const CS_FriendSendMsg& from);

  inline CS_FriendSendMsg& operator=(const CS_FriendSendMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_FriendSendMsg& default_instance();

  void Swap(CS_FriendSendMsg* other);

  // implements Message ----------------------------------------------

  CS_FriendSendMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_FriendSendMsg& from);
  void MergeFrom(const CS_FriendSendMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required string m_content = 2;
  inline bool has_m_content() const;
  inline void clear_m_content();
  static const int kMContentFieldNumber = 2;
  inline const ::std::string& m_content() const;
  inline void set_m_content(const ::std::string& value);
  inline void set_m_content(const char* value);
  inline void set_m_content(const char* value, size_t size);
  inline ::std::string* mutable_m_content();
  inline ::std::string* release_m_content();
  inline void set_allocated_m_content(::std::string* m_content);

  // @@protoc_insertion_point(class_scope:rpc.CS_FriendSendMsg)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_content();
  inline void clear_has_m_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_content_;
  ::google::protobuf::int32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static CS_FriendSendMsg* default_instance_;
};
// -------------------------------------------------------------------

class SC_NotifyFriendMsg : public ::google::protobuf::Message {
 public:
  SC_NotifyFriendMsg();
  virtual ~SC_NotifyFriendMsg();

  SC_NotifyFriendMsg(const SC_NotifyFriendMsg& from);

  inline SC_NotifyFriendMsg& operator=(const SC_NotifyFriendMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_NotifyFriendMsg& default_instance();

  void Swap(SC_NotifyFriendMsg* other);

  // implements Message ----------------------------------------------

  SC_NotifyFriendMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_NotifyFriendMsg& from);
  void MergeFrom(const SC_NotifyFriendMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // required string m_content = 2;
  inline bool has_m_content() const;
  inline void clear_m_content();
  static const int kMContentFieldNumber = 2;
  inline const ::std::string& m_content() const;
  inline void set_m_content(const ::std::string& value);
  inline void set_m_content(const char* value);
  inline void set_m_content(const char* value, size_t size);
  inline ::std::string* mutable_m_content();
  inline ::std::string* release_m_content();
  inline void set_allocated_m_content(::std::string* m_content);

  // @@protoc_insertion_point(class_scope:rpc.SC_NotifyFriendMsg)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_content();
  inline void clear_has_m_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_content_;
  ::google::protobuf::int32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static SC_NotifyFriendMsg* default_instance_;
};
// -------------------------------------------------------------------

class CS_FriendMsgRecord : public ::google::protobuf::Message {
 public:
  CS_FriendMsgRecord();
  virtual ~CS_FriendMsgRecord();

  CS_FriendMsgRecord(const CS_FriendMsgRecord& from);

  inline CS_FriendMsgRecord& operator=(const CS_FriendMsgRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CS_FriendMsgRecord& default_instance();

  void Swap(CS_FriendMsgRecord* other);

  // implements Message ----------------------------------------------

  CS_FriendMsgRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CS_FriendMsgRecord& from);
  void MergeFrom(const CS_FriendMsgRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::int32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.CS_FriendMsgRecord)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static CS_FriendMsgRecord* default_instance_;
};
// -------------------------------------------------------------------

class SC_FriendMsgRecord : public ::google::protobuf::Message {
 public:
  SC_FriendMsgRecord();
  virtual ~SC_FriendMsgRecord();

  SC_FriendMsgRecord(const SC_FriendMsgRecord& from);

  inline SC_FriendMsgRecord& operator=(const SC_FriendMsgRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FriendMsgRecord& default_instance();

  void Swap(SC_FriendMsgRecord* other);

  // implements Message ----------------------------------------------

  SC_FriendMsgRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FriendMsgRecord& from);
  void MergeFrom(const SC_FriendMsgRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.t_FriendMsgRecordItem m_data = 1;
  inline int m_data_size() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 1;
  inline const ::rpc::t_FriendMsgRecordItem& m_data(int index) const;
  inline ::rpc::t_FriendMsgRecordItem* mutable_m_data(int index);
  inline ::rpc::t_FriendMsgRecordItem* add_m_data();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendMsgRecordItem >&
      m_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendMsgRecordItem >*
      mutable_m_data();

  // @@protoc_insertion_point(class_scope:rpc.SC_FriendMsgRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendMsgRecordItem > m_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fFriend_2eproto();
  friend void protobuf_AssignDesc_Packet_5fFriend_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fFriend_2eproto();

  void InitAsDefaultInstance();
  static SC_FriendMsgRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// t_FriendItem

// required int32 m_playerid = 1;
inline bool t_FriendItem::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_FriendItem::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_FriendItem::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_FriendItem::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 t_FriendItem::m_playerid() const {
  return m_playerid_;
}
inline void t_FriendItem::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required string m_name = 2;
inline bool t_FriendItem::has_m_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_FriendItem::set_has_m_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_FriendItem::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_FriendItem::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& t_FriendItem::m_name() const {
  return *m_name_;
}
inline void t_FriendItem::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void t_FriendItem::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void t_FriendItem::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_FriendItem::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* t_FriendItem::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_FriendItem::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 m_money = 3;
inline bool t_FriendItem::has_m_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_FriendItem::set_has_m_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_FriendItem::clear_has_m_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_FriendItem::clear_m_money() {
  m_money_ = GOOGLE_ULONGLONG(0);
  clear_has_m_money();
}
inline ::google::protobuf::uint64 t_FriendItem::m_money() const {
  return m_money_;
}
inline void t_FriendItem::set_m_money(::google::protobuf::uint64 value) {
  set_has_m_money();
  m_money_ = value;
}

// required int32 m_headid = 4;
inline bool t_FriendItem::has_m_headid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_FriendItem::set_has_m_headid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_FriendItem::clear_has_m_headid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_FriendItem::clear_m_headid() {
  m_headid_ = 0;
  clear_has_m_headid();
}
inline ::google::protobuf::int32 t_FriendItem::m_headid() const {
  return m_headid_;
}
inline void t_FriendItem::set_m_headid(::google::protobuf::int32 value) {
  set_has_m_headid();
  m_headid_ = value;
}

// -------------------------------------------------------------------

// t_FriendReqItem

// required int32 m_playerid = 1;
inline bool t_FriendReqItem::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_FriendReqItem::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_FriendReqItem::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_FriendReqItem::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 t_FriendReqItem::m_playerid() const {
  return m_playerid_;
}
inline void t_FriendReqItem::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required string m_name = 2;
inline bool t_FriendReqItem::has_m_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_FriendReqItem::set_has_m_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_FriendReqItem::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_FriendReqItem::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& t_FriendReqItem::m_name() const {
  return *m_name_;
}
inline void t_FriendReqItem::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void t_FriendReqItem::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void t_FriendReqItem::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_FriendReqItem::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* t_FriendReqItem::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_FriendReqItem::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_headid = 3;
inline bool t_FriendReqItem::has_m_headid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_FriendReqItem::set_has_m_headid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_FriendReqItem::clear_has_m_headid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_FriendReqItem::clear_m_headid() {
  m_headid_ = 0;
  clear_has_m_headid();
}
inline ::google::protobuf::int32 t_FriendReqItem::m_headid() const {
  return m_headid_;
}
inline void t_FriendReqItem::set_m_headid(::google::protobuf::int32 value) {
  set_has_m_headid();
  m_headid_ = value;
}

// required int32 m_time = 4;
inline bool t_FriendReqItem::has_m_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_FriendReqItem::set_has_m_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_FriendReqItem::clear_has_m_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_FriendReqItem::clear_m_time() {
  m_time_ = 0;
  clear_has_m_time();
}
inline ::google::protobuf::int32 t_FriendReqItem::m_time() const {
  return m_time_;
}
inline void t_FriendReqItem::set_m_time(::google::protobuf::int32 value) {
  set_has_m_time();
  m_time_ = value;
}

// -------------------------------------------------------------------

// t_FriendMsgRecordItem

// required string m_content = 1;
inline bool t_FriendMsgRecordItem::has_m_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_FriendMsgRecordItem::set_has_m_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_FriendMsgRecordItem::clear_has_m_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_FriendMsgRecordItem::clear_m_content() {
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    m_content_->clear();
  }
  clear_has_m_content();
}
inline const ::std::string& t_FriendMsgRecordItem::m_content() const {
  return *m_content_;
}
inline void t_FriendMsgRecordItem::set_m_content(const ::std::string& value) {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  m_content_->assign(value);
}
inline void t_FriendMsgRecordItem::set_m_content(const char* value) {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  m_content_->assign(value);
}
inline void t_FriendMsgRecordItem::set_m_content(const char* value, size_t size) {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  m_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_FriendMsgRecordItem::mutable_m_content() {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  return m_content_;
}
inline ::std::string* t_FriendMsgRecordItem::release_m_content() {
  clear_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_content_;
    m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_FriendMsgRecordItem::set_allocated_m_content(::std::string* m_content) {
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    delete m_content_;
  }
  if (m_content) {
    set_has_m_content();
    m_content_ = m_content;
  } else {
    clear_has_m_content();
    m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 m_time = 2;
inline bool t_FriendMsgRecordItem::has_m_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_FriendMsgRecordItem::set_has_m_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_FriendMsgRecordItem::clear_has_m_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_FriendMsgRecordItem::clear_m_time() {
  m_time_ = 0;
  clear_has_m_time();
}
inline ::google::protobuf::int32 t_FriendMsgRecordItem::m_time() const {
  return m_time_;
}
inline void t_FriendMsgRecordItem::set_m_time(::google::protobuf::int32 value) {
  set_has_m_time();
  m_time_ = value;
}

// -------------------------------------------------------------------

// SC_FriendList

// repeated .rpc.t_FriendItem m_data = 1;
inline int SC_FriendList::m_data_size() const {
  return m_data_.size();
}
inline void SC_FriendList::clear_m_data() {
  m_data_.Clear();
}
inline const ::rpc::t_FriendItem& SC_FriendList::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::rpc::t_FriendItem* SC_FriendList::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::rpc::t_FriendItem* SC_FriendList::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendItem >&
SC_FriendList::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendItem >*
SC_FriendList::mutable_m_data() {
  return &m_data_;
}

// -------------------------------------------------------------------

// SC_FriendReqList

// repeated .rpc.t_FriendReqItem m_data = 1;
inline int SC_FriendReqList::m_data_size() const {
  return m_data_.size();
}
inline void SC_FriendReqList::clear_m_data() {
  m_data_.Clear();
}
inline const ::rpc::t_FriendReqItem& SC_FriendReqList::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::rpc::t_FriendReqItem* SC_FriendReqList::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::rpc::t_FriendReqItem* SC_FriendReqList::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendReqItem >&
SC_FriendReqList::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendReqItem >*
SC_FriendReqList::mutable_m_data() {
  return &m_data_;
}

// -------------------------------------------------------------------

// CS_ReqAddFriend

// required int32 m_playerid = 1;
inline bool CS_ReqAddFriend::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_ReqAddFriend::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_ReqAddFriend::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_ReqAddFriend::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 CS_ReqAddFriend::m_playerid() const {
  return m_playerid_;
}
inline void CS_ReqAddFriend::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// -------------------------------------------------------------------

// CS_FriendFind

// required int32 m_playerid = 1;
inline bool CS_FriendFind::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_FriendFind::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_FriendFind::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_FriendFind::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 CS_FriendFind::m_playerid() const {
  return m_playerid_;
}
inline void CS_FriendFind::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// -------------------------------------------------------------------

// SC_FriendFindRst

// required int32 bfind = 1;
inline bool SC_FriendFindRst::has_bfind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FriendFindRst::set_has_bfind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FriendFindRst::clear_has_bfind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FriendFindRst::clear_bfind() {
  bfind_ = 0;
  clear_has_bfind();
}
inline ::google::protobuf::int32 SC_FriendFindRst::bfind() const {
  return bfind_;
}
inline void SC_FriendFindRst::set_bfind(::google::protobuf::int32 value) {
  set_has_bfind();
  bfind_ = value;
}

// required int32 playerid = 2;
inline bool SC_FriendFindRst::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FriendFindRst::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FriendFindRst::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FriendFindRst::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 SC_FriendFindRst::playerid() const {
  return playerid_;
}
inline void SC_FriendFindRst::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string name = 3;
inline bool SC_FriendFindRst::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FriendFindRst::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FriendFindRst::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FriendFindRst::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SC_FriendFindRst::name() const {
  return *name_;
}
inline void SC_FriendFindRst::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SC_FriendFindRst::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SC_FriendFindRst::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SC_FriendFindRst::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SC_FriendFindRst::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SC_FriendFindRst::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 headid = 4;
inline bool SC_FriendFindRst::has_headid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_FriendFindRst::set_has_headid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_FriendFindRst::clear_has_headid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_FriendFindRst::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 SC_FriendFindRst::headid() const {
  return headid_;
}
inline void SC_FriendFindRst::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// -------------------------------------------------------------------

// CS_DelFriend

// required int32 m_friendid = 1;
inline bool CS_DelFriend::has_m_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_DelFriend::set_has_m_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_DelFriend::clear_has_m_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_DelFriend::clear_m_friendid() {
  m_friendid_ = 0;
  clear_has_m_friendid();
}
inline ::google::protobuf::int32 CS_DelFriend::m_friendid() const {
  return m_friendid_;
}
inline void CS_DelFriend::set_m_friendid(::google::protobuf::int32 value) {
  set_has_m_friendid();
  m_friendid_ = value;
}

// -------------------------------------------------------------------

// SC_AddFriend

// required .rpc.t_FriendItem m_data = 1;
inline bool SC_AddFriend::has_m_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_AddFriend::set_has_m_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_AddFriend::clear_has_m_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_AddFriend::clear_m_data() {
  if (m_data_ != NULL) m_data_->::rpc::t_FriendItem::Clear();
  clear_has_m_data();
}
inline const ::rpc::t_FriendItem& SC_AddFriend::m_data() const {
  return m_data_ != NULL ? *m_data_ : *default_instance_->m_data_;
}
inline ::rpc::t_FriendItem* SC_AddFriend::mutable_m_data() {
  set_has_m_data();
  if (m_data_ == NULL) m_data_ = new ::rpc::t_FriendItem;
  return m_data_;
}
inline ::rpc::t_FriendItem* SC_AddFriend::release_m_data() {
  clear_has_m_data();
  ::rpc::t_FriendItem* temp = m_data_;
  m_data_ = NULL;
  return temp;
}
inline void SC_AddFriend::set_allocated_m_data(::rpc::t_FriendItem* m_data) {
  delete m_data_;
  m_data_ = m_data;
  if (m_data) {
    set_has_m_data();
  } else {
    clear_has_m_data();
  }
}

// -------------------------------------------------------------------

// SC_NotifyReqAddFriend

// required uint32 playerid = 1;
inline bool SC_NotifyReqAddFriend::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_NotifyReqAddFriend::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_NotifyReqAddFriend::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_NotifyReqAddFriend::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 SC_NotifyReqAddFriend::playerid() const {
  return playerid_;
}
inline void SC_NotifyReqAddFriend::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool SC_NotifyReqAddFriend::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_NotifyReqAddFriend::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_NotifyReqAddFriend::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_NotifyReqAddFriend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SC_NotifyReqAddFriend::name() const {
  return *name_;
}
inline void SC_NotifyReqAddFriend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SC_NotifyReqAddFriend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SC_NotifyReqAddFriend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SC_NotifyReqAddFriend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SC_NotifyReqAddFriend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SC_NotifyReqAddFriend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 headid = 3;
inline bool SC_NotifyReqAddFriend::has_headid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_NotifyReqAddFriend::set_has_headid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_NotifyReqAddFriend::clear_has_headid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_NotifyReqAddFriend::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 SC_NotifyReqAddFriend::headid() const {
  return headid_;
}
inline void SC_NotifyReqAddFriend::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// -------------------------------------------------------------------

// CS_FriendVerifyOtherReq

// required int32 m_agree = 1;
inline bool CS_FriendVerifyOtherReq::has_m_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_FriendVerifyOtherReq::set_has_m_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_FriendVerifyOtherReq::clear_has_m_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_FriendVerifyOtherReq::clear_m_agree() {
  m_agree_ = 0;
  clear_has_m_agree();
}
inline ::google::protobuf::int32 CS_FriendVerifyOtherReq::m_agree() const {
  return m_agree_;
}
inline void CS_FriendVerifyOtherReq::set_m_agree(::google::protobuf::int32 value) {
  set_has_m_agree();
  m_agree_ = value;
}

// required int32 m_playerid = 2;
inline bool CS_FriendVerifyOtherReq::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_FriendVerifyOtherReq::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_FriendVerifyOtherReq::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_FriendVerifyOtherReq::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 CS_FriendVerifyOtherReq::m_playerid() const {
  return m_playerid_;
}
inline void CS_FriendVerifyOtherReq::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// -------------------------------------------------------------------

// SC_FriendNotifyVerifyRst

// required int32 agree = 1;
inline bool SC_FriendNotifyVerifyRst::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FriendNotifyVerifyRst::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FriendNotifyVerifyRst::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FriendNotifyVerifyRst::clear_agree() {
  agree_ = 0;
  clear_has_agree();
}
inline ::google::protobuf::int32 SC_FriendNotifyVerifyRst::agree() const {
  return agree_;
}
inline void SC_FriendNotifyVerifyRst::set_agree(::google::protobuf::int32 value) {
  set_has_agree();
  agree_ = value;
}

// required uint32 playerid = 2;
inline bool SC_FriendNotifyVerifyRst::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_FriendNotifyVerifyRst::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_FriendNotifyVerifyRst::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_FriendNotifyVerifyRst::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 SC_FriendNotifyVerifyRst::playerid() const {
  return playerid_;
}
inline void SC_FriendNotifyVerifyRst::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 3;
inline bool SC_FriendNotifyVerifyRst::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SC_FriendNotifyVerifyRst::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SC_FriendNotifyVerifyRst::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SC_FriendNotifyVerifyRst::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SC_FriendNotifyVerifyRst::name() const {
  return *name_;
}
inline void SC_FriendNotifyVerifyRst::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SC_FriendNotifyVerifyRst::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SC_FriendNotifyVerifyRst::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SC_FriendNotifyVerifyRst::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SC_FriendNotifyVerifyRst::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SC_FriendNotifyVerifyRst::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 headid = 4;
inline bool SC_FriendNotifyVerifyRst::has_headid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SC_FriendNotifyVerifyRst::set_has_headid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SC_FriendNotifyVerifyRst::clear_has_headid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SC_FriendNotifyVerifyRst::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 SC_FriendNotifyVerifyRst::headid() const {
  return headid_;
}
inline void SC_FriendNotifyVerifyRst::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// -------------------------------------------------------------------

// CS_FriendSendMsg

// required int32 m_playerid = 1;
inline bool CS_FriendSendMsg::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_FriendSendMsg::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_FriendSendMsg::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_FriendSendMsg::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 CS_FriendSendMsg::m_playerid() const {
  return m_playerid_;
}
inline void CS_FriendSendMsg::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required string m_content = 2;
inline bool CS_FriendSendMsg::has_m_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CS_FriendSendMsg::set_has_m_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CS_FriendSendMsg::clear_has_m_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CS_FriendSendMsg::clear_m_content() {
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    m_content_->clear();
  }
  clear_has_m_content();
}
inline const ::std::string& CS_FriendSendMsg::m_content() const {
  return *m_content_;
}
inline void CS_FriendSendMsg::set_m_content(const ::std::string& value) {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  m_content_->assign(value);
}
inline void CS_FriendSendMsg::set_m_content(const char* value) {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  m_content_->assign(value);
}
inline void CS_FriendSendMsg::set_m_content(const char* value, size_t size) {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  m_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CS_FriendSendMsg::mutable_m_content() {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  return m_content_;
}
inline ::std::string* CS_FriendSendMsg::release_m_content() {
  clear_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_content_;
    m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CS_FriendSendMsg::set_allocated_m_content(::std::string* m_content) {
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    delete m_content_;
  }
  if (m_content) {
    set_has_m_content();
    m_content_ = m_content;
  } else {
    clear_has_m_content();
    m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SC_NotifyFriendMsg

// required int32 m_playerid = 1;
inline bool SC_NotifyFriendMsg::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_NotifyFriendMsg::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_NotifyFriendMsg::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_NotifyFriendMsg::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 SC_NotifyFriendMsg::m_playerid() const {
  return m_playerid_;
}
inline void SC_NotifyFriendMsg::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required string m_content = 2;
inline bool SC_NotifyFriendMsg::has_m_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SC_NotifyFriendMsg::set_has_m_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SC_NotifyFriendMsg::clear_has_m_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SC_NotifyFriendMsg::clear_m_content() {
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    m_content_->clear();
  }
  clear_has_m_content();
}
inline const ::std::string& SC_NotifyFriendMsg::m_content() const {
  return *m_content_;
}
inline void SC_NotifyFriendMsg::set_m_content(const ::std::string& value) {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  m_content_->assign(value);
}
inline void SC_NotifyFriendMsg::set_m_content(const char* value) {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  m_content_->assign(value);
}
inline void SC_NotifyFriendMsg::set_m_content(const char* value, size_t size) {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  m_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SC_NotifyFriendMsg::mutable_m_content() {
  set_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    m_content_ = new ::std::string;
  }
  return m_content_;
}
inline ::std::string* SC_NotifyFriendMsg::release_m_content() {
  clear_has_m_content();
  if (m_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_content_;
    m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SC_NotifyFriendMsg::set_allocated_m_content(::std::string* m_content) {
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    delete m_content_;
  }
  if (m_content) {
    set_has_m_content();
    m_content_ = m_content;
  } else {
    clear_has_m_content();
    m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CS_FriendMsgRecord

// required int32 m_playerid = 1;
inline bool CS_FriendMsgRecord::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CS_FriendMsgRecord::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CS_FriendMsgRecord::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CS_FriendMsgRecord::clear_m_playerid() {
  m_playerid_ = 0;
  clear_has_m_playerid();
}
inline ::google::protobuf::int32 CS_FriendMsgRecord::m_playerid() const {
  return m_playerid_;
}
inline void CS_FriendMsgRecord::set_m_playerid(::google::protobuf::int32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// -------------------------------------------------------------------

// SC_FriendMsgRecord

// repeated .rpc.t_FriendMsgRecordItem m_data = 1;
inline int SC_FriendMsgRecord::m_data_size() const {
  return m_data_.size();
}
inline void SC_FriendMsgRecord::clear_m_data() {
  m_data_.Clear();
}
inline const ::rpc::t_FriendMsgRecordItem& SC_FriendMsgRecord::m_data(int index) const {
  return m_data_.Get(index);
}
inline ::rpc::t_FriendMsgRecordItem* SC_FriendMsgRecord::mutable_m_data(int index) {
  return m_data_.Mutable(index);
}
inline ::rpc::t_FriendMsgRecordItem* SC_FriendMsgRecord::add_m_data() {
  return m_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendMsgRecordItem >&
SC_FriendMsgRecord::m_data() const {
  return m_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendMsgRecordItem >*
SC_FriendMsgRecord::mutable_m_data() {
  return &m_data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::emPacket_Friend>() {
  return ::rpc::emPacket_Friend_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Packet_5fFriend_2eproto__INCLUDED
