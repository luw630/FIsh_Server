// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_DB.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Packet_DB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* t_FriendItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_FriendItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_MailItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_MailItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_FriendReqItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_FriendReqItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_FriendDatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_FriendDatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_MailDatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_MailDatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_BankDatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_BankDatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_playerBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_playerBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD_LoadData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD_LoadData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DS_PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DS_PlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD_InsertPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD_InsertPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD_SavePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD_SavePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* param_FindPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  param_FindPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SD_FindPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SD_FindPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DS_FindPlayerRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DS_FindPlayerRst_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* emPacket_Db_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Packet_5fDB_2eproto() {
  protobuf_AddDesc_Packet_5fDB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Packet_DB.proto");
  GOOGLE_CHECK(file != NULL);
  t_FriendItemData_descriptor_ = file->message_type(0);
  static const int t_FriendItemData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItemData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItemData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItemData, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItemData, money_),
  };
  t_FriendItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_FriendItemData_descriptor_,
      t_FriendItemData::default_instance_,
      t_FriendItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_FriendItemData));
  t_MailItemData_descriptor_ = file->message_type(1);
  static const int t_MailItemData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItemData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItemData, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItemData, time_),
  };
  t_MailItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_MailItemData_descriptor_,
      t_MailItemData::default_instance_,
      t_MailItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_MailItemData));
  t_FriendReqItemData_descriptor_ = file->message_type(2);
  static const int t_FriendReqItemData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItemData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItemData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItemData, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItemData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItemData, money_),
  };
  t_FriendReqItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_FriendReqItemData_descriptor_,
      t_FriendReqItemData::default_instance_,
      t_FriendReqItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_FriendReqItemData));
  t_FriendDatas_descriptor_ = file->message_type(3);
  static const int t_FriendDatas_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendDatas, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendDatas, friendreq_),
  };
  t_FriendDatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_FriendDatas_descriptor_,
      t_FriendDatas::default_instance_,
      t_FriendDatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendDatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendDatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_FriendDatas));
  t_MailDatas_descriptor_ = file->message_type(4);
  static const int t_MailDatas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailDatas, mails_),
  };
  t_MailDatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_MailDatas_descriptor_,
      t_MailDatas::default_instance_,
      t_MailDatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailDatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailDatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_MailDatas));
  t_BankDatas_descriptor_ = file->message_type(5);
  static const int t_BankDatas_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_BankDatas, havepwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_BankDatas, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_BankDatas, money_),
  };
  t_BankDatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_BankDatas_descriptor_,
      t_BankDatas::default_instance_,
      t_BankDatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_BankDatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_BankDatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_BankDatas));
  t_playerBaseData_descriptor_ = file->message_type(6);
  static const int t_playerBaseData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_playerBaseData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_playerBaseData, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_playerBaseData, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_playerBaseData, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_playerBaseData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_playerBaseData, bankdata_),
  };
  t_playerBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_playerBaseData_descriptor_,
      t_playerBaseData::default_instance_,
      t_playerBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_playerBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_playerBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_playerBaseData));
  SD_LoadData_descriptor_ = file->message_type(7);
  static const int SD_LoadData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_LoadData, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_LoadData, m_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_LoadData, m_svrnodeid_),
  };
  SD_LoadData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD_LoadData_descriptor_,
      SD_LoadData::default_instance_,
      SD_LoadData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_LoadData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_LoadData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD_LoadData));
  DS_PlayerData_descriptor_ = file->message_type(8);
  static const int DS_PlayerData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_PlayerData, m_rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_PlayerData, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_PlayerData, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_PlayerData, m_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_PlayerData, m_svrnodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_PlayerData, m_playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_PlayerData, m_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_PlayerData, m_mail_),
  };
  DS_PlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DS_PlayerData_descriptor_,
      DS_PlayerData::default_instance_,
      DS_PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_PlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_PlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DS_PlayerData));
  SD_InsertPlayer_descriptor_ = file->message_type(9);
  static const int SD_InsertPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_InsertPlayer, m_accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_InsertPlayer, m_data_),
  };
  SD_InsertPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD_InsertPlayer_descriptor_,
      SD_InsertPlayer::default_instance_,
      SD_InsertPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_InsertPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_InsertPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD_InsertPlayer));
  SD_SavePlayer_descriptor_ = file->message_type(10);
  static const int SD_SavePlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_SavePlayer, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_SavePlayer, m_data_),
  };
  SD_SavePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD_SavePlayer_descriptor_,
      SD_SavePlayer::default_instance_,
      SD_SavePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_SavePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_SavePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD_SavePlayer));
  param_FindPlayer_descriptor_ = file->message_type(11);
  static const int param_FindPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(param_FindPlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(param_FindPlayer, selectplayerid_),
  };
  param_FindPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      param_FindPlayer_descriptor_,
      param_FindPlayer::default_instance_,
      param_FindPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(param_FindPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(param_FindPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(param_FindPlayer));
  SD_FindPlayer_descriptor_ = file->message_type(12);
  static const int SD_FindPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_FindPlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_FindPlayer, param_),
  };
  SD_FindPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SD_FindPlayer_descriptor_,
      SD_FindPlayer::default_instance_,
      SD_FindPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_FindPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SD_FindPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SD_FindPlayer));
  DS_FindPlayerRst_descriptor_ = file->message_type(13);
  static const int DS_FindPlayerRst_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_FindPlayerRst, bfind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_FindPlayerRst, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_FindPlayerRst, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_FindPlayerRst, headid_),
  };
  DS_FindPlayerRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DS_FindPlayerRst_descriptor_,
      DS_FindPlayerRst::default_instance_,
      DS_FindPlayerRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_FindPlayerRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DS_FindPlayerRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DS_FindPlayerRst));
  emPacket_Db_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Packet_5fDB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_FriendItemData_descriptor_, &t_FriendItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_MailItemData_descriptor_, &t_MailItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_FriendReqItemData_descriptor_, &t_FriendReqItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_FriendDatas_descriptor_, &t_FriendDatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_MailDatas_descriptor_, &t_MailDatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_BankDatas_descriptor_, &t_BankDatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_playerBaseData_descriptor_, &t_playerBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD_LoadData_descriptor_, &SD_LoadData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DS_PlayerData_descriptor_, &DS_PlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD_InsertPlayer_descriptor_, &SD_InsertPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD_SavePlayer_descriptor_, &SD_SavePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    param_FindPlayer_descriptor_, &param_FindPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SD_FindPlayer_descriptor_, &SD_FindPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DS_FindPlayerRst_descriptor_, &DS_FindPlayerRst::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Packet_5fDB_2eproto() {
  delete t_FriendItemData::default_instance_;
  delete t_FriendItemData_reflection_;
  delete t_MailItemData::default_instance_;
  delete t_MailItemData_reflection_;
  delete t_FriendReqItemData::default_instance_;
  delete t_FriendReqItemData_reflection_;
  delete t_FriendDatas::default_instance_;
  delete t_FriendDatas_reflection_;
  delete t_MailDatas::default_instance_;
  delete t_MailDatas_reflection_;
  delete t_BankDatas::default_instance_;
  delete t_BankDatas_reflection_;
  delete t_playerBaseData::default_instance_;
  delete t_playerBaseData_reflection_;
  delete SD_LoadData::default_instance_;
  delete SD_LoadData_reflection_;
  delete DS_PlayerData::default_instance_;
  delete DS_PlayerData_reflection_;
  delete SD_InsertPlayer::default_instance_;
  delete SD_InsertPlayer_reflection_;
  delete SD_SavePlayer::default_instance_;
  delete SD_SavePlayer_reflection_;
  delete param_FindPlayer::default_instance_;
  delete param_FindPlayer_reflection_;
  delete SD_FindPlayer::default_instance_;
  delete SD_FindPlayer_reflection_;
  delete DS_FindPlayerRst::default_instance_;
  delete DS_FindPlayerRst_reflection_;
}

void protobuf_AddDesc_Packet_5fDB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rpc::protobuf_AddDesc_Packet_5fBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Packet_DB.proto\022\003rpc\032\021Packet_Base.prot"
    "o\"Q\n\020t_FriendItemData\022\020\n\010playerid\030\001 \002(\005\022"
    "\014\n\004name\030\002 \002(\t\022\016\n\006headid\030\003 \002(\005\022\r\n\005money\030\004"
    " \002(\003\">\n\016t_MailItemData\022\r\n\005title\030\001 \002(\t\022\017\n"
    "\007content\030\002 \002(\t\022\014\n\004time\030\003 \002(\r\"b\n\023t_Friend"
    "ReqItemData\022\020\n\010playerid\030\001 \002(\005\022\014\n\004name\030\002 "
    "\002(\t\022\016\n\006headid\030\003 \002(\005\022\014\n\004time\030\004 \002(\r\022\r\n\005mon"
    "ey\030\005 \002(\003\"d\n\rt_FriendDatas\022&\n\007friends\030\001 \003"
    "(\0132\025.rpc.t_FriendItemData\022+\n\tfriendreq\030\002"
    " \003(\0132\030.rpc.t_FriendReqItemData\"1\n\013t_Mail"
    "Datas\022\"\n\005mails\030\001 \003(\0132\023.rpc.t_MailItemDat"
    "a\":\n\013t_BankDatas\022\017\n\007havepwd\030\001 \002(\010\022\013\n\003pwd"
    "\030\002 \002(\t\022\r\n\005money\030\003 \002(\003\"\207\001\n\020t_playerBaseDa"
    "ta\022\020\n\010nickname\030\001 \002(\t\022\021\n\taccountid\030\002 \002(\t\022"
    "\016\n\006headid\030\003 \002(\005\022\r\n\005money\030\004 \002(\003\022\013\n\003sex\030\005 "
    "\002(\005\022\"\n\010bankdata\030\006 \001(\0132\020.rpc.t_BankDatas\""
    "H\n\013SD_LoadData\022\023\n\013m_accountid\030\001 \002(\t\022\017\n\007m"
    "_param\030\002 \002(\004\022\023\n\013m_svrnodeid\030\003 \002(\005\"\342\001\n\rDS"
    "_PlayerData\022\r\n\005m_rst\030\001 \002(\005\022\022\n\nm_playerid"
    "\030\002 \002(\r\022\023\n\013m_accountid\030\003 \002(\t\022\017\n\007m_param\030\004"
    " \002(\004\022\023\n\013m_svrnodeid\030\005 \002(\005\022+\n\014m_playerinf"
    "o\030\006 \001(\0132\025.rpc.t_playerBaseData\022$\n\010m_frie"
    "nd\030\007 \001(\0132\022.rpc.t_FriendDatas\022 \n\006m_mail\030\010"
    " \001(\0132\020.rpc.t_MailDatas\"M\n\017SD_InsertPlaye"
    "r\022\023\n\013m_accountid\030\001 \002(\t\022%\n\006m_data\030\002 \002(\0132\025"
    ".rpc.t_playerBaseData\"J\n\rSD_SavePlayer\022\022"
    "\n\nm_playerid\030\001 \002(\r\022%\n\006m_data\030\002 \002(\0132\025.rpc"
    ".t_playerBaseData\"<\n\020param_FindPlayer\022\020\n"
    "\010playerId\030\001 \002(\r\022\026\n\016selectPlayerId\030\002 \002(\r\""
    "G\n\rSD_FindPlayer\022\020\n\010playerid\030\001 \002(\r\022$\n\005pa"
    "ram\030\002 \002(\0132\025.rpc.param_FindPlayer\"e\n\020DS_F"
    "indPlayerRst\022\r\n\005bfind\030\001 \002(\r\022$\n\005param\030\002 \002"
    "(\0132\025.rpc.param_FindPlayer\022\014\n\004name\030\003 \001(\t\022"
    "\016\n\006headid\030\004 \001(\005*\224\001\n\013emPacket_Db\022\022\n\016em_SD"
    "_LoadData\020P\022\024\n\020em_DS_PlayerData\020Q\022\026\n\022em_"
    "SD_InsertPlayer\020R\022\024\n\020em_SD_SavePlayer\020S\022"
    "\024\n\020em_SD_FindPlayer\020T\022\027\n\023em_DS_FindPlaye"
    "rRst\020U", 1486);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Packet_DB.proto", &protobuf_RegisterTypes);
  t_FriendItemData::default_instance_ = new t_FriendItemData();
  t_MailItemData::default_instance_ = new t_MailItemData();
  t_FriendReqItemData::default_instance_ = new t_FriendReqItemData();
  t_FriendDatas::default_instance_ = new t_FriendDatas();
  t_MailDatas::default_instance_ = new t_MailDatas();
  t_BankDatas::default_instance_ = new t_BankDatas();
  t_playerBaseData::default_instance_ = new t_playerBaseData();
  SD_LoadData::default_instance_ = new SD_LoadData();
  DS_PlayerData::default_instance_ = new DS_PlayerData();
  SD_InsertPlayer::default_instance_ = new SD_InsertPlayer();
  SD_SavePlayer::default_instance_ = new SD_SavePlayer();
  param_FindPlayer::default_instance_ = new param_FindPlayer();
  SD_FindPlayer::default_instance_ = new SD_FindPlayer();
  DS_FindPlayerRst::default_instance_ = new DS_FindPlayerRst();
  t_FriendItemData::default_instance_->InitAsDefaultInstance();
  t_MailItemData::default_instance_->InitAsDefaultInstance();
  t_FriendReqItemData::default_instance_->InitAsDefaultInstance();
  t_FriendDatas::default_instance_->InitAsDefaultInstance();
  t_MailDatas::default_instance_->InitAsDefaultInstance();
  t_BankDatas::default_instance_->InitAsDefaultInstance();
  t_playerBaseData::default_instance_->InitAsDefaultInstance();
  SD_LoadData::default_instance_->InitAsDefaultInstance();
  DS_PlayerData::default_instance_->InitAsDefaultInstance();
  SD_InsertPlayer::default_instance_->InitAsDefaultInstance();
  SD_SavePlayer::default_instance_->InitAsDefaultInstance();
  param_FindPlayer::default_instance_->InitAsDefaultInstance();
  SD_FindPlayer::default_instance_->InitAsDefaultInstance();
  DS_FindPlayerRst::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Packet_5fDB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Packet_5fDB_2eproto {
  StaticDescriptorInitializer_Packet_5fDB_2eproto() {
    protobuf_AddDesc_Packet_5fDB_2eproto();
  }
} static_descriptor_initializer_Packet_5fDB_2eproto_;
const ::google::protobuf::EnumDescriptor* emPacket_Db_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emPacket_Db_descriptor_;
}
bool emPacket_Db_IsValid(int value) {
  switch(value) {
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int t_FriendItemData::kPlayeridFieldNumber;
const int t_FriendItemData::kNameFieldNumber;
const int t_FriendItemData::kHeadidFieldNumber;
const int t_FriendItemData::kMoneyFieldNumber;
#endif  // !_MSC_VER

t_FriendItemData::t_FriendItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_FriendItemData::InitAsDefaultInstance() {
}

t_FriendItemData::t_FriendItemData(const t_FriendItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_FriendItemData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_FriendItemData::~t_FriendItemData() {
  SharedDtor();
}

void t_FriendItemData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void t_FriendItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_FriendItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_FriendItemData_descriptor_;
}

const t_FriendItemData& t_FriendItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

t_FriendItemData* t_FriendItemData::default_instance_ = NULL;

t_FriendItemData* t_FriendItemData::New() const {
  return new t_FriendItemData;
}

void t_FriendItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_FriendItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // required int32 headid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // required int64 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_FriendItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  // required int64 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_FriendItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  // required int64 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_FriendItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // required int64 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_FriendItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_FriendItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_FriendItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_FriendItemData::MergeFrom(const t_FriendItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_FriendItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_FriendItemData::CopyFrom(const t_FriendItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_FriendItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void t_FriendItemData::Swap(t_FriendItemData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_FriendItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_FriendItemData_descriptor_;
  metadata.reflection = t_FriendItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_MailItemData::kTitleFieldNumber;
const int t_MailItemData::kContentFieldNumber;
const int t_MailItemData::kTimeFieldNumber;
#endif  // !_MSC_VER

t_MailItemData::t_MailItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_MailItemData::InitAsDefaultInstance() {
}

t_MailItemData::t_MailItemData(const t_MailItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_MailItemData::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_MailItemData::~t_MailItemData() {
  SharedDtor();
}

void t_MailItemData::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void t_MailItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_MailItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_MailItemData_descriptor_;
}

const t_MailItemData& t_MailItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

t_MailItemData* t_MailItemData::default_instance_ = NULL;

t_MailItemData* t_MailItemData::New() const {
  return new t_MailItemData;
}

void t_MailItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_MailItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_MailItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_MailItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_MailItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_MailItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_MailItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_MailItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_MailItemData::MergeFrom(const t_MailItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_MailItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_MailItemData::CopyFrom(const t_MailItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_MailItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void t_MailItemData::Swap(t_MailItemData* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_MailItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_MailItemData_descriptor_;
  metadata.reflection = t_MailItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_FriendReqItemData::kPlayeridFieldNumber;
const int t_FriendReqItemData::kNameFieldNumber;
const int t_FriendReqItemData::kHeadidFieldNumber;
const int t_FriendReqItemData::kTimeFieldNumber;
const int t_FriendReqItemData::kMoneyFieldNumber;
#endif  // !_MSC_VER

t_FriendReqItemData::t_FriendReqItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_FriendReqItemData::InitAsDefaultInstance() {
}

t_FriendReqItemData::t_FriendReqItemData(const t_FriendReqItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_FriendReqItemData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  time_ = 0u;
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_FriendReqItemData::~t_FriendReqItemData() {
  SharedDtor();
}

void t_FriendReqItemData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void t_FriendReqItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_FriendReqItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_FriendReqItemData_descriptor_;
}

const t_FriendReqItemData& t_FriendReqItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

t_FriendReqItemData* t_FriendReqItemData::default_instance_ = NULL;

t_FriendReqItemData* t_FriendReqItemData::New() const {
  return new t_FriendReqItemData;
}

void t_FriendReqItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
    time_ = 0u;
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_FriendReqItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // required int32 headid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // required int64 money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_FriendReqItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  // required uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // required int64 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_FriendReqItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  // required uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // required int64 money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_FriendReqItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // required uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required int64 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_FriendReqItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_FriendReqItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_FriendReqItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_FriendReqItemData::MergeFrom(const t_FriendReqItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_FriendReqItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_FriendReqItemData::CopyFrom(const t_FriendReqItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_FriendReqItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void t_FriendReqItemData::Swap(t_FriendReqItemData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(time_, other->time_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_FriendReqItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_FriendReqItemData_descriptor_;
  metadata.reflection = t_FriendReqItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_FriendDatas::kFriendsFieldNumber;
const int t_FriendDatas::kFriendreqFieldNumber;
#endif  // !_MSC_VER

t_FriendDatas::t_FriendDatas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_FriendDatas::InitAsDefaultInstance() {
}

t_FriendDatas::t_FriendDatas(const t_FriendDatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_FriendDatas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_FriendDatas::~t_FriendDatas() {
  SharedDtor();
}

void t_FriendDatas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t_FriendDatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_FriendDatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_FriendDatas_descriptor_;
}

const t_FriendDatas& t_FriendDatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

t_FriendDatas* t_FriendDatas::default_instance_ = NULL;

t_FriendDatas* t_FriendDatas::New() const {
  return new t_FriendDatas;
}

void t_FriendDatas::Clear() {
  friends_.Clear();
  friendreq_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_FriendDatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.t_FriendItemData friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectTag(18)) goto parse_friendreq;
        break;
      }

      // repeated .rpc.t_FriendReqItemData friendreq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendreq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendreq()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendreq;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_FriendDatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.t_FriendItemData friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  // repeated .rpc.t_FriendReqItemData friendreq = 2;
  for (int i = 0; i < this->friendreq_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendreq(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_FriendDatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.t_FriendItemData friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }

  // repeated .rpc.t_FriendReqItemData friendreq = 2;
  for (int i = 0; i < this->friendreq_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendreq(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_FriendDatas::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.t_FriendItemData friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  // repeated .rpc.t_FriendReqItemData friendreq = 2;
  total_size += 1 * this->friendreq_size();
  for (int i = 0; i < this->friendreq_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendreq(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_FriendDatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_FriendDatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_FriendDatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_FriendDatas::MergeFrom(const t_FriendDatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  friendreq_.MergeFrom(from.friendreq_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_FriendDatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_FriendDatas::CopyFrom(const t_FriendDatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_FriendDatas::IsInitialized() const {

  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  for (int i = 0; i < friendreq_size(); i++) {
    if (!this->friendreq(i).IsInitialized()) return false;
  }
  return true;
}

void t_FriendDatas::Swap(t_FriendDatas* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    friendreq_.Swap(&other->friendreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_FriendDatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_FriendDatas_descriptor_;
  metadata.reflection = t_FriendDatas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_MailDatas::kMailsFieldNumber;
#endif  // !_MSC_VER

t_MailDatas::t_MailDatas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_MailDatas::InitAsDefaultInstance() {
}

t_MailDatas::t_MailDatas(const t_MailDatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_MailDatas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_MailDatas::~t_MailDatas() {
  SharedDtor();
}

void t_MailDatas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void t_MailDatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_MailDatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_MailDatas_descriptor_;
}

const t_MailDatas& t_MailDatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

t_MailDatas* t_MailDatas::default_instance_ = NULL;

t_MailDatas* t_MailDatas::New() const {
  return new t_MailDatas;
}

void t_MailDatas::Clear() {
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_MailDatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.t_MailItemData mails = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_MailDatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.t_MailItemData mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_MailDatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.t_MailItemData mails = 1;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_MailDatas::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.t_MailItemData mails = 1;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_MailDatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_MailDatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_MailDatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_MailDatas::MergeFrom(const t_MailDatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_MailDatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_MailDatas::CopyFrom(const t_MailDatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_MailDatas::IsInitialized() const {

  for (int i = 0; i < mails_size(); i++) {
    if (!this->mails(i).IsInitialized()) return false;
  }
  return true;
}

void t_MailDatas::Swap(t_MailDatas* other) {
  if (other != this) {
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_MailDatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_MailDatas_descriptor_;
  metadata.reflection = t_MailDatas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_BankDatas::kHavepwdFieldNumber;
const int t_BankDatas::kPwdFieldNumber;
const int t_BankDatas::kMoneyFieldNumber;
#endif  // !_MSC_VER

t_BankDatas::t_BankDatas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_BankDatas::InitAsDefaultInstance() {
}

t_BankDatas::t_BankDatas(const t_BankDatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_BankDatas::SharedCtor() {
  _cached_size_ = 0;
  havepwd_ = false;
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_BankDatas::~t_BankDatas() {
  SharedDtor();
}

void t_BankDatas::SharedDtor() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void t_BankDatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_BankDatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_BankDatas_descriptor_;
}

const t_BankDatas& t_BankDatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

t_BankDatas* t_BankDatas::default_instance_ = NULL;

t_BankDatas* t_BankDatas::New() const {
  return new t_BankDatas;
}

void t_BankDatas::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    havepwd_ = false;
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_BankDatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool havepwd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &havepwd_)));
          set_has_havepwd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }

      // required string pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // required int64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_BankDatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool havepwd = 1;
  if (has_havepwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->havepwd(), output);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }

  // required int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_BankDatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool havepwd = 1;
  if (has_havepwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->havepwd(), target);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }

  // required int64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_BankDatas::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool havepwd = 1;
    if (has_havepwd()) {
      total_size += 1 + 1;
    }

    // required string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

    // required int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_BankDatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_BankDatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_BankDatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_BankDatas::MergeFrom(const t_BankDatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_havepwd()) {
      set_havepwd(from.havepwd());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_BankDatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_BankDatas::CopyFrom(const t_BankDatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_BankDatas::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void t_BankDatas::Swap(t_BankDatas* other) {
  if (other != this) {
    std::swap(havepwd_, other->havepwd_);
    std::swap(pwd_, other->pwd_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_BankDatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_BankDatas_descriptor_;
  metadata.reflection = t_BankDatas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_playerBaseData::kNicknameFieldNumber;
const int t_playerBaseData::kAccountidFieldNumber;
const int t_playerBaseData::kHeadidFieldNumber;
const int t_playerBaseData::kMoneyFieldNumber;
const int t_playerBaseData::kSexFieldNumber;
const int t_playerBaseData::kBankdataFieldNumber;
#endif  // !_MSC_VER

t_playerBaseData::t_playerBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_playerBaseData::InitAsDefaultInstance() {
  bankdata_ = const_cast< ::rpc::t_BankDatas*>(&::rpc::t_BankDatas::default_instance());
}

t_playerBaseData::t_playerBaseData(const t_playerBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_playerBaseData::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  sex_ = 0;
  bankdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_playerBaseData::~t_playerBaseData() {
  SharedDtor();
}

void t_playerBaseData::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (this != default_instance_) {
    delete bankdata_;
  }
}

void t_playerBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_playerBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_playerBaseData_descriptor_;
}

const t_playerBaseData& t_playerBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

t_playerBaseData* t_playerBaseData::default_instance_ = NULL;

t_playerBaseData* t_playerBaseData::New() const {
  return new t_playerBaseData;
}

void t_playerBaseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::kEmptyString) {
        accountid_->clear();
      }
    }
    headid_ = 0;
    money_ = GOOGLE_LONGLONG(0);
    sex_ = 0;
    if (has_bankdata()) {
      if (bankdata_ != NULL) bankdata_->::rpc::t_BankDatas::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_playerBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accountid;
        break;
      }

      // required string accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // required int32 headid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // required int64 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // required int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bankdata;
        break;
      }

      // optional .rpc.t_BankDatas bankdata = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bankdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_playerBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }

  // required string accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountid(), output);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  // required int64 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->money(), output);
  }

  // required int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional .rpc.t_BankDatas bankdata = 6;
  if (has_bankdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->bankdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_playerBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // required string accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountid(), target);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  // required int64 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->money(), target);
  }

  // required int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional .rpc.t_BankDatas bankdata = 6;
  if (has_bankdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->bankdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_playerBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

    // required int32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // required int64 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // required int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional .rpc.t_BankDatas bankdata = 6;
    if (has_bankdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bankdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_playerBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_playerBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_playerBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_playerBaseData::MergeFrom(const t_playerBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_bankdata()) {
      mutable_bankdata()->::rpc::t_BankDatas::MergeFrom(from.bankdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_playerBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_playerBaseData::CopyFrom(const t_playerBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_playerBaseData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_bankdata()) {
    if (!this->bankdata().IsInitialized()) return false;
  }
  return true;
}

void t_playerBaseData::Swap(t_playerBaseData* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(accountid_, other->accountid_);
    std::swap(headid_, other->headid_);
    std::swap(money_, other->money_);
    std::swap(sex_, other->sex_);
    std::swap(bankdata_, other->bankdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_playerBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_playerBaseData_descriptor_;
  metadata.reflection = t_playerBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD_LoadData::kMAccountidFieldNumber;
const int SD_LoadData::kMParamFieldNumber;
const int SD_LoadData::kMSvrnodeidFieldNumber;
#endif  // !_MSC_VER

SD_LoadData::SD_LoadData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD_LoadData::InitAsDefaultInstance() {
}

SD_LoadData::SD_LoadData(const SD_LoadData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD_LoadData::SharedCtor() {
  _cached_size_ = 0;
  m_accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_param_ = GOOGLE_ULONGLONG(0);
  m_svrnodeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD_LoadData::~SD_LoadData() {
  SharedDtor();
}

void SD_LoadData::SharedDtor() {
  if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accountid_;
  }
  if (this != default_instance_) {
  }
}

void SD_LoadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD_LoadData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD_LoadData_descriptor_;
}

const SD_LoadData& SD_LoadData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

SD_LoadData* SD_LoadData::default_instance_ = NULL;

SD_LoadData* SD_LoadData::New() const {
  return new SD_LoadData;
}

void SD_LoadData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_accountid()) {
      if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
        m_accountid_->clear();
      }
    }
    m_param_ = GOOGLE_ULONGLONG(0);
    m_svrnodeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD_LoadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_accountid().data(), this->m_accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_param;
        break;
      }

      // required uint64 m_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_svrnodeid;
        break;
      }

      // required int32 m_svrnodeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_svrnodeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_svrnodeid_)));
          set_has_m_svrnodeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD_LoadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_accountid = 1;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountid().data(), this->m_accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_accountid(), output);
  }

  // required uint64 m_param = 2;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->m_param(), output);
  }

  // required int32 m_svrnodeid = 3;
  if (has_m_svrnodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_svrnodeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD_LoadData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_accountid = 1;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountid().data(), this->m_accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_accountid(), target);
  }

  // required uint64 m_param = 2;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->m_param(), target);
  }

  // required int32 m_svrnodeid = 3;
  if (has_m_svrnodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_svrnodeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD_LoadData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_accountid = 1;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_accountid());
    }

    // required uint64 m_param = 2;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_param());
    }

    // required int32 m_svrnodeid = 3;
    if (has_m_svrnodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_svrnodeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD_LoadData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD_LoadData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD_LoadData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD_LoadData::MergeFrom(const SD_LoadData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
    if (from.has_m_svrnodeid()) {
      set_m_svrnodeid(from.m_svrnodeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD_LoadData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD_LoadData::CopyFrom(const SD_LoadData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD_LoadData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SD_LoadData::Swap(SD_LoadData* other) {
  if (other != this) {
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_param_, other->m_param_);
    std::swap(m_svrnodeid_, other->m_svrnodeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD_LoadData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD_LoadData_descriptor_;
  metadata.reflection = SD_LoadData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DS_PlayerData::kMRstFieldNumber;
const int DS_PlayerData::kMPlayeridFieldNumber;
const int DS_PlayerData::kMAccountidFieldNumber;
const int DS_PlayerData::kMParamFieldNumber;
const int DS_PlayerData::kMSvrnodeidFieldNumber;
const int DS_PlayerData::kMPlayerinfoFieldNumber;
const int DS_PlayerData::kMFriendFieldNumber;
const int DS_PlayerData::kMMailFieldNumber;
#endif  // !_MSC_VER

DS_PlayerData::DS_PlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DS_PlayerData::InitAsDefaultInstance() {
  m_playerinfo_ = const_cast< ::rpc::t_playerBaseData*>(&::rpc::t_playerBaseData::default_instance());
  m_friend_ = const_cast< ::rpc::t_FriendDatas*>(&::rpc::t_FriendDatas::default_instance());
  m_mail_ = const_cast< ::rpc::t_MailDatas*>(&::rpc::t_MailDatas::default_instance());
}

DS_PlayerData::DS_PlayerData(const DS_PlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DS_PlayerData::SharedCtor() {
  _cached_size_ = 0;
  m_rst_ = 0;
  m_playerid_ = 0u;
  m_accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_param_ = GOOGLE_ULONGLONG(0);
  m_svrnodeid_ = 0;
  m_playerinfo_ = NULL;
  m_friend_ = NULL;
  m_mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DS_PlayerData::~DS_PlayerData() {
  SharedDtor();
}

void DS_PlayerData::SharedDtor() {
  if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accountid_;
  }
  if (this != default_instance_) {
    delete m_playerinfo_;
    delete m_friend_;
    delete m_mail_;
  }
}

void DS_PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DS_PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DS_PlayerData_descriptor_;
}

const DS_PlayerData& DS_PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

DS_PlayerData* DS_PlayerData::default_instance_ = NULL;

DS_PlayerData* DS_PlayerData::New() const {
  return new DS_PlayerData;
}

void DS_PlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rst_ = 0;
    m_playerid_ = 0u;
    if (has_m_accountid()) {
      if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
        m_accountid_->clear();
      }
    }
    m_param_ = GOOGLE_ULONGLONG(0);
    m_svrnodeid_ = 0;
    if (has_m_playerinfo()) {
      if (m_playerinfo_ != NULL) m_playerinfo_->::rpc::t_playerBaseData::Clear();
    }
    if (has_m_friend()) {
      if (m_friend_ != NULL) m_friend_->::rpc::t_FriendDatas::Clear();
    }
    if (has_m_mail()) {
      if (m_mail_ != NULL) m_mail_->::rpc::t_MailDatas::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DS_PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rst_)));
          set_has_m_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // required uint32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_accountid;
        break;
      }

      // required string m_accountid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_accountid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_accountid().data(), this->m_accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_param;
        break;
      }

      // required uint64 m_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_svrnodeid;
        break;
      }

      // required int32 m_svrnodeid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_svrnodeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_svrnodeid_)));
          set_has_m_svrnodeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_playerinfo;
        break;
      }

      // optional .rpc.t_playerBaseData m_playerinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playerinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_friend;
        break;
      }

      // optional .rpc.t_FriendDatas m_friend = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_friend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_mail;
        break;
      }

      // optional .rpc.t_MailDatas m_mail = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DS_PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rst(), output);
  }

  // required uint32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_playerid(), output);
  }

  // required string m_accountid = 3;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountid().data(), this->m_accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_accountid(), output);
  }

  // required uint64 m_param = 4;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->m_param(), output);
  }

  // required int32 m_svrnodeid = 5;
  if (has_m_svrnodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_svrnodeid(), output);
  }

  // optional .rpc.t_playerBaseData m_playerinfo = 6;
  if (has_m_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_playerinfo(), output);
  }

  // optional .rpc.t_FriendDatas m_friend = 7;
  if (has_m_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_friend(), output);
  }

  // optional .rpc.t_MailDatas m_mail = 8;
  if (has_m_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DS_PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rst(), target);
  }

  // required uint32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_playerid(), target);
  }

  // required string m_accountid = 3;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountid().data(), this->m_accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_accountid(), target);
  }

  // required uint64 m_param = 4;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->m_param(), target);
  }

  // required int32 m_svrnodeid = 5;
  if (has_m_svrnodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_svrnodeid(), target);
  }

  // optional .rpc.t_playerBaseData m_playerinfo = 6;
  if (has_m_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_playerinfo(), target);
  }

  // optional .rpc.t_FriendDatas m_friend = 7;
  if (has_m_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_friend(), target);
  }

  // optional .rpc.t_MailDatas m_mail = 8;
  if (has_m_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DS_PlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_rst = 1;
    if (has_m_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rst());
    }

    // required uint32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

    // required string m_accountid = 3;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_accountid());
    }

    // required uint64 m_param = 4;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_param());
    }

    // required int32 m_svrnodeid = 5;
    if (has_m_svrnodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_svrnodeid());
    }

    // optional .rpc.t_playerBaseData m_playerinfo = 6;
    if (has_m_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_playerinfo());
    }

    // optional .rpc.t_FriendDatas m_friend = 7;
    if (has_m_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_friend());
    }

    // optional .rpc.t_MailDatas m_mail = 8;
    if (has_m_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DS_PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DS_PlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DS_PlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DS_PlayerData::MergeFrom(const DS_PlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rst()) {
      set_m_rst(from.m_rst());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
    if (from.has_m_svrnodeid()) {
      set_m_svrnodeid(from.m_svrnodeid());
    }
    if (from.has_m_playerinfo()) {
      mutable_m_playerinfo()->::rpc::t_playerBaseData::MergeFrom(from.m_playerinfo());
    }
    if (from.has_m_friend()) {
      mutable_m_friend()->::rpc::t_FriendDatas::MergeFrom(from.m_friend());
    }
    if (from.has_m_mail()) {
      mutable_m_mail()->::rpc::t_MailDatas::MergeFrom(from.m_mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DS_PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DS_PlayerData::CopyFrom(const DS_PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DS_PlayerData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_m_playerinfo()) {
    if (!this->m_playerinfo().IsInitialized()) return false;
  }
  if (has_m_friend()) {
    if (!this->m_friend().IsInitialized()) return false;
  }
  if (has_m_mail()) {
    if (!this->m_mail().IsInitialized()) return false;
  }
  return true;
}

void DS_PlayerData::Swap(DS_PlayerData* other) {
  if (other != this) {
    std::swap(m_rst_, other->m_rst_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_param_, other->m_param_);
    std::swap(m_svrnodeid_, other->m_svrnodeid_);
    std::swap(m_playerinfo_, other->m_playerinfo_);
    std::swap(m_friend_, other->m_friend_);
    std::swap(m_mail_, other->m_mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DS_PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DS_PlayerData_descriptor_;
  metadata.reflection = DS_PlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD_InsertPlayer::kMAccountidFieldNumber;
const int SD_InsertPlayer::kMDataFieldNumber;
#endif  // !_MSC_VER

SD_InsertPlayer::SD_InsertPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD_InsertPlayer::InitAsDefaultInstance() {
  m_data_ = const_cast< ::rpc::t_playerBaseData*>(&::rpc::t_playerBaseData::default_instance());
}

SD_InsertPlayer::SD_InsertPlayer(const SD_InsertPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD_InsertPlayer::SharedCtor() {
  _cached_size_ = 0;
  m_accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD_InsertPlayer::~SD_InsertPlayer() {
  SharedDtor();
}

void SD_InsertPlayer::SharedDtor() {
  if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accountid_;
  }
  if (this != default_instance_) {
    delete m_data_;
  }
}

void SD_InsertPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD_InsertPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD_InsertPlayer_descriptor_;
}

const SD_InsertPlayer& SD_InsertPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

SD_InsertPlayer* SD_InsertPlayer::default_instance_ = NULL;

SD_InsertPlayer* SD_InsertPlayer::New() const {
  return new SD_InsertPlayer;
}

void SD_InsertPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_accountid()) {
      if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
        m_accountid_->clear();
      }
    }
    if (has_m_data()) {
      if (m_data_ != NULL) m_data_->::rpc::t_playerBaseData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD_InsertPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_accountid().data(), this->m_accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        break;
      }

      // required .rpc.t_playerBaseData m_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD_InsertPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_accountid = 1;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountid().data(), this->m_accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_accountid(), output);
  }

  // required .rpc.t_playerBaseData m_data = 2;
  if (has_m_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD_InsertPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_accountid = 1;
  if (has_m_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_accountid().data(), this->m_accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_accountid(), target);
  }

  // required .rpc.t_playerBaseData m_data = 2;
  if (has_m_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD_InsertPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_accountid = 1;
    if (has_m_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_accountid());
    }

    // required .rpc.t_playerBaseData m_data = 2;
    if (has_m_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD_InsertPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD_InsertPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD_InsertPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD_InsertPlayer::MergeFrom(const SD_InsertPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_accountid()) {
      set_m_accountid(from.m_accountid());
    }
    if (from.has_m_data()) {
      mutable_m_data()->::rpc::t_playerBaseData::MergeFrom(from.m_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD_InsertPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD_InsertPlayer::CopyFrom(const SD_InsertPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD_InsertPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_m_data()) {
    if (!this->m_data().IsInitialized()) return false;
  }
  return true;
}

void SD_InsertPlayer::Swap(SD_InsertPlayer* other) {
  if (other != this) {
    std::swap(m_accountid_, other->m_accountid_);
    std::swap(m_data_, other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD_InsertPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD_InsertPlayer_descriptor_;
  metadata.reflection = SD_InsertPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD_SavePlayer::kMPlayeridFieldNumber;
const int SD_SavePlayer::kMDataFieldNumber;
#endif  // !_MSC_VER

SD_SavePlayer::SD_SavePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD_SavePlayer::InitAsDefaultInstance() {
  m_data_ = const_cast< ::rpc::t_playerBaseData*>(&::rpc::t_playerBaseData::default_instance());
}

SD_SavePlayer::SD_SavePlayer(const SD_SavePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD_SavePlayer::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0u;
  m_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD_SavePlayer::~SD_SavePlayer() {
  SharedDtor();
}

void SD_SavePlayer::SharedDtor() {
  if (this != default_instance_) {
    delete m_data_;
  }
}

void SD_SavePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD_SavePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD_SavePlayer_descriptor_;
}

const SD_SavePlayer& SD_SavePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

SD_SavePlayer* SD_SavePlayer::default_instance_ = NULL;

SD_SavePlayer* SD_SavePlayer::New() const {
  return new SD_SavePlayer;
}

void SD_SavePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0u;
    if (has_m_data()) {
      if (m_data_ != NULL) m_data_->::rpc::t_playerBaseData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD_SavePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_data;
        break;
      }

      // required .rpc.t_playerBaseData m_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD_SavePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_playerid(), output);
  }

  // required .rpc.t_playerBaseData m_data = 2;
  if (has_m_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD_SavePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_playerid(), target);
  }

  // required .rpc.t_playerBaseData m_data = 2;
  if (has_m_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD_SavePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

    // required .rpc.t_playerBaseData m_data = 2;
    if (has_m_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD_SavePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD_SavePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD_SavePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD_SavePlayer::MergeFrom(const SD_SavePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_data()) {
      mutable_m_data()->::rpc::t_playerBaseData::MergeFrom(from.m_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD_SavePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD_SavePlayer::CopyFrom(const SD_SavePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD_SavePlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_m_data()) {
    if (!this->m_data().IsInitialized()) return false;
  }
  return true;
}

void SD_SavePlayer::Swap(SD_SavePlayer* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_data_, other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD_SavePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD_SavePlayer_descriptor_;
  metadata.reflection = SD_SavePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int param_FindPlayer::kPlayerIdFieldNumber;
const int param_FindPlayer::kSelectPlayerIdFieldNumber;
#endif  // !_MSC_VER

param_FindPlayer::param_FindPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void param_FindPlayer::InitAsDefaultInstance() {
}

param_FindPlayer::param_FindPlayer(const param_FindPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void param_FindPlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  selectplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

param_FindPlayer::~param_FindPlayer() {
  SharedDtor();
}

void param_FindPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void param_FindPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* param_FindPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return param_FindPlayer_descriptor_;
}

const param_FindPlayer& param_FindPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

param_FindPlayer* param_FindPlayer::default_instance_ = NULL;

param_FindPlayer* param_FindPlayer::New() const {
  return new param_FindPlayer;
}

void param_FindPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    selectplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool param_FindPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_selectPlayerId;
        break;
      }

      // required uint32 selectPlayerId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selectPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selectplayerid_)));
          set_has_selectplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void param_FindPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 selectPlayerId = 2;
  if (has_selectplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selectplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* param_FindPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 selectPlayerId = 2;
  if (has_selectplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selectplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int param_FindPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 selectPlayerId = 2;
    if (has_selectplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selectplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void param_FindPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const param_FindPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const param_FindPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void param_FindPlayer::MergeFrom(const param_FindPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_selectplayerid()) {
      set_selectplayerid(from.selectplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void param_FindPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void param_FindPlayer::CopyFrom(const param_FindPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool param_FindPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void param_FindPlayer::Swap(param_FindPlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(selectplayerid_, other->selectplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata param_FindPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = param_FindPlayer_descriptor_;
  metadata.reflection = param_FindPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SD_FindPlayer::kPlayeridFieldNumber;
const int SD_FindPlayer::kParamFieldNumber;
#endif  // !_MSC_VER

SD_FindPlayer::SD_FindPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SD_FindPlayer::InitAsDefaultInstance() {
  param_ = const_cast< ::rpc::param_FindPlayer*>(&::rpc::param_FindPlayer::default_instance());
}

SD_FindPlayer::SD_FindPlayer(const SD_FindPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SD_FindPlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SD_FindPlayer::~SD_FindPlayer() {
  SharedDtor();
}

void SD_FindPlayer::SharedDtor() {
  if (this != default_instance_) {
    delete param_;
  }
}

void SD_FindPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SD_FindPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SD_FindPlayer_descriptor_;
}

const SD_FindPlayer& SD_FindPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

SD_FindPlayer* SD_FindPlayer::default_instance_ = NULL;

SD_FindPlayer* SD_FindPlayer::New() const {
  return new SD_FindPlayer;
}

void SD_FindPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_param()) {
      if (param_ != NULL) param_->::rpc::param_FindPlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SD_FindPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }

      // required .rpc.param_FindPlayer param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SD_FindPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .rpc.param_FindPlayer param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SD_FindPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required .rpc.param_FindPlayer param = 2;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SD_FindPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .rpc.param_FindPlayer param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SD_FindPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SD_FindPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SD_FindPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SD_FindPlayer::MergeFrom(const SD_FindPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_param()) {
      mutable_param()->::rpc::param_FindPlayer::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SD_FindPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SD_FindPlayer::CopyFrom(const SD_FindPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SD_FindPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  return true;
}

void SD_FindPlayer::Swap(SD_FindPlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SD_FindPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SD_FindPlayer_descriptor_;
  metadata.reflection = SD_FindPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DS_FindPlayerRst::kBfindFieldNumber;
const int DS_FindPlayerRst::kParamFieldNumber;
const int DS_FindPlayerRst::kNameFieldNumber;
const int DS_FindPlayerRst::kHeadidFieldNumber;
#endif  // !_MSC_VER

DS_FindPlayerRst::DS_FindPlayerRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DS_FindPlayerRst::InitAsDefaultInstance() {
  param_ = const_cast< ::rpc::param_FindPlayer*>(&::rpc::param_FindPlayer::default_instance());
}

DS_FindPlayerRst::DS_FindPlayerRst(const DS_FindPlayerRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DS_FindPlayerRst::SharedCtor() {
  _cached_size_ = 0;
  bfind_ = 0u;
  param_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DS_FindPlayerRst::~DS_FindPlayerRst() {
  SharedDtor();
}

void DS_FindPlayerRst::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete param_;
  }
}

void DS_FindPlayerRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DS_FindPlayerRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DS_FindPlayerRst_descriptor_;
}

const DS_FindPlayerRst& DS_FindPlayerRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fDB_2eproto();
  return *default_instance_;
}

DS_FindPlayerRst* DS_FindPlayerRst::default_instance_ = NULL;

DS_FindPlayerRst* DS_FindPlayerRst::New() const {
  return new DS_FindPlayerRst;
}

void DS_FindPlayerRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bfind_ = 0u;
    if (has_param()) {
      if (param_ != NULL) param_->::rpc::param_FindPlayer::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DS_FindPlayerRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 bfind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bfind_)));
          set_has_bfind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }

      // required .rpc.param_FindPlayer param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headid;
        break;
      }

      // optional int32 headid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DS_FindPlayerRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 bfind = 1;
  if (has_bfind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bfind(), output);
  }

  // required .rpc.param_FindPlayer param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 headid = 4;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DS_FindPlayerRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 bfind = 1;
  if (has_bfind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bfind(), target);
  }

  // required .rpc.param_FindPlayer param = 2;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 headid = 4;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DS_FindPlayerRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 bfind = 1;
    if (has_bfind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bfind());
    }

    // required .rpc.param_FindPlayer param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 headid = 4;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DS_FindPlayerRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DS_FindPlayerRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DS_FindPlayerRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DS_FindPlayerRst::MergeFrom(const DS_FindPlayerRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bfind()) {
      set_bfind(from.bfind());
    }
    if (from.has_param()) {
      mutable_param()->::rpc::param_FindPlayer::MergeFrom(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DS_FindPlayerRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DS_FindPlayerRst::CopyFrom(const DS_FindPlayerRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DS_FindPlayerRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  return true;
}

void DS_FindPlayerRst::Swap(DS_FindPlayerRst* other) {
  if (other != this) {
    std::swap(bfind_, other->bfind_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DS_FindPlayerRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DS_FindPlayerRst_descriptor_;
  metadata.reflection = DS_FindPlayerRst_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
