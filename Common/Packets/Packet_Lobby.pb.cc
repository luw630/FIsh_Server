// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_Lobby.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Packet_Lobby.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* t_RankItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_RankItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_AnnouncementItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_AnnouncementItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_MailItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_MailItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_EnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_EnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_EnterGameRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_EnterGameRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_Rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_RankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_RankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_Announcement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_Announcement_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_MailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_MailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_MailDelItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_MailDelItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* emPacket_Lobby_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Packet_5fLobby_2eproto() {
  protobuf_AddDesc_Packet_5fLobby_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Packet_Lobby.proto");
  GOOGLE_CHECK(file != NULL);
  t_RankItem_descriptor_ = file->message_type(0);
  static const int t_RankItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_RankItem, m_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_RankItem, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_RankItem, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_RankItem, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_RankItem, m_headid_),
  };
  t_RankItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_RankItem_descriptor_,
      t_RankItem::default_instance_,
      t_RankItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_RankItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_RankItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_RankItem));
  t_AnnouncementItem_descriptor_ = file->message_type(1);
  static const int t_AnnouncementItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_AnnouncementItem, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_AnnouncementItem, m_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_AnnouncementItem, m_content_),
  };
  t_AnnouncementItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_AnnouncementItem_descriptor_,
      t_AnnouncementItem::default_instance_,
      t_AnnouncementItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_AnnouncementItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_AnnouncementItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_AnnouncementItem));
  t_MailItem_descriptor_ = file->message_type(2);
  static const int t_MailItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItem, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItem, m_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItem, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItem, m_content_),
  };
  t_MailItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_MailItem_descriptor_,
      t_MailItem::default_instance_,
      t_MailItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_MailItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_MailItem));
  SC_PlayerInfo_descriptor_ = file->message_type(3);
  static const int SC_PlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PlayerInfo, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PlayerInfo, m_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PlayerInfo, m_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PlayerInfo, m_headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PlayerInfo, m_money_),
  };
  SC_PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_PlayerInfo_descriptor_,
      SC_PlayerInfo::default_instance_,
      SC_PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_PlayerInfo));
  CS_EnterGame_descriptor_ = file->message_type(4);
  static const int CS_EnterGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_EnterGame, m_gameid_),
  };
  CS_EnterGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_EnterGame_descriptor_,
      CS_EnterGame::default_instance_,
      CS_EnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_EnterGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_EnterGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_EnterGame));
  SC_EnterGameRst_descriptor_ = file->message_type(5);
  static const int SC_EnterGameRst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_EnterGameRst, m_rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_EnterGameRst, m_gameid_),
  };
  SC_EnterGameRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_EnterGameRst_descriptor_,
      SC_EnterGameRst::default_instance_,
      SC_EnterGameRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_EnterGameRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_EnterGameRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_EnterGameRst));
  CS_Rank_descriptor_ = file->message_type(6);
  static const int CS_Rank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Rank, m_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Rank, m_perpagenum_),
  };
  CS_Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_Rank_descriptor_,
      CS_Rank::default_instance_,
      CS_Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_Rank));
  SC_RankData_descriptor_ = file->message_type(7);
  static const int SC_RankData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RankData, m_data_),
  };
  SC_RankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_RankData_descriptor_,
      SC_RankData::default_instance_,
      SC_RankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_RankData));
  SC_Announcement_descriptor_ = file->message_type(8);
  static const int SC_Announcement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Announcement, m_data_),
  };
  SC_Announcement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_Announcement_descriptor_,
      SC_Announcement::default_instance_,
      SC_Announcement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Announcement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_Announcement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_Announcement));
  SC_MailList_descriptor_ = file->message_type(9);
  static const int SC_MailList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MailList, m_data_),
  };
  SC_MailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_MailList_descriptor_,
      SC_MailList::default_instance_,
      SC_MailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_MailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_MailList));
  CS_MailDelItem_descriptor_ = file->message_type(10);
  static const int CS_MailDelItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MailDelItem, m_id_),
  };
  CS_MailDelItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_MailDelItem_descriptor_,
      CS_MailDelItem::default_instance_,
      CS_MailDelItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MailDelItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_MailDelItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_MailDelItem));
  emPacket_Lobby_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Packet_5fLobby_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_RankItem_descriptor_, &t_RankItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_AnnouncementItem_descriptor_, &t_AnnouncementItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_MailItem_descriptor_, &t_MailItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_PlayerInfo_descriptor_, &SC_PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_EnterGame_descriptor_, &CS_EnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_EnterGameRst_descriptor_, &SC_EnterGameRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_Rank_descriptor_, &CS_Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_RankData_descriptor_, &SC_RankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_Announcement_descriptor_, &SC_Announcement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_MailList_descriptor_, &SC_MailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_MailDelItem_descriptor_, &CS_MailDelItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Packet_5fLobby_2eproto() {
  delete t_RankItem::default_instance_;
  delete t_RankItem_reflection_;
  delete t_AnnouncementItem::default_instance_;
  delete t_AnnouncementItem_reflection_;
  delete t_MailItem::default_instance_;
  delete t_MailItem_reflection_;
  delete SC_PlayerInfo::default_instance_;
  delete SC_PlayerInfo_reflection_;
  delete CS_EnterGame::default_instance_;
  delete CS_EnterGame_reflection_;
  delete SC_EnterGameRst::default_instance_;
  delete SC_EnterGameRst_reflection_;
  delete CS_Rank::default_instance_;
  delete CS_Rank_reflection_;
  delete SC_RankData::default_instance_;
  delete SC_RankData_reflection_;
  delete SC_Announcement::default_instance_;
  delete SC_Announcement_reflection_;
  delete SC_MailList::default_instance_;
  delete SC_MailList_reflection_;
  delete CS_MailDelItem::default_instance_;
  delete CS_MailDelItem_reflection_;
}

void protobuf_AddDesc_Packet_5fLobby_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rpc::protobuf_AddDesc_Packet_5fBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022Packet_Lobby.proto\022\003rpc\032\021Packet_Base.p"
    "roto\"d\n\nt_RankItem\022\017\n\007m_index\030\001 \002(\005\022\022\n\nm"
    "_playerid\030\002 \002(\005\022\016\n\006m_name\030\003 \002(\t\022\017\n\007m_mon"
    "ey\030\004 \002(\004\022\020\n\010m_headid\030\005 \002(\005\"F\n\022t_Announce"
    "mentItem\022\014\n\004m_id\030\001 \002(\005\022\017\n\007m_title\030\002 \002(\t\022"
    "\021\n\tm_content\030\003 \002(\t\"N\n\nt_MailItem\022\014\n\004m_id"
    "\030\001 \002(\005\022\017\n\007m_title\030\002 \002(\t\022\016\n\006m_time\030\003 \002(\005\022"
    "\021\n\tm_content\030\004 \002(\t\"i\n\rSC_PlayerInfo\022\022\n\nm"
    "_playerid\030\001 \002(\005\022\022\n\nm_nickname\030\002 \002(\t\022\r\n\005m"
    "_sex\030\003 \002(\005\022\020\n\010m_headid\030\004 \002(\005\022\017\n\007m_money\030"
    "\005 \002(\003\" \n\014CS_EnterGame\022\020\n\010m_gameid\030\001 \002(\005\""
    "2\n\017SC_EnterGameRst\022\r\n\005m_rst\030\001 \002(\005\022\020\n\010m_g"
    "ameid\030\002 \002(\005\"/\n\007CS_Rank\022\016\n\006m_page\030\001 \002(\005\022\024"
    "\n\014m_perPageNum\030\002 \002(\005\".\n\013SC_RankData\022\037\n\006m"
    "_data\030\001 \003(\0132\017.rpc.t_RankItem\":\n\017SC_Annou"
    "ncement\022\'\n\006m_data\030\001 \003(\0132\027.rpc.t_Announce"
    "mentItem\".\n\013SC_MailList\022\037\n\006m_data\030\001 \003(\0132"
    "\017.rpc.t_MailItem\"\036\n\016CS_MailDelItem\022\014\n\004m_"
    "id\030\001 \002(\005*\341\002\n\016emPacket_Lobby\022\023\n\016em_Lobby_"
    "Begin\020\200\004\022\025\n\020em_CS_PlayerInfo\020\220\004\022\025\n\020em_SC"
    "_PlayerInfo\020\221\004\022\024\n\017em_CS_EnterGame\020\222\004\022\027\n\022"
    "em_SC_EnterGameRst\020\223\004\022\024\n\017em_CS_LeaveGame"
    "\020\224\004\022\027\n\022em_SC_LeaveGameRst\020\225\004\022\017\n\nem_CS_Ra"
    "nk\020\226\004\022\023\n\016em_SC_RankData\020\227\004\022\027\n\022em_CS_Anno"
    "uncement\020\230\004\022\027\n\022em_SC_Announcement\020\231\004\022\026\n\021"
    "em_CS_MailGetList\020\340\004\022\023\n\016em_SC_MailList\020\341"
    "\004\022\026\n\021em_CS_MailDelItem\020\342\004\022\021\n\014em_Lobby_En"
    "d\020\377\005", 1084);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Packet_Lobby.proto", &protobuf_RegisterTypes);
  t_RankItem::default_instance_ = new t_RankItem();
  t_AnnouncementItem::default_instance_ = new t_AnnouncementItem();
  t_MailItem::default_instance_ = new t_MailItem();
  SC_PlayerInfo::default_instance_ = new SC_PlayerInfo();
  CS_EnterGame::default_instance_ = new CS_EnterGame();
  SC_EnterGameRst::default_instance_ = new SC_EnterGameRst();
  CS_Rank::default_instance_ = new CS_Rank();
  SC_RankData::default_instance_ = new SC_RankData();
  SC_Announcement::default_instance_ = new SC_Announcement();
  SC_MailList::default_instance_ = new SC_MailList();
  CS_MailDelItem::default_instance_ = new CS_MailDelItem();
  t_RankItem::default_instance_->InitAsDefaultInstance();
  t_AnnouncementItem::default_instance_->InitAsDefaultInstance();
  t_MailItem::default_instance_->InitAsDefaultInstance();
  SC_PlayerInfo::default_instance_->InitAsDefaultInstance();
  CS_EnterGame::default_instance_->InitAsDefaultInstance();
  SC_EnterGameRst::default_instance_->InitAsDefaultInstance();
  CS_Rank::default_instance_->InitAsDefaultInstance();
  SC_RankData::default_instance_->InitAsDefaultInstance();
  SC_Announcement::default_instance_->InitAsDefaultInstance();
  SC_MailList::default_instance_->InitAsDefaultInstance();
  CS_MailDelItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Packet_5fLobby_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Packet_5fLobby_2eproto {
  StaticDescriptorInitializer_Packet_5fLobby_2eproto() {
    protobuf_AddDesc_Packet_5fLobby_2eproto();
  }
} static_descriptor_initializer_Packet_5fLobby_2eproto_;
const ::google::protobuf::EnumDescriptor* emPacket_Lobby_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emPacket_Lobby_descriptor_;
}
bool emPacket_Lobby_IsValid(int value) {
  switch(value) {
    case 512:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 608:
    case 609:
    case 610:
    case 767:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int t_RankItem::kMIndexFieldNumber;
const int t_RankItem::kMPlayeridFieldNumber;
const int t_RankItem::kMNameFieldNumber;
const int t_RankItem::kMMoneyFieldNumber;
const int t_RankItem::kMHeadidFieldNumber;
#endif  // !_MSC_VER

t_RankItem::t_RankItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_RankItem::InitAsDefaultInstance() {
}

t_RankItem::t_RankItem(const t_RankItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_RankItem::SharedCtor() {
  _cached_size_ = 0;
  m_index_ = 0;
  m_playerid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_money_ = GOOGLE_ULONGLONG(0);
  m_headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_RankItem::~t_RankItem() {
  SharedDtor();
}

void t_RankItem::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void t_RankItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_RankItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_RankItem_descriptor_;
}

const t_RankItem& t_RankItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

t_RankItem* t_RankItem::default_instance_ = NULL;

t_RankItem* t_RankItem::New() const {
  return new t_RankItem;
}

void t_RankItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_index_ = 0;
    m_playerid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_money_ = GOOGLE_ULONGLONG(0);
    m_headid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_RankItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_index_)));
          set_has_m_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // required int32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_name;
        break;
      }

      // required string m_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_money;
        break;
      }

      // required uint64 m_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_headid;
        break;
      }

      // required int32 m_headid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headid_)));
          set_has_m_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_RankItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_index = 1;
  if (has_m_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_index(), output);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_playerid(), output);
  }

  // required string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_name(), output);
  }

  // required uint64 m_money = 4;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->m_money(), output);
  }

  // required int32 m_headid = 5;
  if (has_m_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_RankItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_index = 1;
  if (has_m_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_index(), target);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_playerid(), target);
  }

  // required string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_name(), target);
  }

  // required uint64 m_money = 4;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->m_money(), target);
  }

  // required int32 m_headid = 5;
  if (has_m_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_RankItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_index = 1;
    if (has_m_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_index());
    }

    // required int32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required string m_name = 3;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // required uint64 m_money = 4;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_money());
    }

    // required int32 m_headid = 5;
    if (has_m_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_RankItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_RankItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_RankItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_RankItem::MergeFrom(const t_RankItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_index()) {
      set_m_index(from.m_index());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
    if (from.has_m_headid()) {
      set_m_headid(from.m_headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_RankItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_RankItem::CopyFrom(const t_RankItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_RankItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void t_RankItem::Swap(t_RankItem* other) {
  if (other != this) {
    std::swap(m_index_, other->m_index_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_headid_, other->m_headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_RankItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_RankItem_descriptor_;
  metadata.reflection = t_RankItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_AnnouncementItem::kMIdFieldNumber;
const int t_AnnouncementItem::kMTitleFieldNumber;
const int t_AnnouncementItem::kMContentFieldNumber;
#endif  // !_MSC_VER

t_AnnouncementItem::t_AnnouncementItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_AnnouncementItem::InitAsDefaultInstance() {
}

t_AnnouncementItem::t_AnnouncementItem(const t_AnnouncementItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_AnnouncementItem::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_AnnouncementItem::~t_AnnouncementItem() {
  SharedDtor();
}

void t_AnnouncementItem::SharedDtor() {
  if (m_title_ != &::google::protobuf::internal::kEmptyString) {
    delete m_title_;
  }
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    delete m_content_;
  }
  if (this != default_instance_) {
  }
}

void t_AnnouncementItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_AnnouncementItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_AnnouncementItem_descriptor_;
}

const t_AnnouncementItem& t_AnnouncementItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

t_AnnouncementItem* t_AnnouncementItem::default_instance_ = NULL;

t_AnnouncementItem* t_AnnouncementItem::New() const {
  return new t_AnnouncementItem;
}

void t_AnnouncementItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_title()) {
      if (m_title_ != &::google::protobuf::internal::kEmptyString) {
        m_title_->clear();
      }
    }
    if (has_m_content()) {
      if (m_content_ != &::google::protobuf::internal::kEmptyString) {
        m_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_AnnouncementItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_title;
        break;
      }

      // required string m_title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_title().data(), this->m_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_content;
        break;
      }

      // required string m_content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_content().data(), this->m_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_AnnouncementItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // required string m_title = 2;
  if (has_m_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_title().data(), this->m_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_title(), output);
  }

  // required string m_content = 3;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_AnnouncementItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // required string m_title = 2;
  if (has_m_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_title().data(), this->m_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_title(), target);
  }

  // required string m_content = 3;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_AnnouncementItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // required string m_title = 2;
    if (has_m_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_title());
    }

    // required string m_content = 3;
    if (has_m_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_AnnouncementItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_AnnouncementItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_AnnouncementItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_AnnouncementItem::MergeFrom(const t_AnnouncementItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_title()) {
      set_m_title(from.m_title());
    }
    if (from.has_m_content()) {
      set_m_content(from.m_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_AnnouncementItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_AnnouncementItem::CopyFrom(const t_AnnouncementItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_AnnouncementItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void t_AnnouncementItem::Swap(t_AnnouncementItem* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_title_, other->m_title_);
    std::swap(m_content_, other->m_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_AnnouncementItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_AnnouncementItem_descriptor_;
  metadata.reflection = t_AnnouncementItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_MailItem::kMIdFieldNumber;
const int t_MailItem::kMTitleFieldNumber;
const int t_MailItem::kMTimeFieldNumber;
const int t_MailItem::kMContentFieldNumber;
#endif  // !_MSC_VER

t_MailItem::t_MailItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_MailItem::InitAsDefaultInstance() {
}

t_MailItem::t_MailItem(const t_MailItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_MailItem::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_time_ = 0;
  m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_MailItem::~t_MailItem() {
  SharedDtor();
}

void t_MailItem::SharedDtor() {
  if (m_title_ != &::google::protobuf::internal::kEmptyString) {
    delete m_title_;
  }
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    delete m_content_;
  }
  if (this != default_instance_) {
  }
}

void t_MailItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_MailItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_MailItem_descriptor_;
}

const t_MailItem& t_MailItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

t_MailItem* t_MailItem::default_instance_ = NULL;

t_MailItem* t_MailItem::New() const {
  return new t_MailItem;
}

void t_MailItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_title()) {
      if (m_title_ != &::google::protobuf::internal::kEmptyString) {
        m_title_->clear();
      }
    }
    m_time_ = 0;
    if (has_m_content()) {
      if (m_content_ != &::google::protobuf::internal::kEmptyString) {
        m_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_MailItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_title;
        break;
      }

      // required string m_title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_title().data(), this->m_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_time;
        break;
      }

      // required int32 m_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_content;
        break;
      }

      // required string m_content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_content().data(), this->m_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_MailItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // required string m_title = 2;
  if (has_m_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_title().data(), this->m_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_title(), output);
  }

  // required int32 m_time = 3;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_time(), output);
  }

  // required string m_content = 4;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_MailItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // required string m_title = 2;
  if (has_m_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_title().data(), this->m_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_title(), target);
  }

  // required int32 m_time = 3;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_time(), target);
  }

  // required string m_content = 4;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_MailItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // required string m_title = 2;
    if (has_m_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_title());
    }

    // required int32 m_time = 3;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

    // required string m_content = 4;
    if (has_m_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_MailItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_MailItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_MailItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_MailItem::MergeFrom(const t_MailItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_title()) {
      set_m_title(from.m_title());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
    if (from.has_m_content()) {
      set_m_content(from.m_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_MailItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_MailItem::CopyFrom(const t_MailItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_MailItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void t_MailItem::Swap(t_MailItem* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_title_, other->m_title_);
    std::swap(m_time_, other->m_time_);
    std::swap(m_content_, other->m_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_MailItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_MailItem_descriptor_;
  metadata.reflection = t_MailItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_PlayerInfo::kMPlayeridFieldNumber;
const int SC_PlayerInfo::kMNicknameFieldNumber;
const int SC_PlayerInfo::kMSexFieldNumber;
const int SC_PlayerInfo::kMHeadidFieldNumber;
const int SC_PlayerInfo::kMMoneyFieldNumber;
#endif  // !_MSC_VER

SC_PlayerInfo::SC_PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_PlayerInfo::InitAsDefaultInstance() {
}

SC_PlayerInfo::SC_PlayerInfo(const SC_PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0;
  m_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_sex_ = 0;
  m_headid_ = 0;
  m_money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_PlayerInfo::~SC_PlayerInfo() {
  SharedDtor();
}

void SC_PlayerInfo::SharedDtor() {
  if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_nickname_;
  }
  if (this != default_instance_) {
  }
}

void SC_PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_PlayerInfo_descriptor_;
}

const SC_PlayerInfo& SC_PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

SC_PlayerInfo* SC_PlayerInfo::default_instance_ = NULL;

SC_PlayerInfo* SC_PlayerInfo::New() const {
  return new SC_PlayerInfo;
}

void SC_PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0;
    if (has_m_nickname()) {
      if (m_nickname_ != &::google::protobuf::internal::kEmptyString) {
        m_nickname_->clear();
      }
    }
    m_sex_ = 0;
    m_headid_ = 0;
    m_money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_nickname;
        break;
      }

      // required string m_nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_nickname().data(), this->m_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_sex;
        break;
      }

      // required int32 m_sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sex_)));
          set_has_m_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_headid;
        break;
      }

      // required int32 m_headid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headid_)));
          set_has_m_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_money;
        break;
      }

      // required int64 m_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playerid(), output);
  }

  // required string m_nickname = 2;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_nickname(), output);
  }

  // required int32 m_sex = 3;
  if (has_m_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_sex(), output);
  }

  // required int32 m_headid = 4;
  if (has_m_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_headid(), output);
  }

  // required int64 m_money = 5;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playerid(), target);
  }

  // required string m_nickname = 2;
  if (has_m_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_nickname().data(), this->m_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_nickname(), target);
  }

  // required int32 m_sex = 3;
  if (has_m_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_sex(), target);
  }

  // required int32 m_headid = 4;
  if (has_m_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_headid(), target);
  }

  // required int64 m_money = 5;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required string m_nickname = 2;
    if (has_m_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_nickname());
    }

    // required int32 m_sex = 3;
    if (has_m_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sex());
    }

    // required int32 m_headid = 4;
    if (has_m_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headid());
    }

    // required int64 m_money = 5;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_PlayerInfo::MergeFrom(const SC_PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_nickname()) {
      set_m_nickname(from.m_nickname());
    }
    if (from.has_m_sex()) {
      set_m_sex(from.m_sex());
    }
    if (from.has_m_headid()) {
      set_m_headid(from.m_headid());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_PlayerInfo::CopyFrom(const SC_PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SC_PlayerInfo::Swap(SC_PlayerInfo* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_nickname_, other->m_nickname_);
    std::swap(m_sex_, other->m_sex_);
    std::swap(m_headid_, other->m_headid_);
    std::swap(m_money_, other->m_money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_PlayerInfo_descriptor_;
  metadata.reflection = SC_PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_EnterGame::kMGameidFieldNumber;
#endif  // !_MSC_VER

CS_EnterGame::CS_EnterGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_EnterGame::InitAsDefaultInstance() {
}

CS_EnterGame::CS_EnterGame(const CS_EnterGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_EnterGame::SharedCtor() {
  _cached_size_ = 0;
  m_gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_EnterGame::~CS_EnterGame() {
  SharedDtor();
}

void CS_EnterGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_EnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_EnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_EnterGame_descriptor_;
}

const CS_EnterGame& CS_EnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

CS_EnterGame* CS_EnterGame::default_instance_ = NULL;

CS_EnterGame* CS_EnterGame::New() const {
  return new CS_EnterGame;
}

void CS_EnterGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_EnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gameid_)));
          set_has_m_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_EnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_gameid = 1;
  if (has_m_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_EnterGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_gameid = 1;
  if (has_m_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_EnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_gameid = 1;
    if (has_m_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_EnterGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_EnterGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_EnterGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_EnterGame::MergeFrom(const CS_EnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_gameid()) {
      set_m_gameid(from.m_gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_EnterGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_EnterGame::CopyFrom(const CS_EnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_EnterGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_EnterGame::Swap(CS_EnterGame* other) {
  if (other != this) {
    std::swap(m_gameid_, other->m_gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_EnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_EnterGame_descriptor_;
  metadata.reflection = CS_EnterGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_EnterGameRst::kMRstFieldNumber;
const int SC_EnterGameRst::kMGameidFieldNumber;
#endif  // !_MSC_VER

SC_EnterGameRst::SC_EnterGameRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_EnterGameRst::InitAsDefaultInstance() {
}

SC_EnterGameRst::SC_EnterGameRst(const SC_EnterGameRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_EnterGameRst::SharedCtor() {
  _cached_size_ = 0;
  m_rst_ = 0;
  m_gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_EnterGameRst::~SC_EnterGameRst() {
  SharedDtor();
}

void SC_EnterGameRst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_EnterGameRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_EnterGameRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_EnterGameRst_descriptor_;
}

const SC_EnterGameRst& SC_EnterGameRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

SC_EnterGameRst* SC_EnterGameRst::default_instance_ = NULL;

SC_EnterGameRst* SC_EnterGameRst::New() const {
  return new SC_EnterGameRst;
}

void SC_EnterGameRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rst_ = 0;
    m_gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_EnterGameRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rst_)));
          set_has_m_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gameid;
        break;
      }

      // required int32 m_gameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gameid_)));
          set_has_m_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_EnterGameRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rst(), output);
  }

  // required int32 m_gameid = 2;
  if (has_m_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_EnterGameRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rst(), target);
  }

  // required int32 m_gameid = 2;
  if (has_m_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_EnterGameRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_rst = 1;
    if (has_m_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rst());
    }

    // required int32 m_gameid = 2;
    if (has_m_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_EnterGameRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_EnterGameRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_EnterGameRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_EnterGameRst::MergeFrom(const SC_EnterGameRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rst()) {
      set_m_rst(from.m_rst());
    }
    if (from.has_m_gameid()) {
      set_m_gameid(from.m_gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_EnterGameRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_EnterGameRst::CopyFrom(const SC_EnterGameRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_EnterGameRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC_EnterGameRst::Swap(SC_EnterGameRst* other) {
  if (other != this) {
    std::swap(m_rst_, other->m_rst_);
    std::swap(m_gameid_, other->m_gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_EnterGameRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_EnterGameRst_descriptor_;
  metadata.reflection = SC_EnterGameRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_Rank::kMPageFieldNumber;
const int CS_Rank::kMPerPageNumFieldNumber;
#endif  // !_MSC_VER

CS_Rank::CS_Rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_Rank::InitAsDefaultInstance() {
}

CS_Rank::CS_Rank(const CS_Rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_Rank::SharedCtor() {
  _cached_size_ = 0;
  m_page_ = 0;
  m_perpagenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_Rank::~CS_Rank() {
  SharedDtor();
}

void CS_Rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_Rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_Rank_descriptor_;
}

const CS_Rank& CS_Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

CS_Rank* CS_Rank::default_instance_ = NULL;

CS_Rank* CS_Rank::New() const {
  return new CS_Rank;
}

void CS_Rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_page_ = 0;
    m_perpagenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_page_)));
          set_has_m_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_perPageNum;
        break;
      }

      // required int32 m_perPageNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_perPageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_perpagenum_)));
          set_has_m_perpagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_page = 1;
  if (has_m_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_page(), output);
  }

  // required int32 m_perPageNum = 2;
  if (has_m_perpagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_perpagenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_page = 1;
  if (has_m_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_page(), target);
  }

  // required int32 m_perPageNum = 2;
  if (has_m_perpagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_perpagenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_Rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_page = 1;
    if (has_m_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_page());
    }

    // required int32 m_perPageNum = 2;
    if (has_m_perpagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_perpagenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_Rank::MergeFrom(const CS_Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_page()) {
      set_m_page(from.m_page());
    }
    if (from.has_m_perpagenum()) {
      set_m_perpagenum(from.m_perpagenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_Rank::CopyFrom(const CS_Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Rank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS_Rank::Swap(CS_Rank* other) {
  if (other != this) {
    std::swap(m_page_, other->m_page_);
    std::swap(m_perpagenum_, other->m_perpagenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_Rank_descriptor_;
  metadata.reflection = CS_Rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_RankData::kMDataFieldNumber;
#endif  // !_MSC_VER

SC_RankData::SC_RankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_RankData::InitAsDefaultInstance() {
}

SC_RankData::SC_RankData(const SC_RankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_RankData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_RankData::~SC_RankData() {
  SharedDtor();
}

void SC_RankData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_RankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_RankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_RankData_descriptor_;
}

const SC_RankData& SC_RankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

SC_RankData* SC_RankData::default_instance_ = NULL;

SC_RankData* SC_RankData::New() const {
  return new SC_RankData;
}

void SC_RankData::Clear() {
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_RankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.t_RankItem m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_RankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.t_RankItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_RankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.t_RankItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_RankData::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.t_RankItem m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_RankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_RankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_RankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_RankData::MergeFrom(const SC_RankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_RankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_RankData::CopyFrom(const SC_RankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_RankData::IsInitialized() const {

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void SC_RankData::Swap(SC_RankData* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_RankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_RankData_descriptor_;
  metadata.reflection = SC_RankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_Announcement::kMDataFieldNumber;
#endif  // !_MSC_VER

SC_Announcement::SC_Announcement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_Announcement::InitAsDefaultInstance() {
}

SC_Announcement::SC_Announcement(const SC_Announcement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_Announcement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_Announcement::~SC_Announcement() {
  SharedDtor();
}

void SC_Announcement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_Announcement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_Announcement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_Announcement_descriptor_;
}

const SC_Announcement& SC_Announcement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

SC_Announcement* SC_Announcement::default_instance_ = NULL;

SC_Announcement* SC_Announcement::New() const {
  return new SC_Announcement;
}

void SC_Announcement::Clear() {
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_Announcement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.t_AnnouncementItem m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_Announcement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.t_AnnouncementItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_Announcement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.t_AnnouncementItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_Announcement::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.t_AnnouncementItem m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_Announcement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_Announcement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_Announcement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_Announcement::MergeFrom(const SC_Announcement& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_Announcement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_Announcement::CopyFrom(const SC_Announcement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_Announcement::IsInitialized() const {

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void SC_Announcement::Swap(SC_Announcement* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_Announcement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_Announcement_descriptor_;
  metadata.reflection = SC_Announcement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_MailList::kMDataFieldNumber;
#endif  // !_MSC_VER

SC_MailList::SC_MailList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_MailList::InitAsDefaultInstance() {
}

SC_MailList::SC_MailList(const SC_MailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_MailList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_MailList::~SC_MailList() {
  SharedDtor();
}

void SC_MailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_MailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_MailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_MailList_descriptor_;
}

const SC_MailList& SC_MailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

SC_MailList* SC_MailList::default_instance_ = NULL;

SC_MailList* SC_MailList::New() const {
  return new SC_MailList;
}

void SC_MailList::Clear() {
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_MailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.t_MailItem m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_MailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.t_MailItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_MailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.t_MailItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_MailList::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.t_MailItem m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_MailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_MailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_MailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_MailList::MergeFrom(const SC_MailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_MailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_MailList::CopyFrom(const SC_MailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_MailList::IsInitialized() const {

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void SC_MailList::Swap(SC_MailList* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_MailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_MailList_descriptor_;
  metadata.reflection = SC_MailList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_MailDelItem::kMIdFieldNumber;
#endif  // !_MSC_VER

CS_MailDelItem::CS_MailDelItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_MailDelItem::InitAsDefaultInstance() {
}

CS_MailDelItem::CS_MailDelItem(const CS_MailDelItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_MailDelItem::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_MailDelItem::~CS_MailDelItem() {
  SharedDtor();
}

void CS_MailDelItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_MailDelItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_MailDelItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_MailDelItem_descriptor_;
}

const CS_MailDelItem& CS_MailDelItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLobby_2eproto();
  return *default_instance_;
}

CS_MailDelItem* CS_MailDelItem::default_instance_ = NULL;

CS_MailDelItem* CS_MailDelItem::New() const {
  return new CS_MailDelItem;
}

void CS_MailDelItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_MailDelItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_MailDelItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_MailDelItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_MailDelItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_MailDelItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_MailDelItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_MailDelItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_MailDelItem::MergeFrom(const CS_MailDelItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_MailDelItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_MailDelItem::CopyFrom(const CS_MailDelItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_MailDelItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_MailDelItem::Swap(CS_MailDelItem* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_MailDelItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_MailDelItem_descriptor_;
  metadata.reflection = CS_MailDelItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
