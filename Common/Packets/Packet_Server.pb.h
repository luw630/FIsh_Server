// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_Server.proto

#ifndef PROTOBUF_Packet_5fServer_2eproto__INCLUDED
#define PROTOBUF_Packet_5fServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Packet_Base.pb.h"
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Packet_5fServer_2eproto();
void protobuf_AssignDesc_Packet_5fServer_2eproto();
void protobuf_ShutdownFile_Packet_5fServer_2eproto();

class Sys_SvrNodeLogin;
class Sys_SvrNodeLoginRst;
class GA_Login;
class AG_LoginRst;
class GA_Offline;
class GGame_Offline;
class AG_KickPlayer;
class AGame_EnterGame;
class GameA_EnterGameRst;
class AGame_LeaveGame;
class GameA_LeaveGameRst;
class Game_Work2Master_UpdateTableData;
class Game_Work2Master_SetPlayerState;
class Friend_ReqAddFriend;
class Friend_AgreeAddFiend;
class Friend_RefuseAddFiend;
class Friend_SendMsg;
class SvrManager_Post;
class SvrManager_Response;

enum emPacket_Server {
  EM_sys_Begin = 16,
  EM_Sys_SvrNodeLogin = 17,
  EM_Sys_SvrNodeLoginRst = 18,
  EM_GA_Login = 19,
  EM_AG_LoginRst = 20,
  EM_AG_KickPlayer = 21,
  EM_AGame_EnterGame = 22,
  EM_GameA_EnterGameRst = 23,
  EM_AGame_LeaveGame = 24,
  EM_GameA_LeaveGameRst = 25,
  EM_Game_Work2Master_UpdateTableData = 26,
  EM_Game_Work2Master_SetPlayerState = 27,
  EM_Friend_ReqAddFriend = 32,
  EM_Friend_AgreeAddFiend = 33,
  EM_Friend_RefuseAddFiend = 34,
  EM_Friend_SendMsg = 35,
  EM_SvrManager_Post = 36,
  EM_SvrManager_Response = 37,
  EM_GA_Offline = 38,
  EM_GGame_Offline = 39,
  EM_sys_End = 255
};
bool emPacket_Server_IsValid(int value);
const emPacket_Server emPacket_Server_MIN = EM_sys_Begin;
const emPacket_Server emPacket_Server_MAX = EM_sys_End;
const int emPacket_Server_ARRAYSIZE = emPacket_Server_MAX + 1;

const ::google::protobuf::EnumDescriptor* emPacket_Server_descriptor();
inline const ::std::string& emPacket_Server_Name(emPacket_Server value) {
  return ::google::protobuf::internal::NameOfEnum(
    emPacket_Server_descriptor(), value);
}
inline bool emPacket_Server_Parse(
    const ::std::string& name, emPacket_Server* value) {
  return ::google::protobuf::internal::ParseNamedEnum<emPacket_Server>(
    emPacket_Server_descriptor(), name, value);
}
// ===================================================================

class Sys_SvrNodeLogin : public ::google::protobuf::Message {
 public:
  Sys_SvrNodeLogin();
  virtual ~Sys_SvrNodeLogin();

  Sys_SvrNodeLogin(const Sys_SvrNodeLogin& from);

  inline Sys_SvrNodeLogin& operator=(const Sys_SvrNodeLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sys_SvrNodeLogin& default_instance();

  void Swap(Sys_SvrNodeLogin* other);

  // implements Message ----------------------------------------------

  Sys_SvrNodeLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sys_SvrNodeLogin& from);
  void MergeFrom(const Sys_SvrNodeLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_nodeid = 1;
  inline bool has_m_nodeid() const;
  inline void clear_m_nodeid();
  static const int kMNodeidFieldNumber = 1;
  inline ::google::protobuf::int32 m_nodeid() const;
  inline void set_m_nodeid(::google::protobuf::int32 value);

  // required string m_key = 2;
  inline bool has_m_key() const;
  inline void clear_m_key();
  static const int kMKeyFieldNumber = 2;
  inline const ::std::string& m_key() const;
  inline void set_m_key(const ::std::string& value);
  inline void set_m_key(const char* value);
  inline void set_m_key(const char* value, size_t size);
  inline ::std::string* mutable_m_key();
  inline ::std::string* release_m_key();
  inline void set_allocated_m_key(::std::string* m_key);

  // @@protoc_insertion_point(class_scope:rpc.Sys_SvrNodeLogin)
 private:
  inline void set_has_m_nodeid();
  inline void clear_has_m_nodeid();
  inline void set_has_m_key();
  inline void clear_has_m_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_key_;
  ::google::protobuf::int32 m_nodeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static Sys_SvrNodeLogin* default_instance_;
};
// -------------------------------------------------------------------

class Sys_SvrNodeLoginRst : public ::google::protobuf::Message {
 public:
  Sys_SvrNodeLoginRst();
  virtual ~Sys_SvrNodeLoginRst();

  Sys_SvrNodeLoginRst(const Sys_SvrNodeLoginRst& from);

  inline Sys_SvrNodeLoginRst& operator=(const Sys_SvrNodeLoginRst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sys_SvrNodeLoginRst& default_instance();

  void Swap(Sys_SvrNodeLoginRst* other);

  // implements Message ----------------------------------------------

  Sys_SvrNodeLoginRst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sys_SvrNodeLoginRst& from);
  void MergeFrom(const Sys_SvrNodeLoginRst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_rst = 1;
  inline bool has_m_rst() const;
  inline void clear_m_rst();
  static const int kMRstFieldNumber = 1;
  inline ::google::protobuf::int32 m_rst() const;
  inline void set_m_rst(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.Sys_SvrNodeLoginRst)
 private:
  inline void set_has_m_rst();
  inline void clear_has_m_rst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_rst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static Sys_SvrNodeLoginRst* default_instance_;
};
// -------------------------------------------------------------------

class GA_Login : public ::google::protobuf::Message {
 public:
  GA_Login();
  virtual ~GA_Login();

  GA_Login(const GA_Login& from);

  inline GA_Login& operator=(const GA_Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GA_Login& default_instance();

  void Swap(GA_Login* other);

  // implements Message ----------------------------------------------

  GA_Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GA_Login& from);
  void MergeFrom(const GA_Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m_account = 1;
  inline bool has_m_account() const;
  inline void clear_m_account();
  static const int kMAccountFieldNumber = 1;
  inline const ::std::string& m_account() const;
  inline void set_m_account(const ::std::string& value);
  inline void set_m_account(const char* value);
  inline void set_m_account(const char* value, size_t size);
  inline ::std::string* mutable_m_account();
  inline ::std::string* release_m_account();
  inline void set_allocated_m_account(::std::string* m_account);

  // required uint64 m_param = 2;
  inline bool has_m_param() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 2;
  inline ::google::protobuf::uint64 m_param() const;
  inline void set_m_param(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rpc.GA_Login)
 private:
  inline void set_has_m_account();
  inline void clear_has_m_account();
  inline void set_has_m_param();
  inline void clear_has_m_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_account_;
  ::google::protobuf::uint64 m_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static GA_Login* default_instance_;
};
// -------------------------------------------------------------------

class AG_LoginRst : public ::google::protobuf::Message {
 public:
  AG_LoginRst();
  virtual ~AG_LoginRst();

  AG_LoginRst(const AG_LoginRst& from);

  inline AG_LoginRst& operator=(const AG_LoginRst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AG_LoginRst& default_instance();

  void Swap(AG_LoginRst* other);

  // implements Message ----------------------------------------------

  AG_LoginRst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AG_LoginRst& from);
  void MergeFrom(const AG_LoginRst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // required uint64 m_param = 2;
  inline bool has_m_param() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 2;
  inline ::google::protobuf::uint64 m_param() const;
  inline void set_m_param(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rpc.AG_LoginRst)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_param();
  inline void clear_has_m_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 m_param_;
  ::google::protobuf::uint32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static AG_LoginRst* default_instance_;
};
// -------------------------------------------------------------------

class GA_Offline : public ::google::protobuf::Message {
 public:
  GA_Offline();
  virtual ~GA_Offline();

  GA_Offline(const GA_Offline& from);

  inline GA_Offline& operator=(const GA_Offline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GA_Offline& default_instance();

  void Swap(GA_Offline* other);

  // implements Message ----------------------------------------------

  GA_Offline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GA_Offline& from);
  void MergeFrom(const GA_Offline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rpc.GA_Offline)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static GA_Offline* default_instance_;
};
// -------------------------------------------------------------------

class GGame_Offline : public ::google::protobuf::Message {
 public:
  GGame_Offline();
  virtual ~GGame_Offline();

  GGame_Offline(const GGame_Offline& from);

  inline GGame_Offline& operator=(const GGame_Offline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GGame_Offline& default_instance();

  void Swap(GGame_Offline* other);

  // implements Message ----------------------------------------------

  GGame_Offline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GGame_Offline& from);
  void MergeFrom(const GGame_Offline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // required uint64 m_sessionid = 2;
  inline bool has_m_sessionid() const;
  inline void clear_m_sessionid();
  static const int kMSessionidFieldNumber = 2;
  inline ::google::protobuf::uint64 m_sessionid() const;
  inline void set_m_sessionid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:rpc.GGame_Offline)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_sessionid();
  inline void clear_has_m_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 m_sessionid_;
  ::google::protobuf::uint32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static GGame_Offline* default_instance_;
};
// -------------------------------------------------------------------

class AG_KickPlayer : public ::google::protobuf::Message {
 public:
  AG_KickPlayer();
  virtual ~AG_KickPlayer();

  AG_KickPlayer(const AG_KickPlayer& from);

  inline AG_KickPlayer& operator=(const AG_KickPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AG_KickPlayer& default_instance();

  void Swap(AG_KickPlayer* other);

  // implements Message ----------------------------------------------

  AG_KickPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AG_KickPlayer& from);
  void MergeFrom(const AG_KickPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rpc.AG_KickPlayer)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static AG_KickPlayer* default_instance_;
};
// -------------------------------------------------------------------

class AGame_EnterGame : public ::google::protobuf::Message {
 public:
  AGame_EnterGame();
  virtual ~AGame_EnterGame();

  AGame_EnterGame(const AGame_EnterGame& from);

  inline AGame_EnterGame& operator=(const AGame_EnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AGame_EnterGame& default_instance();

  void Swap(AGame_EnterGame* other);

  // implements Message ----------------------------------------------

  AGame_EnterGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AGame_EnterGame& from);
  void MergeFrom(const AGame_EnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // required int32 m_gameid = 2;
  inline bool has_m_gameid() const;
  inline void clear_m_gameid();
  static const int kMGameidFieldNumber = 2;
  inline ::google::protobuf::int32 m_gameid() const;
  inline void set_m_gameid(::google::protobuf::int32 value);

  // required int32 m_gatewayid = 3;
  inline bool has_m_gatewayid() const;
  inline void clear_m_gatewayid();
  static const int kMGatewayidFieldNumber = 3;
  inline ::google::protobuf::int32 m_gatewayid() const;
  inline void set_m_gatewayid(::google::protobuf::int32 value);

  // required .rpc.t_EnterGamePlayerData m_playerdata = 4;
  inline bool has_m_playerdata() const;
  inline void clear_m_playerdata();
  static const int kMPlayerdataFieldNumber = 4;
  inline const ::rpc::t_EnterGamePlayerData& m_playerdata() const;
  inline ::rpc::t_EnterGamePlayerData* mutable_m_playerdata();
  inline ::rpc::t_EnterGamePlayerData* release_m_playerdata();
  inline void set_allocated_m_playerdata(::rpc::t_EnterGamePlayerData* m_playerdata);

  // @@protoc_insertion_point(class_scope:rpc.AGame_EnterGame)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_gameid();
  inline void clear_has_m_gameid();
  inline void set_has_m_gatewayid();
  inline void clear_has_m_gatewayid();
  inline void set_has_m_playerdata();
  inline void clear_has_m_playerdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 m_playerid_;
  ::google::protobuf::int32 m_gameid_;
  ::rpc::t_EnterGamePlayerData* m_playerdata_;
  ::google::protobuf::int32 m_gatewayid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static AGame_EnterGame* default_instance_;
};
// -------------------------------------------------------------------

class GameA_EnterGameRst : public ::google::protobuf::Message {
 public:
  GameA_EnterGameRst();
  virtual ~GameA_EnterGameRst();

  GameA_EnterGameRst(const GameA_EnterGameRst& from);

  inline GameA_EnterGameRst& operator=(const GameA_EnterGameRst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameA_EnterGameRst& default_instance();

  void Swap(GameA_EnterGameRst* other);

  // implements Message ----------------------------------------------

  GameA_EnterGameRst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameA_EnterGameRst& from);
  void MergeFrom(const GameA_EnterGameRst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_rst = 1;
  inline bool has_m_rst() const;
  inline void clear_m_rst();
  static const int kMRstFieldNumber = 1;
  inline ::google::protobuf::int32 m_rst() const;
  inline void set_m_rst(::google::protobuf::int32 value);

  // required uint32 m_playerid = 2;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // required int32 m_gameid = 3;
  inline bool has_m_gameid() const;
  inline void clear_m_gameid();
  static const int kMGameidFieldNumber = 3;
  inline ::google::protobuf::int32 m_gameid() const;
  inline void set_m_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.GameA_EnterGameRst)
 private:
  inline void set_has_m_rst();
  inline void clear_has_m_rst();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_gameid();
  inline void clear_has_m_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_rst_;
  ::google::protobuf::uint32 m_playerid_;
  ::google::protobuf::int32 m_gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static GameA_EnterGameRst* default_instance_;
};
// -------------------------------------------------------------------

class AGame_LeaveGame : public ::google::protobuf::Message {
 public:
  AGame_LeaveGame();
  virtual ~AGame_LeaveGame();

  AGame_LeaveGame(const AGame_LeaveGame& from);

  inline AGame_LeaveGame& operator=(const AGame_LeaveGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AGame_LeaveGame& default_instance();

  void Swap(AGame_LeaveGame* other);

  // implements Message ----------------------------------------------

  AGame_LeaveGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AGame_LeaveGame& from);
  void MergeFrom(const AGame_LeaveGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rpc.AGame_LeaveGame)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static AGame_LeaveGame* default_instance_;
};
// -------------------------------------------------------------------

class GameA_LeaveGameRst : public ::google::protobuf::Message {
 public:
  GameA_LeaveGameRst();
  virtual ~GameA_LeaveGameRst();

  GameA_LeaveGameRst(const GameA_LeaveGameRst& from);

  inline GameA_LeaveGameRst& operator=(const GameA_LeaveGameRst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameA_LeaveGameRst& default_instance();

  void Swap(GameA_LeaveGameRst* other);

  // implements Message ----------------------------------------------

  GameA_LeaveGameRst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameA_LeaveGameRst& from);
  void MergeFrom(const GameA_LeaveGameRst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_rst = 1;
  inline bool has_m_rst() const;
  inline void clear_m_rst();
  static const int kMRstFieldNumber = 1;
  inline ::google::protobuf::int32 m_rst() const;
  inline void set_m_rst(::google::protobuf::int32 value);

  // required uint32 m_playerid = 2;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // optional .rpc.t_EnterGamePlayerData m_playerdata = 3;
  inline bool has_m_playerdata() const;
  inline void clear_m_playerdata();
  static const int kMPlayerdataFieldNumber = 3;
  inline const ::rpc::t_EnterGamePlayerData& m_playerdata() const;
  inline ::rpc::t_EnterGamePlayerData* mutable_m_playerdata();
  inline ::rpc::t_EnterGamePlayerData* release_m_playerdata();
  inline void set_allocated_m_playerdata(::rpc::t_EnterGamePlayerData* m_playerdata);

  // @@protoc_insertion_point(class_scope:rpc.GameA_LeaveGameRst)
 private:
  inline void set_has_m_rst();
  inline void clear_has_m_rst();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_playerdata();
  inline void clear_has_m_playerdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_rst_;
  ::google::protobuf::uint32 m_playerid_;
  ::rpc::t_EnterGamePlayerData* m_playerdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static GameA_LeaveGameRst* default_instance_;
};
// -------------------------------------------------------------------

class Game_Work2Master_UpdateTableData : public ::google::protobuf::Message {
 public:
  Game_Work2Master_UpdateTableData();
  virtual ~Game_Work2Master_UpdateTableData();

  Game_Work2Master_UpdateTableData(const Game_Work2Master_UpdateTableData& from);

  inline Game_Work2Master_UpdateTableData& operator=(const Game_Work2Master_UpdateTableData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_Work2Master_UpdateTableData& default_instance();

  void Swap(Game_Work2Master_UpdateTableData* other);

  // implements Message ----------------------------------------------

  Game_Work2Master_UpdateTableData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game_Work2Master_UpdateTableData& from);
  void MergeFrom(const Game_Work2Master_UpdateTableData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rpc.Game_Work2Master_UpdateTableData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static Game_Work2Master_UpdateTableData* default_instance_;
};
// -------------------------------------------------------------------

class Game_Work2Master_SetPlayerState : public ::google::protobuf::Message {
 public:
  Game_Work2Master_SetPlayerState();
  virtual ~Game_Work2Master_SetPlayerState();

  Game_Work2Master_SetPlayerState(const Game_Work2Master_SetPlayerState& from);

  inline Game_Work2Master_SetPlayerState& operator=(const Game_Work2Master_SetPlayerState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Game_Work2Master_SetPlayerState& default_instance();

  void Swap(Game_Work2Master_SetPlayerState* other);

  // implements Message ----------------------------------------------

  Game_Work2Master_SetPlayerState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game_Work2Master_SetPlayerState& from);
  void MergeFrom(const Game_Work2Master_SetPlayerState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // required int32 m_status = 2;
  inline bool has_m_status() const;
  inline void clear_m_status();
  static const int kMStatusFieldNumber = 2;
  inline ::google::protobuf::int32 m_status() const;
  inline void set_m_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.Game_Work2Master_SetPlayerState)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_status();
  inline void clear_has_m_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 m_playerid_;
  ::google::protobuf::int32 m_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static Game_Work2Master_SetPlayerState* default_instance_;
};
// -------------------------------------------------------------------

class Friend_ReqAddFriend : public ::google::protobuf::Message {
 public:
  Friend_ReqAddFriend();
  virtual ~Friend_ReqAddFriend();

  Friend_ReqAddFriend(const Friend_ReqAddFriend& from);

  inline Friend_ReqAddFriend& operator=(const Friend_ReqAddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend_ReqAddFriend& default_instance();

  void Swap(Friend_ReqAddFriend* other);

  // implements Message ----------------------------------------------

  Friend_ReqAddFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend_ReqAddFriend& from);
  void MergeFrom(const Friend_ReqAddFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 headid = 3;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 3;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.Friend_ReqAddFriend)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headid();
  inline void clear_has_headid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::int32 headid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static Friend_ReqAddFriend* default_instance_;
};
// -------------------------------------------------------------------

class Friend_AgreeAddFiend : public ::google::protobuf::Message {
 public:
  Friend_AgreeAddFiend();
  virtual ~Friend_AgreeAddFiend();

  Friend_AgreeAddFiend(const Friend_AgreeAddFiend& from);

  inline Friend_AgreeAddFiend& operator=(const Friend_AgreeAddFiend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend_AgreeAddFiend& default_instance();

  void Swap(Friend_AgreeAddFiend* other);

  // implements Message ----------------------------------------------

  Friend_AgreeAddFiend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend_AgreeAddFiend& from);
  void MergeFrom(const Friend_AgreeAddFiend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 headid = 3;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 3;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // required int64 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rpc.Friend_AgreeAddFiend)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int64 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static Friend_AgreeAddFiend* default_instance_;
};
// -------------------------------------------------------------------

class Friend_RefuseAddFiend : public ::google::protobuf::Message {
 public:
  Friend_RefuseAddFiend();
  virtual ~Friend_RefuseAddFiend();

  Friend_RefuseAddFiend(const Friend_RefuseAddFiend& from);

  inline Friend_RefuseAddFiend& operator=(const Friend_RefuseAddFiend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend_RefuseAddFiend& default_instance();

  void Swap(Friend_RefuseAddFiend* other);

  // implements Message ----------------------------------------------

  Friend_RefuseAddFiend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend_RefuseAddFiend& from);
  void MergeFrom(const Friend_RefuseAddFiend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 headid = 3;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 3;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // required int64 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rpc.Friend_RefuseAddFiend)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int64 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static Friend_RefuseAddFiend* default_instance_;
};
// -------------------------------------------------------------------

class Friend_SendMsg : public ::google::protobuf::Message {
 public:
  Friend_SendMsg();
  virtual ~Friend_SendMsg();

  Friend_SendMsg(const Friend_SendMsg& from);

  inline Friend_SendMsg& operator=(const Friend_SendMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend_SendMsg& default_instance();

  void Swap(Friend_SendMsg* other);

  // implements Message ----------------------------------------------

  Friend_SendMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend_SendMsg& from);
  void MergeFrom(const Friend_SendMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 headid = 3;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 3;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // required string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:rpc.Friend_SendMsg)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::int32 headid_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static Friend_SendMsg* default_instance_;
};
// -------------------------------------------------------------------

class SvrManager_Post : public ::google::protobuf::Message {
 public:
  SvrManager_Post();
  virtual ~SvrManager_Post();

  SvrManager_Post(const SvrManager_Post& from);

  inline SvrManager_Post& operator=(const SvrManager_Post& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrManager_Post& default_instance();

  void Swap(SvrManager_Post* other);

  // implements Message ----------------------------------------------

  SvrManager_Post* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrManager_Post& from);
  void MergeFrom(const SvrManager_Post& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 postid = 1;
  inline bool has_postid() const;
  inline void clear_postid();
  static const int kPostidFieldNumber = 1;
  inline ::google::protobuf::uint64 postid() const;
  inline void set_postid(::google::protobuf::uint64 value);

  // required string cur = 2;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 2;
  inline const ::std::string& cur() const;
  inline void set_cur(const ::std::string& value);
  inline void set_cur(const char* value);
  inline void set_cur(const char* value, size_t size);
  inline ::std::string* mutable_cur();
  inline ::std::string* release_cur();
  inline void set_allocated_cur(::std::string* cur);

  // required string body = 3;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 3;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:rpc.SvrManager_Post)
 private:
  inline void set_has_postid();
  inline void clear_has_postid();
  inline void set_has_cur();
  inline void clear_has_cur();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 postid_;
  ::std::string* cur_;
  ::std::string* body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static SvrManager_Post* default_instance_;
};
// -------------------------------------------------------------------

class SvrManager_Response : public ::google::protobuf::Message {
 public:
  SvrManager_Response();
  virtual ~SvrManager_Response();

  SvrManager_Response(const SvrManager_Response& from);

  inline SvrManager_Response& operator=(const SvrManager_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvrManager_Response& default_instance();

  void Swap(SvrManager_Response* other);

  // implements Message ----------------------------------------------

  SvrManager_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvrManager_Response& from);
  void MergeFrom(const SvrManager_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 postid = 1;
  inline bool has_postid() const;
  inline void clear_postid();
  static const int kPostidFieldNumber = 1;
  inline ::google::protobuf::uint64 postid() const;
  inline void set_postid(::google::protobuf::uint64 value);

  // required string body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:rpc.SvrManager_Response)
 private:
  inline void set_has_postid();
  inline void clear_has_postid();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 postid_;
  ::std::string* body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fServer_2eproto();
  friend void protobuf_AssignDesc_Packet_5fServer_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fServer_2eproto();

  void InitAsDefaultInstance();
  static SvrManager_Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Sys_SvrNodeLogin

// required int32 m_nodeid = 1;
inline bool Sys_SvrNodeLogin::has_m_nodeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sys_SvrNodeLogin::set_has_m_nodeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sys_SvrNodeLogin::clear_has_m_nodeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sys_SvrNodeLogin::clear_m_nodeid() {
  m_nodeid_ = 0;
  clear_has_m_nodeid();
}
inline ::google::protobuf::int32 Sys_SvrNodeLogin::m_nodeid() const {
  return m_nodeid_;
}
inline void Sys_SvrNodeLogin::set_m_nodeid(::google::protobuf::int32 value) {
  set_has_m_nodeid();
  m_nodeid_ = value;
}

// required string m_key = 2;
inline bool Sys_SvrNodeLogin::has_m_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sys_SvrNodeLogin::set_has_m_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sys_SvrNodeLogin::clear_has_m_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sys_SvrNodeLogin::clear_m_key() {
  if (m_key_ != &::google::protobuf::internal::kEmptyString) {
    m_key_->clear();
  }
  clear_has_m_key();
}
inline const ::std::string& Sys_SvrNodeLogin::m_key() const {
  return *m_key_;
}
inline void Sys_SvrNodeLogin::set_m_key(const ::std::string& value) {
  set_has_m_key();
  if (m_key_ == &::google::protobuf::internal::kEmptyString) {
    m_key_ = new ::std::string;
  }
  m_key_->assign(value);
}
inline void Sys_SvrNodeLogin::set_m_key(const char* value) {
  set_has_m_key();
  if (m_key_ == &::google::protobuf::internal::kEmptyString) {
    m_key_ = new ::std::string;
  }
  m_key_->assign(value);
}
inline void Sys_SvrNodeLogin::set_m_key(const char* value, size_t size) {
  set_has_m_key();
  if (m_key_ == &::google::protobuf::internal::kEmptyString) {
    m_key_ = new ::std::string;
  }
  m_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sys_SvrNodeLogin::mutable_m_key() {
  set_has_m_key();
  if (m_key_ == &::google::protobuf::internal::kEmptyString) {
    m_key_ = new ::std::string;
  }
  return m_key_;
}
inline ::std::string* Sys_SvrNodeLogin::release_m_key() {
  clear_has_m_key();
  if (m_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_key_;
    m_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sys_SvrNodeLogin::set_allocated_m_key(::std::string* m_key) {
  if (m_key_ != &::google::protobuf::internal::kEmptyString) {
    delete m_key_;
  }
  if (m_key) {
    set_has_m_key();
    m_key_ = m_key;
  } else {
    clear_has_m_key();
    m_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sys_SvrNodeLoginRst

// required int32 m_rst = 1;
inline bool Sys_SvrNodeLoginRst::has_m_rst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sys_SvrNodeLoginRst::set_has_m_rst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sys_SvrNodeLoginRst::clear_has_m_rst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sys_SvrNodeLoginRst::clear_m_rst() {
  m_rst_ = 0;
  clear_has_m_rst();
}
inline ::google::protobuf::int32 Sys_SvrNodeLoginRst::m_rst() const {
  return m_rst_;
}
inline void Sys_SvrNodeLoginRst::set_m_rst(::google::protobuf::int32 value) {
  set_has_m_rst();
  m_rst_ = value;
}

// -------------------------------------------------------------------

// GA_Login

// required string m_account = 1;
inline bool GA_Login::has_m_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GA_Login::set_has_m_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GA_Login::clear_has_m_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GA_Login::clear_m_account() {
  if (m_account_ != &::google::protobuf::internal::kEmptyString) {
    m_account_->clear();
  }
  clear_has_m_account();
}
inline const ::std::string& GA_Login::m_account() const {
  return *m_account_;
}
inline void GA_Login::set_m_account(const ::std::string& value) {
  set_has_m_account();
  if (m_account_ == &::google::protobuf::internal::kEmptyString) {
    m_account_ = new ::std::string;
  }
  m_account_->assign(value);
}
inline void GA_Login::set_m_account(const char* value) {
  set_has_m_account();
  if (m_account_ == &::google::protobuf::internal::kEmptyString) {
    m_account_ = new ::std::string;
  }
  m_account_->assign(value);
}
inline void GA_Login::set_m_account(const char* value, size_t size) {
  set_has_m_account();
  if (m_account_ == &::google::protobuf::internal::kEmptyString) {
    m_account_ = new ::std::string;
  }
  m_account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GA_Login::mutable_m_account() {
  set_has_m_account();
  if (m_account_ == &::google::protobuf::internal::kEmptyString) {
    m_account_ = new ::std::string;
  }
  return m_account_;
}
inline ::std::string* GA_Login::release_m_account() {
  clear_has_m_account();
  if (m_account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_account_;
    m_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GA_Login::set_allocated_m_account(::std::string* m_account) {
  if (m_account_ != &::google::protobuf::internal::kEmptyString) {
    delete m_account_;
  }
  if (m_account) {
    set_has_m_account();
    m_account_ = m_account;
  } else {
    clear_has_m_account();
    m_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 m_param = 2;
inline bool GA_Login::has_m_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GA_Login::set_has_m_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GA_Login::clear_has_m_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GA_Login::clear_m_param() {
  m_param_ = GOOGLE_ULONGLONG(0);
  clear_has_m_param();
}
inline ::google::protobuf::uint64 GA_Login::m_param() const {
  return m_param_;
}
inline void GA_Login::set_m_param(::google::protobuf::uint64 value) {
  set_has_m_param();
  m_param_ = value;
}

// -------------------------------------------------------------------

// AG_LoginRst

// required uint32 m_playerid = 1;
inline bool AG_LoginRst::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AG_LoginRst::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AG_LoginRst::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AG_LoginRst::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 AG_LoginRst::m_playerid() const {
  return m_playerid_;
}
inline void AG_LoginRst::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required uint64 m_param = 2;
inline bool AG_LoginRst::has_m_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AG_LoginRst::set_has_m_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AG_LoginRst::clear_has_m_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AG_LoginRst::clear_m_param() {
  m_param_ = GOOGLE_ULONGLONG(0);
  clear_has_m_param();
}
inline ::google::protobuf::uint64 AG_LoginRst::m_param() const {
  return m_param_;
}
inline void AG_LoginRst::set_m_param(::google::protobuf::uint64 value) {
  set_has_m_param();
  m_param_ = value;
}

// -------------------------------------------------------------------

// GA_Offline

// required uint32 m_playerid = 1;
inline bool GA_Offline::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GA_Offline::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GA_Offline::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GA_Offline::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 GA_Offline::m_playerid() const {
  return m_playerid_;
}
inline void GA_Offline::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// -------------------------------------------------------------------

// GGame_Offline

// required uint32 m_playerid = 1;
inline bool GGame_Offline::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GGame_Offline::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GGame_Offline::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GGame_Offline::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 GGame_Offline::m_playerid() const {
  return m_playerid_;
}
inline void GGame_Offline::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required uint64 m_sessionid = 2;
inline bool GGame_Offline::has_m_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GGame_Offline::set_has_m_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GGame_Offline::clear_has_m_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GGame_Offline::clear_m_sessionid() {
  m_sessionid_ = GOOGLE_ULONGLONG(0);
  clear_has_m_sessionid();
}
inline ::google::protobuf::uint64 GGame_Offline::m_sessionid() const {
  return m_sessionid_;
}
inline void GGame_Offline::set_m_sessionid(::google::protobuf::uint64 value) {
  set_has_m_sessionid();
  m_sessionid_ = value;
}

// -------------------------------------------------------------------

// AG_KickPlayer

// required uint32 m_playerid = 1;
inline bool AG_KickPlayer::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AG_KickPlayer::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AG_KickPlayer::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AG_KickPlayer::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 AG_KickPlayer::m_playerid() const {
  return m_playerid_;
}
inline void AG_KickPlayer::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// -------------------------------------------------------------------

// AGame_EnterGame

// required uint32 m_playerid = 1;
inline bool AGame_EnterGame::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AGame_EnterGame::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AGame_EnterGame::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AGame_EnterGame::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 AGame_EnterGame::m_playerid() const {
  return m_playerid_;
}
inline void AGame_EnterGame::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required int32 m_gameid = 2;
inline bool AGame_EnterGame::has_m_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AGame_EnterGame::set_has_m_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AGame_EnterGame::clear_has_m_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AGame_EnterGame::clear_m_gameid() {
  m_gameid_ = 0;
  clear_has_m_gameid();
}
inline ::google::protobuf::int32 AGame_EnterGame::m_gameid() const {
  return m_gameid_;
}
inline void AGame_EnterGame::set_m_gameid(::google::protobuf::int32 value) {
  set_has_m_gameid();
  m_gameid_ = value;
}

// required int32 m_gatewayid = 3;
inline bool AGame_EnterGame::has_m_gatewayid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AGame_EnterGame::set_has_m_gatewayid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AGame_EnterGame::clear_has_m_gatewayid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AGame_EnterGame::clear_m_gatewayid() {
  m_gatewayid_ = 0;
  clear_has_m_gatewayid();
}
inline ::google::protobuf::int32 AGame_EnterGame::m_gatewayid() const {
  return m_gatewayid_;
}
inline void AGame_EnterGame::set_m_gatewayid(::google::protobuf::int32 value) {
  set_has_m_gatewayid();
  m_gatewayid_ = value;
}

// required .rpc.t_EnterGamePlayerData m_playerdata = 4;
inline bool AGame_EnterGame::has_m_playerdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AGame_EnterGame::set_has_m_playerdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AGame_EnterGame::clear_has_m_playerdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AGame_EnterGame::clear_m_playerdata() {
  if (m_playerdata_ != NULL) m_playerdata_->::rpc::t_EnterGamePlayerData::Clear();
  clear_has_m_playerdata();
}
inline const ::rpc::t_EnterGamePlayerData& AGame_EnterGame::m_playerdata() const {
  return m_playerdata_ != NULL ? *m_playerdata_ : *default_instance_->m_playerdata_;
}
inline ::rpc::t_EnterGamePlayerData* AGame_EnterGame::mutable_m_playerdata() {
  set_has_m_playerdata();
  if (m_playerdata_ == NULL) m_playerdata_ = new ::rpc::t_EnterGamePlayerData;
  return m_playerdata_;
}
inline ::rpc::t_EnterGamePlayerData* AGame_EnterGame::release_m_playerdata() {
  clear_has_m_playerdata();
  ::rpc::t_EnterGamePlayerData* temp = m_playerdata_;
  m_playerdata_ = NULL;
  return temp;
}
inline void AGame_EnterGame::set_allocated_m_playerdata(::rpc::t_EnterGamePlayerData* m_playerdata) {
  delete m_playerdata_;
  m_playerdata_ = m_playerdata;
  if (m_playerdata) {
    set_has_m_playerdata();
  } else {
    clear_has_m_playerdata();
  }
}

// -------------------------------------------------------------------

// GameA_EnterGameRst

// required int32 m_rst = 1;
inline bool GameA_EnterGameRst::has_m_rst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameA_EnterGameRst::set_has_m_rst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameA_EnterGameRst::clear_has_m_rst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameA_EnterGameRst::clear_m_rst() {
  m_rst_ = 0;
  clear_has_m_rst();
}
inline ::google::protobuf::int32 GameA_EnterGameRst::m_rst() const {
  return m_rst_;
}
inline void GameA_EnterGameRst::set_m_rst(::google::protobuf::int32 value) {
  set_has_m_rst();
  m_rst_ = value;
}

// required uint32 m_playerid = 2;
inline bool GameA_EnterGameRst::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameA_EnterGameRst::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameA_EnterGameRst::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameA_EnterGameRst::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 GameA_EnterGameRst::m_playerid() const {
  return m_playerid_;
}
inline void GameA_EnterGameRst::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required int32 m_gameid = 3;
inline bool GameA_EnterGameRst::has_m_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameA_EnterGameRst::set_has_m_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameA_EnterGameRst::clear_has_m_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameA_EnterGameRst::clear_m_gameid() {
  m_gameid_ = 0;
  clear_has_m_gameid();
}
inline ::google::protobuf::int32 GameA_EnterGameRst::m_gameid() const {
  return m_gameid_;
}
inline void GameA_EnterGameRst::set_m_gameid(::google::protobuf::int32 value) {
  set_has_m_gameid();
  m_gameid_ = value;
}

// -------------------------------------------------------------------

// AGame_LeaveGame

// required uint32 m_playerid = 1;
inline bool AGame_LeaveGame::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AGame_LeaveGame::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AGame_LeaveGame::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AGame_LeaveGame::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 AGame_LeaveGame::m_playerid() const {
  return m_playerid_;
}
inline void AGame_LeaveGame::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// -------------------------------------------------------------------

// GameA_LeaveGameRst

// required int32 m_rst = 1;
inline bool GameA_LeaveGameRst::has_m_rst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameA_LeaveGameRst::set_has_m_rst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameA_LeaveGameRst::clear_has_m_rst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameA_LeaveGameRst::clear_m_rst() {
  m_rst_ = 0;
  clear_has_m_rst();
}
inline ::google::protobuf::int32 GameA_LeaveGameRst::m_rst() const {
  return m_rst_;
}
inline void GameA_LeaveGameRst::set_m_rst(::google::protobuf::int32 value) {
  set_has_m_rst();
  m_rst_ = value;
}

// required uint32 m_playerid = 2;
inline bool GameA_LeaveGameRst::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameA_LeaveGameRst::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameA_LeaveGameRst::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameA_LeaveGameRst::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 GameA_LeaveGameRst::m_playerid() const {
  return m_playerid_;
}
inline void GameA_LeaveGameRst::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// optional .rpc.t_EnterGamePlayerData m_playerdata = 3;
inline bool GameA_LeaveGameRst::has_m_playerdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameA_LeaveGameRst::set_has_m_playerdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameA_LeaveGameRst::clear_has_m_playerdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameA_LeaveGameRst::clear_m_playerdata() {
  if (m_playerdata_ != NULL) m_playerdata_->::rpc::t_EnterGamePlayerData::Clear();
  clear_has_m_playerdata();
}
inline const ::rpc::t_EnterGamePlayerData& GameA_LeaveGameRst::m_playerdata() const {
  return m_playerdata_ != NULL ? *m_playerdata_ : *default_instance_->m_playerdata_;
}
inline ::rpc::t_EnterGamePlayerData* GameA_LeaveGameRst::mutable_m_playerdata() {
  set_has_m_playerdata();
  if (m_playerdata_ == NULL) m_playerdata_ = new ::rpc::t_EnterGamePlayerData;
  return m_playerdata_;
}
inline ::rpc::t_EnterGamePlayerData* GameA_LeaveGameRst::release_m_playerdata() {
  clear_has_m_playerdata();
  ::rpc::t_EnterGamePlayerData* temp = m_playerdata_;
  m_playerdata_ = NULL;
  return temp;
}
inline void GameA_LeaveGameRst::set_allocated_m_playerdata(::rpc::t_EnterGamePlayerData* m_playerdata) {
  delete m_playerdata_;
  m_playerdata_ = m_playerdata;
  if (m_playerdata) {
    set_has_m_playerdata();
  } else {
    clear_has_m_playerdata();
  }
}

// -------------------------------------------------------------------

// Game_Work2Master_UpdateTableData

// -------------------------------------------------------------------

// Game_Work2Master_SetPlayerState

// required uint32 m_playerid = 1;
inline bool Game_Work2Master_SetPlayerState::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game_Work2Master_SetPlayerState::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game_Work2Master_SetPlayerState::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game_Work2Master_SetPlayerState::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 Game_Work2Master_SetPlayerState::m_playerid() const {
  return m_playerid_;
}
inline void Game_Work2Master_SetPlayerState::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required int32 m_status = 2;
inline bool Game_Work2Master_SetPlayerState::has_m_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Game_Work2Master_SetPlayerState::set_has_m_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Game_Work2Master_SetPlayerState::clear_has_m_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Game_Work2Master_SetPlayerState::clear_m_status() {
  m_status_ = 0;
  clear_has_m_status();
}
inline ::google::protobuf::int32 Game_Work2Master_SetPlayerState::m_status() const {
  return m_status_;
}
inline void Game_Work2Master_SetPlayerState::set_m_status(::google::protobuf::int32 value) {
  set_has_m_status();
  m_status_ = value;
}

// -------------------------------------------------------------------

// Friend_ReqAddFriend

// required uint32 playerid = 1;
inline bool Friend_ReqAddFriend::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend_ReqAddFriend::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend_ReqAddFriend::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend_ReqAddFriend::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 Friend_ReqAddFriend::playerid() const {
  return playerid_;
}
inline void Friend_ReqAddFriend::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool Friend_ReqAddFriend::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend_ReqAddFriend::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend_ReqAddFriend::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend_ReqAddFriend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Friend_ReqAddFriend::name() const {
  return *name_;
}
inline void Friend_ReqAddFriend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend_ReqAddFriend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend_ReqAddFriend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend_ReqAddFriend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Friend_ReqAddFriend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend_ReqAddFriend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 headid = 3;
inline bool Friend_ReqAddFriend::has_headid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Friend_ReqAddFriend::set_has_headid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Friend_ReqAddFriend::clear_has_headid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Friend_ReqAddFriend::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 Friend_ReqAddFriend::headid() const {
  return headid_;
}
inline void Friend_ReqAddFriend::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// -------------------------------------------------------------------

// Friend_AgreeAddFiend

// required uint32 playerid = 1;
inline bool Friend_AgreeAddFiend::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend_AgreeAddFiend::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend_AgreeAddFiend::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend_AgreeAddFiend::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 Friend_AgreeAddFiend::playerid() const {
  return playerid_;
}
inline void Friend_AgreeAddFiend::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool Friend_AgreeAddFiend::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend_AgreeAddFiend::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend_AgreeAddFiend::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend_AgreeAddFiend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Friend_AgreeAddFiend::name() const {
  return *name_;
}
inline void Friend_AgreeAddFiend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend_AgreeAddFiend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend_AgreeAddFiend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend_AgreeAddFiend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Friend_AgreeAddFiend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend_AgreeAddFiend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 headid = 3;
inline bool Friend_AgreeAddFiend::has_headid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Friend_AgreeAddFiend::set_has_headid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Friend_AgreeAddFiend::clear_has_headid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Friend_AgreeAddFiend::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 Friend_AgreeAddFiend::headid() const {
  return headid_;
}
inline void Friend_AgreeAddFiend::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// required int64 money = 4;
inline bool Friend_AgreeAddFiend::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Friend_AgreeAddFiend::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Friend_AgreeAddFiend::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Friend_AgreeAddFiend::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 Friend_AgreeAddFiend::money() const {
  return money_;
}
inline void Friend_AgreeAddFiend::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// Friend_RefuseAddFiend

// required uint32 playerid = 1;
inline bool Friend_RefuseAddFiend::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend_RefuseAddFiend::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend_RefuseAddFiend::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend_RefuseAddFiend::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 Friend_RefuseAddFiend::playerid() const {
  return playerid_;
}
inline void Friend_RefuseAddFiend::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool Friend_RefuseAddFiend::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend_RefuseAddFiend::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend_RefuseAddFiend::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend_RefuseAddFiend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Friend_RefuseAddFiend::name() const {
  return *name_;
}
inline void Friend_RefuseAddFiend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend_RefuseAddFiend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend_RefuseAddFiend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend_RefuseAddFiend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Friend_RefuseAddFiend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend_RefuseAddFiend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 headid = 3;
inline bool Friend_RefuseAddFiend::has_headid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Friend_RefuseAddFiend::set_has_headid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Friend_RefuseAddFiend::clear_has_headid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Friend_RefuseAddFiend::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 Friend_RefuseAddFiend::headid() const {
  return headid_;
}
inline void Friend_RefuseAddFiend::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// required int64 money = 4;
inline bool Friend_RefuseAddFiend::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Friend_RefuseAddFiend::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Friend_RefuseAddFiend::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Friend_RefuseAddFiend::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 Friend_RefuseAddFiend::money() const {
  return money_;
}
inline void Friend_RefuseAddFiend::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// Friend_SendMsg

// required uint32 playerid = 1;
inline bool Friend_SendMsg::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend_SendMsg::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend_SendMsg::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend_SendMsg::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 Friend_SendMsg::playerid() const {
  return playerid_;
}
inline void Friend_SendMsg::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool Friend_SendMsg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend_SendMsg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend_SendMsg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend_SendMsg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Friend_SendMsg::name() const {
  return *name_;
}
inline void Friend_SendMsg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend_SendMsg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Friend_SendMsg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend_SendMsg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Friend_SendMsg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend_SendMsg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 headid = 3;
inline bool Friend_SendMsg::has_headid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Friend_SendMsg::set_has_headid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Friend_SendMsg::clear_has_headid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Friend_SendMsg::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 Friend_SendMsg::headid() const {
  return headid_;
}
inline void Friend_SendMsg::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// required string content = 4;
inline bool Friend_SendMsg::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Friend_SendMsg::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Friend_SendMsg::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Friend_SendMsg::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Friend_SendMsg::content() const {
  return *content_;
}
inline void Friend_SendMsg::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Friend_SendMsg::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Friend_SendMsg::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend_SendMsg::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Friend_SendMsg::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend_SendMsg::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SvrManager_Post

// required uint64 postid = 1;
inline bool SvrManager_Post::has_postid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrManager_Post::set_has_postid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrManager_Post::clear_has_postid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrManager_Post::clear_postid() {
  postid_ = GOOGLE_ULONGLONG(0);
  clear_has_postid();
}
inline ::google::protobuf::uint64 SvrManager_Post::postid() const {
  return postid_;
}
inline void SvrManager_Post::set_postid(::google::protobuf::uint64 value) {
  set_has_postid();
  postid_ = value;
}

// required string cur = 2;
inline bool SvrManager_Post::has_cur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrManager_Post::set_has_cur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrManager_Post::clear_has_cur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrManager_Post::clear_cur() {
  if (cur_ != &::google::protobuf::internal::kEmptyString) {
    cur_->clear();
  }
  clear_has_cur();
}
inline const ::std::string& SvrManager_Post::cur() const {
  return *cur_;
}
inline void SvrManager_Post::set_cur(const ::std::string& value) {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::kEmptyString) {
    cur_ = new ::std::string;
  }
  cur_->assign(value);
}
inline void SvrManager_Post::set_cur(const char* value) {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::kEmptyString) {
    cur_ = new ::std::string;
  }
  cur_->assign(value);
}
inline void SvrManager_Post::set_cur(const char* value, size_t size) {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::kEmptyString) {
    cur_ = new ::std::string;
  }
  cur_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrManager_Post::mutable_cur() {
  set_has_cur();
  if (cur_ == &::google::protobuf::internal::kEmptyString) {
    cur_ = new ::std::string;
  }
  return cur_;
}
inline ::std::string* SvrManager_Post::release_cur() {
  clear_has_cur();
  if (cur_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cur_;
    cur_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrManager_Post::set_allocated_cur(::std::string* cur) {
  if (cur_ != &::google::protobuf::internal::kEmptyString) {
    delete cur_;
  }
  if (cur) {
    set_has_cur();
    cur_ = cur;
  } else {
    clear_has_cur();
    cur_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string body = 3;
inline bool SvrManager_Post::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SvrManager_Post::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SvrManager_Post::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SvrManager_Post::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& SvrManager_Post::body() const {
  return *body_;
}
inline void SvrManager_Post::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void SvrManager_Post::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void SvrManager_Post::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrManager_Post::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* SvrManager_Post::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrManager_Post::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SvrManager_Response

// required uint64 postid = 1;
inline bool SvrManager_Response::has_postid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvrManager_Response::set_has_postid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvrManager_Response::clear_has_postid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvrManager_Response::clear_postid() {
  postid_ = GOOGLE_ULONGLONG(0);
  clear_has_postid();
}
inline ::google::protobuf::uint64 SvrManager_Response::postid() const {
  return postid_;
}
inline void SvrManager_Response::set_postid(::google::protobuf::uint64 value) {
  set_has_postid();
  postid_ = value;
}

// required string body = 2;
inline bool SvrManager_Response::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvrManager_Response::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvrManager_Response::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvrManager_Response::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& SvrManager_Response::body() const {
  return *body_;
}
inline void SvrManager_Response::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void SvrManager_Response::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void SvrManager_Response::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SvrManager_Response::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* SvrManager_Response::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SvrManager_Response::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::emPacket_Server>() {
  return ::rpc::emPacket_Server_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Packet_5fServer_2eproto__INCLUDED
