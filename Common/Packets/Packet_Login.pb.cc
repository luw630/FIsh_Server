// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Packet_Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* CS_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_LoginRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_LoginRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_RegisterRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_RegisterRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_LoginGateWayOld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_LoginGateWayOld_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_LoginGateWay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_LoginGateWay_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_LoginGateWayRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_LoginGateWayRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_PlayerOtherLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_PlayerOtherLogin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* emPacket_Login_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Packet_5fLogin_2eproto() {
  protobuf_AddDesc_Packet_5fLogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Packet_Login.proto");
  GOOGLE_CHECK(file != NULL);
  CS_Login_descriptor_ = file->message_type(0);
  static const int CS_Login_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Login, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Login, m_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Login, m_pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Login, m_param_),
  };
  CS_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_Login_descriptor_,
      CS_Login::default_instance_,
      CS_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_Login));
  SC_LoginRst_descriptor_ = file->message_type(1);
  static const int SC_LoginRst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LoginRst, m_rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LoginRst, m_sessionid_),
  };
  SC_LoginRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_LoginRst_descriptor_,
      SC_LoginRst::default_instance_,
      SC_LoginRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LoginRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LoginRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_LoginRst));
  CS_Register_descriptor_ = file->message_type(2);
  static const int CS_Register_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Register, m_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Register, m_pwd_),
  };
  CS_Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_Register_descriptor_,
      CS_Register::default_instance_,
      CS_Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_Register));
  SC_RegisterRst_descriptor_ = file->message_type(3);
  static const int SC_RegisterRst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RegisterRst, m_rst_),
  };
  SC_RegisterRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_RegisterRst_descriptor_,
      SC_RegisterRst::default_instance_,
      SC_RegisterRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RegisterRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_RegisterRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_RegisterRst));
  CS_LoginGateWayOld_descriptor_ = file->message_type(4);
  static const int CS_LoginGateWayOld_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LoginGateWayOld, m_account_),
  };
  CS_LoginGateWayOld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_LoginGateWayOld_descriptor_,
      CS_LoginGateWayOld::default_instance_,
      CS_LoginGateWayOld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LoginGateWayOld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LoginGateWayOld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_LoginGateWayOld));
  CS_LoginGateWay_descriptor_ = file->message_type(5);
  static const int CS_LoginGateWay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LoginGateWay, m_sessionid_),
  };
  CS_LoginGateWay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_LoginGateWay_descriptor_,
      CS_LoginGateWay::default_instance_,
      CS_LoginGateWay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LoginGateWay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LoginGateWay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_LoginGateWay));
  SC_LoginGateWayRst_descriptor_ = file->message_type(6);
  static const int SC_LoginGateWayRst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LoginGateWayRst, m_rst_),
  };
  SC_LoginGateWayRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_LoginGateWayRst_descriptor_,
      SC_LoginGateWayRst::default_instance_,
      SC_LoginGateWayRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LoginGateWayRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LoginGateWayRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_LoginGateWayRst));
  SC_PlayerOtherLogin_descriptor_ = file->message_type(7);
  static const int SC_PlayerOtherLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PlayerOtherLogin, m_info_),
  };
  SC_PlayerOtherLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_PlayerOtherLogin_descriptor_,
      SC_PlayerOtherLogin::default_instance_,
      SC_PlayerOtherLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PlayerOtherLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_PlayerOtherLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_PlayerOtherLogin));
  emPacket_Login_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Packet_5fLogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_Login_descriptor_, &CS_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_LoginRst_descriptor_, &SC_LoginRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_Register_descriptor_, &CS_Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_RegisterRst_descriptor_, &SC_RegisterRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_LoginGateWayOld_descriptor_, &CS_LoginGateWayOld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_LoginGateWay_descriptor_, &CS_LoginGateWay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_LoginGateWayRst_descriptor_, &SC_LoginGateWayRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_PlayerOtherLogin_descriptor_, &SC_PlayerOtherLogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Packet_5fLogin_2eproto() {
  delete CS_Login::default_instance_;
  delete CS_Login_reflection_;
  delete SC_LoginRst::default_instance_;
  delete SC_LoginRst_reflection_;
  delete CS_Register::default_instance_;
  delete CS_Register_reflection_;
  delete SC_RegisterRst::default_instance_;
  delete SC_RegisterRst_reflection_;
  delete CS_LoginGateWayOld::default_instance_;
  delete CS_LoginGateWayOld_reflection_;
  delete CS_LoginGateWay::default_instance_;
  delete CS_LoginGateWay_reflection_;
  delete SC_LoginGateWayRst::default_instance_;
  delete SC_LoginGateWayRst_reflection_;
  delete SC_PlayerOtherLogin::default_instance_;
  delete SC_PlayerOtherLogin_reflection_;
}

void protobuf_AddDesc_Packet_5fLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rpc::protobuf_AddDesc_Packet_5fBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022Packet_Login.proto\022\003rpc\032\021Packet_Base.p"
    "roto\"M\n\010CS_Login\022\016\n\006m_type\030\001 \002(\005\022\021\n\tm_ac"
    "count\030\002 \002(\t\022\r\n\005m_pwd\030\003 \002(\t\022\017\n\007m_param\030\004 "
    "\001(\t\"1\n\013SC_LoginRst\022\r\n\005m_rst\030\001 \002(\005\022\023\n\013m_s"
    "essionid\030\002 \001(\t\"/\n\013CS_Register\022\021\n\tm_accou"
    "nt\030\001 \002(\t\022\r\n\005m_pwd\030\002 \002(\t\"\037\n\016SC_RegisterRs"
    "t\022\r\n\005m_rst\030\001 \002(\005\"\'\n\022CS_LoginGateWayOld\022\021"
    "\n\tm_account\030\001 \002(\t\"&\n\017CS_LoginGateWay\022\023\n\013"
    "m_sessionid\030\001 \002(\t\"#\n\022SC_LoginGateWayRst\022"
    "\r\n\005m_rst\030\001 \002(\005\"%\n\023SC_PlayerOtherLogin\022\016\n"
    "\006m_info\030\001 \002(\t*\322\001\n\016emPacket_Login\022\020\n\013EM_C"
    "S_Login\020\201\002\022\023\n\016EM_SC_LoginRst\020\202\002\022\032\n\025EM_CS"
    "_LoginGateWayOld\020\203\002\022\027\n\022EM_CS_LoginGateWa"
    "y\020\204\002\022\032\n\025EM_SC_LoginGateWayRst\020\205\002\022\033\n\026EM_S"
    "C_PlayerOtherLogin\020\206\002\022\023\n\016EM_CS_Register\020"
    "\207\002\022\026\n\021EM_SC_RegisterRst\020\210\002", 626);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Packet_Login.proto", &protobuf_RegisterTypes);
  CS_Login::default_instance_ = new CS_Login();
  SC_LoginRst::default_instance_ = new SC_LoginRst();
  CS_Register::default_instance_ = new CS_Register();
  SC_RegisterRst::default_instance_ = new SC_RegisterRst();
  CS_LoginGateWayOld::default_instance_ = new CS_LoginGateWayOld();
  CS_LoginGateWay::default_instance_ = new CS_LoginGateWay();
  SC_LoginGateWayRst::default_instance_ = new SC_LoginGateWayRst();
  SC_PlayerOtherLogin::default_instance_ = new SC_PlayerOtherLogin();
  CS_Login::default_instance_->InitAsDefaultInstance();
  SC_LoginRst::default_instance_->InitAsDefaultInstance();
  CS_Register::default_instance_->InitAsDefaultInstance();
  SC_RegisterRst::default_instance_->InitAsDefaultInstance();
  CS_LoginGateWayOld::default_instance_->InitAsDefaultInstance();
  CS_LoginGateWay::default_instance_->InitAsDefaultInstance();
  SC_LoginGateWayRst::default_instance_->InitAsDefaultInstance();
  SC_PlayerOtherLogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Packet_5fLogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Packet_5fLogin_2eproto {
  StaticDescriptorInitializer_Packet_5fLogin_2eproto() {
    protobuf_AddDesc_Packet_5fLogin_2eproto();
  }
} static_descriptor_initializer_Packet_5fLogin_2eproto_;
const ::google::protobuf::EnumDescriptor* emPacket_Login_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emPacket_Login_descriptor_;
}
bool emPacket_Login_IsValid(int value) {
  switch(value) {
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CS_Login::kMTypeFieldNumber;
const int CS_Login::kMAccountFieldNumber;
const int CS_Login::kMPwdFieldNumber;
const int CS_Login::kMParamFieldNumber;
#endif  // !_MSC_VER

CS_Login::CS_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_Login::InitAsDefaultInstance() {
}

CS_Login::CS_Login(const CS_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_Login::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_Login::~CS_Login() {
  SharedDtor();
}

void CS_Login::SharedDtor() {
  if (m_account_ != &::google::protobuf::internal::kEmptyString) {
    delete m_account_;
  }
  if (m_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete m_pwd_;
  }
  if (m_param_ != &::google::protobuf::internal::kEmptyString) {
    delete m_param_;
  }
  if (this != default_instance_) {
  }
}

void CS_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_Login_descriptor_;
}

const CS_Login& CS_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLogin_2eproto();
  return *default_instance_;
}

CS_Login* CS_Login::default_instance_ = NULL;

CS_Login* CS_Login::New() const {
  return new CS_Login;
}

void CS_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    if (has_m_account()) {
      if (m_account_ != &::google::protobuf::internal::kEmptyString) {
        m_account_->clear();
      }
    }
    if (has_m_pwd()) {
      if (m_pwd_ != &::google::protobuf::internal::kEmptyString) {
        m_pwd_->clear();
      }
    }
    if (has_m_param()) {
      if (m_param_ != &::google::protobuf::internal::kEmptyString) {
        m_param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_account;
        break;
      }

      // required string m_account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_account().data(), this->m_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_pwd;
        break;
      }

      // required string m_pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_pwd().data(), this->m_pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_param;
        break;
      }

      // optional string m_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_param().data(), this->m_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // required string m_account = 2;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_account().data(), this->m_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_account(), output);
  }

  // required string m_pwd = 3;
  if (has_m_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pwd().data(), this->m_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_pwd(), output);
  }

  // optional string m_param = 4;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_param().data(), this->m_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // required string m_account = 2;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_account().data(), this->m_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_account(), target);
  }

  // required string m_pwd = 3;
  if (has_m_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pwd().data(), this->m_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_pwd(), target);
  }

  // optional string m_param = 4;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_param().data(), this->m_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // required string m_account = 2;
    if (has_m_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_account());
    }

    // required string m_pwd = 3;
    if (has_m_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_pwd());
    }

    // optional string m_param = 4;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_Login::MergeFrom(const CS_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_account()) {
      set_m_account(from.m_account());
    }
    if (from.has_m_pwd()) {
      set_m_pwd(from.m_pwd());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_Login::CopyFrom(const CS_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CS_Login::Swap(CS_Login* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_account_, other->m_account_);
    std::swap(m_pwd_, other->m_pwd_);
    std::swap(m_param_, other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_Login_descriptor_;
  metadata.reflection = CS_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_LoginRst::kMRstFieldNumber;
const int SC_LoginRst::kMSessionidFieldNumber;
#endif  // !_MSC_VER

SC_LoginRst::SC_LoginRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_LoginRst::InitAsDefaultInstance() {
}

SC_LoginRst::SC_LoginRst(const SC_LoginRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_LoginRst::SharedCtor() {
  _cached_size_ = 0;
  m_rst_ = 0;
  m_sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_LoginRst::~SC_LoginRst() {
  SharedDtor();
}

void SC_LoginRst::SharedDtor() {
  if (m_sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sessionid_;
  }
  if (this != default_instance_) {
  }
}

void SC_LoginRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LoginRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_LoginRst_descriptor_;
}

const SC_LoginRst& SC_LoginRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLogin_2eproto();
  return *default_instance_;
}

SC_LoginRst* SC_LoginRst::default_instance_ = NULL;

SC_LoginRst* SC_LoginRst::New() const {
  return new SC_LoginRst;
}

void SC_LoginRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rst_ = 0;
    if (has_m_sessionid()) {
      if (m_sessionid_ != &::google::protobuf::internal::kEmptyString) {
        m_sessionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_LoginRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rst_)));
          set_has_m_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_sessionid;
        break;
      }

      // optional string m_sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_sessionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sessionid().data(), this->m_sessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_LoginRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rst(), output);
  }

  // optional string m_sessionid = 2;
  if (has_m_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sessionid().data(), this->m_sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_LoginRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rst(), target);
  }

  // optional string m_sessionid = 2;
  if (has_m_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sessionid().data(), this->m_sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_LoginRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_rst = 1;
    if (has_m_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rst());
    }

    // optional string m_sessionid = 2;
    if (has_m_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LoginRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_LoginRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_LoginRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_LoginRst::MergeFrom(const SC_LoginRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rst()) {
      set_m_rst(from.m_rst());
    }
    if (from.has_m_sessionid()) {
      set_m_sessionid(from.m_sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_LoginRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LoginRst::CopyFrom(const SC_LoginRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LoginRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_LoginRst::Swap(SC_LoginRst* other) {
  if (other != this) {
    std::swap(m_rst_, other->m_rst_);
    std::swap(m_sessionid_, other->m_sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_LoginRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_LoginRst_descriptor_;
  metadata.reflection = SC_LoginRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_Register::kMAccountFieldNumber;
const int CS_Register::kMPwdFieldNumber;
#endif  // !_MSC_VER

CS_Register::CS_Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_Register::InitAsDefaultInstance() {
}

CS_Register::CS_Register(const CS_Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_Register::SharedCtor() {
  _cached_size_ = 0;
  m_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_Register::~CS_Register() {
  SharedDtor();
}

void CS_Register::SharedDtor() {
  if (m_account_ != &::google::protobuf::internal::kEmptyString) {
    delete m_account_;
  }
  if (m_pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete m_pwd_;
  }
  if (this != default_instance_) {
  }
}

void CS_Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_Register_descriptor_;
}

const CS_Register& CS_Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLogin_2eproto();
  return *default_instance_;
}

CS_Register* CS_Register::default_instance_ = NULL;

CS_Register* CS_Register::New() const {
  return new CS_Register;
}

void CS_Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_account()) {
      if (m_account_ != &::google::protobuf::internal::kEmptyString) {
        m_account_->clear();
      }
    }
    if (has_m_pwd()) {
      if (m_pwd_ != &::google::protobuf::internal::kEmptyString) {
        m_pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_account().data(), this->m_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_pwd;
        break;
      }

      // required string m_pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_pwd().data(), this->m_pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_account().data(), this->m_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_account(), output);
  }

  // required string m_pwd = 2;
  if (has_m_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pwd().data(), this->m_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_account().data(), this->m_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_account(), target);
  }

  // required string m_pwd = 2;
  if (has_m_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pwd().data(), this->m_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_account = 1;
    if (has_m_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_account());
    }

    // required string m_pwd = 2;
    if (has_m_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_Register::MergeFrom(const CS_Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_account()) {
      set_m_account(from.m_account());
    }
    if (from.has_m_pwd()) {
      set_m_pwd(from.m_pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_Register::CopyFrom(const CS_Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS_Register::Swap(CS_Register* other) {
  if (other != this) {
    std::swap(m_account_, other->m_account_);
    std::swap(m_pwd_, other->m_pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_Register_descriptor_;
  metadata.reflection = CS_Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_RegisterRst::kMRstFieldNumber;
#endif  // !_MSC_VER

SC_RegisterRst::SC_RegisterRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_RegisterRst::InitAsDefaultInstance() {
}

SC_RegisterRst::SC_RegisterRst(const SC_RegisterRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_RegisterRst::SharedCtor() {
  _cached_size_ = 0;
  m_rst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_RegisterRst::~SC_RegisterRst() {
  SharedDtor();
}

void SC_RegisterRst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_RegisterRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_RegisterRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_RegisterRst_descriptor_;
}

const SC_RegisterRst& SC_RegisterRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLogin_2eproto();
  return *default_instance_;
}

SC_RegisterRst* SC_RegisterRst::default_instance_ = NULL;

SC_RegisterRst* SC_RegisterRst::New() const {
  return new SC_RegisterRst;
}

void SC_RegisterRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rst_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_RegisterRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rst_)));
          set_has_m_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_RegisterRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_RegisterRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_RegisterRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_rst = 1;
    if (has_m_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_RegisterRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_RegisterRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_RegisterRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_RegisterRst::MergeFrom(const SC_RegisterRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rst()) {
      set_m_rst(from.m_rst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_RegisterRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_RegisterRst::CopyFrom(const SC_RegisterRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_RegisterRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_RegisterRst::Swap(SC_RegisterRst* other) {
  if (other != this) {
    std::swap(m_rst_, other->m_rst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_RegisterRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_RegisterRst_descriptor_;
  metadata.reflection = SC_RegisterRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_LoginGateWayOld::kMAccountFieldNumber;
#endif  // !_MSC_VER

CS_LoginGateWayOld::CS_LoginGateWayOld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_LoginGateWayOld::InitAsDefaultInstance() {
}

CS_LoginGateWayOld::CS_LoginGateWayOld(const CS_LoginGateWayOld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_LoginGateWayOld::SharedCtor() {
  _cached_size_ = 0;
  m_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_LoginGateWayOld::~CS_LoginGateWayOld() {
  SharedDtor();
}

void CS_LoginGateWayOld::SharedDtor() {
  if (m_account_ != &::google::protobuf::internal::kEmptyString) {
    delete m_account_;
  }
  if (this != default_instance_) {
  }
}

void CS_LoginGateWayOld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LoginGateWayOld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_LoginGateWayOld_descriptor_;
}

const CS_LoginGateWayOld& CS_LoginGateWayOld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLogin_2eproto();
  return *default_instance_;
}

CS_LoginGateWayOld* CS_LoginGateWayOld::default_instance_ = NULL;

CS_LoginGateWayOld* CS_LoginGateWayOld::New() const {
  return new CS_LoginGateWayOld;
}

void CS_LoginGateWayOld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_account()) {
      if (m_account_ != &::google::protobuf::internal::kEmptyString) {
        m_account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_LoginGateWayOld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_account().data(), this->m_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_LoginGateWayOld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_account().data(), this->m_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_LoginGateWayOld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_account().data(), this->m_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_LoginGateWayOld::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_account = 1;
    if (has_m_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LoginGateWayOld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_LoginGateWayOld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_LoginGateWayOld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_LoginGateWayOld::MergeFrom(const CS_LoginGateWayOld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_account()) {
      set_m_account(from.m_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_LoginGateWayOld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LoginGateWayOld::CopyFrom(const CS_LoginGateWayOld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LoginGateWayOld::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_LoginGateWayOld::Swap(CS_LoginGateWayOld* other) {
  if (other != this) {
    std::swap(m_account_, other->m_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_LoginGateWayOld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_LoginGateWayOld_descriptor_;
  metadata.reflection = CS_LoginGateWayOld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_LoginGateWay::kMSessionidFieldNumber;
#endif  // !_MSC_VER

CS_LoginGateWay::CS_LoginGateWay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_LoginGateWay::InitAsDefaultInstance() {
}

CS_LoginGateWay::CS_LoginGateWay(const CS_LoginGateWay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_LoginGateWay::SharedCtor() {
  _cached_size_ = 0;
  m_sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_LoginGateWay::~CS_LoginGateWay() {
  SharedDtor();
}

void CS_LoginGateWay::SharedDtor() {
  if (m_sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_sessionid_;
  }
  if (this != default_instance_) {
  }
}

void CS_LoginGateWay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LoginGateWay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_LoginGateWay_descriptor_;
}

const CS_LoginGateWay& CS_LoginGateWay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLogin_2eproto();
  return *default_instance_;
}

CS_LoginGateWay* CS_LoginGateWay::default_instance_ = NULL;

CS_LoginGateWay* CS_LoginGateWay::New() const {
  return new CS_LoginGateWay;
}

void CS_LoginGateWay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_sessionid()) {
      if (m_sessionid_ != &::google::protobuf::internal::kEmptyString) {
        m_sessionid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_LoginGateWay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_sessionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_sessionid().data(), this->m_sessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_LoginGateWay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_sessionid = 1;
  if (has_m_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sessionid().data(), this->m_sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_LoginGateWay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_sessionid = 1;
  if (has_m_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_sessionid().data(), this->m_sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_LoginGateWay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_sessionid = 1;
    if (has_m_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LoginGateWay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_LoginGateWay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_LoginGateWay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_LoginGateWay::MergeFrom(const CS_LoginGateWay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_sessionid()) {
      set_m_sessionid(from.m_sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_LoginGateWay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LoginGateWay::CopyFrom(const CS_LoginGateWay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LoginGateWay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_LoginGateWay::Swap(CS_LoginGateWay* other) {
  if (other != this) {
    std::swap(m_sessionid_, other->m_sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_LoginGateWay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_LoginGateWay_descriptor_;
  metadata.reflection = CS_LoginGateWay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_LoginGateWayRst::kMRstFieldNumber;
#endif  // !_MSC_VER

SC_LoginGateWayRst::SC_LoginGateWayRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_LoginGateWayRst::InitAsDefaultInstance() {
}

SC_LoginGateWayRst::SC_LoginGateWayRst(const SC_LoginGateWayRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_LoginGateWayRst::SharedCtor() {
  _cached_size_ = 0;
  m_rst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_LoginGateWayRst::~SC_LoginGateWayRst() {
  SharedDtor();
}

void SC_LoginGateWayRst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_LoginGateWayRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LoginGateWayRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_LoginGateWayRst_descriptor_;
}

const SC_LoginGateWayRst& SC_LoginGateWayRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLogin_2eproto();
  return *default_instance_;
}

SC_LoginGateWayRst* SC_LoginGateWayRst::default_instance_ = NULL;

SC_LoginGateWayRst* SC_LoginGateWayRst::New() const {
  return new SC_LoginGateWayRst;
}

void SC_LoginGateWayRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rst_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_LoginGateWayRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rst_)));
          set_has_m_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_LoginGateWayRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_LoginGateWayRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_LoginGateWayRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_rst = 1;
    if (has_m_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LoginGateWayRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_LoginGateWayRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_LoginGateWayRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_LoginGateWayRst::MergeFrom(const SC_LoginGateWayRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rst()) {
      set_m_rst(from.m_rst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_LoginGateWayRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LoginGateWayRst::CopyFrom(const SC_LoginGateWayRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LoginGateWayRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_LoginGateWayRst::Swap(SC_LoginGateWayRst* other) {
  if (other != this) {
    std::swap(m_rst_, other->m_rst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_LoginGateWayRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_LoginGateWayRst_descriptor_;
  metadata.reflection = SC_LoginGateWayRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_PlayerOtherLogin::kMInfoFieldNumber;
#endif  // !_MSC_VER

SC_PlayerOtherLogin::SC_PlayerOtherLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_PlayerOtherLogin::InitAsDefaultInstance() {
}

SC_PlayerOtherLogin::SC_PlayerOtherLogin(const SC_PlayerOtherLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_PlayerOtherLogin::SharedCtor() {
  _cached_size_ = 0;
  m_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_PlayerOtherLogin::~SC_PlayerOtherLogin() {
  SharedDtor();
}

void SC_PlayerOtherLogin::SharedDtor() {
  if (m_info_ != &::google::protobuf::internal::kEmptyString) {
    delete m_info_;
  }
  if (this != default_instance_) {
  }
}

void SC_PlayerOtherLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_PlayerOtherLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_PlayerOtherLogin_descriptor_;
}

const SC_PlayerOtherLogin& SC_PlayerOtherLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fLogin_2eproto();
  return *default_instance_;
}

SC_PlayerOtherLogin* SC_PlayerOtherLogin::default_instance_ = NULL;

SC_PlayerOtherLogin* SC_PlayerOtherLogin::New() const {
  return new SC_PlayerOtherLogin;
}

void SC_PlayerOtherLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_info()) {
      if (m_info_ != &::google::protobuf::internal::kEmptyString) {
        m_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_PlayerOtherLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_info().data(), this->m_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_PlayerOtherLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_info = 1;
  if (has_m_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_info().data(), this->m_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_PlayerOtherLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_info = 1;
  if (has_m_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_info().data(), this->m_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_PlayerOtherLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_info = 1;
    if (has_m_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_PlayerOtherLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_PlayerOtherLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_PlayerOtherLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_PlayerOtherLogin::MergeFrom(const SC_PlayerOtherLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_info()) {
      set_m_info(from.m_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_PlayerOtherLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_PlayerOtherLogin::CopyFrom(const SC_PlayerOtherLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_PlayerOtherLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SC_PlayerOtherLogin::Swap(SC_PlayerOtherLogin* other) {
  if (other != this) {
    std::swap(m_info_, other->m_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_PlayerOtherLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_PlayerOtherLogin_descriptor_;
  metadata.reflection = SC_PlayerOtherLogin_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
