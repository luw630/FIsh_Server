// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_Friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Packet_Friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* t_FriendItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_FriendItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_FriendReqItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_FriendReqItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* t_FriendMsgRecordItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  t_FriendMsgRecordItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FriendReqList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FriendReqList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_ReqAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_ReqAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_FriendFind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_FriendFind_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FriendFindRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FriendFindRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_DelFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_DelFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_AddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_NotifyReqAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_NotifyReqAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_FriendVerifyOtherReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_FriendVerifyOtherReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FriendNotifyVerifyRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FriendNotifyVerifyRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_FriendSendMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_FriendSendMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_NotifyFriendMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_NotifyFriendMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_FriendMsgRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_FriendMsgRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_FriendMsgRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_FriendMsgRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* emPacket_Friend_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Packet_5fFriend_2eproto() {
  protobuf_AddDesc_Packet_5fFriend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Packet_Friend.proto");
  GOOGLE_CHECK(file != NULL);
  t_FriendItem_descriptor_ = file->message_type(0);
  static const int t_FriendItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItem, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItem, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItem, m_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItem, m_headid_),
  };
  t_FriendItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_FriendItem_descriptor_,
      t_FriendItem::default_instance_,
      t_FriendItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_FriendItem));
  t_FriendReqItem_descriptor_ = file->message_type(1);
  static const int t_FriendReqItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItem, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItem, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItem, m_headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItem, m_time_),
  };
  t_FriendReqItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_FriendReqItem_descriptor_,
      t_FriendReqItem::default_instance_,
      t_FriendReqItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendReqItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_FriendReqItem));
  t_FriendMsgRecordItem_descriptor_ = file->message_type(2);
  static const int t_FriendMsgRecordItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendMsgRecordItem, m_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendMsgRecordItem, m_time_),
  };
  t_FriendMsgRecordItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      t_FriendMsgRecordItem_descriptor_,
      t_FriendMsgRecordItem::default_instance_,
      t_FriendMsgRecordItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendMsgRecordItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(t_FriendMsgRecordItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(t_FriendMsgRecordItem));
  SC_FriendList_descriptor_ = file->message_type(3);
  static const int SC_FriendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendList, m_data_),
  };
  SC_FriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FriendList_descriptor_,
      SC_FriendList::default_instance_,
      SC_FriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FriendList));
  SC_FriendReqList_descriptor_ = file->message_type(4);
  static const int SC_FriendReqList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendReqList, m_data_),
  };
  SC_FriendReqList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FriendReqList_descriptor_,
      SC_FriendReqList::default_instance_,
      SC_FriendReqList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendReqList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendReqList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FriendReqList));
  CS_ReqAddFriend_descriptor_ = file->message_type(5);
  static const int CS_ReqAddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ReqAddFriend, m_playerid_),
  };
  CS_ReqAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_ReqAddFriend_descriptor_,
      CS_ReqAddFriend::default_instance_,
      CS_ReqAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ReqAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_ReqAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_ReqAddFriend));
  CS_FriendFind_descriptor_ = file->message_type(6);
  static const int CS_FriendFind_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendFind, m_playerid_),
  };
  CS_FriendFind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_FriendFind_descriptor_,
      CS_FriendFind::default_instance_,
      CS_FriendFind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendFind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendFind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_FriendFind));
  SC_FriendFindRst_descriptor_ = file->message_type(7);
  static const int SC_FriendFindRst_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendFindRst, bfind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendFindRst, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendFindRst, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendFindRst, headid_),
  };
  SC_FriendFindRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FriendFindRst_descriptor_,
      SC_FriendFindRst::default_instance_,
      SC_FriendFindRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendFindRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendFindRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FriendFindRst));
  CS_DelFriend_descriptor_ = file->message_type(8);
  static const int CS_DelFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_DelFriend, m_friendid_),
  };
  CS_DelFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_DelFriend_descriptor_,
      CS_DelFriend::default_instance_,
      CS_DelFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_DelFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_DelFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_DelFriend));
  SC_AddFriend_descriptor_ = file->message_type(9);
  static const int SC_AddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AddFriend, m_data_),
  };
  SC_AddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_AddFriend_descriptor_,
      SC_AddFriend::default_instance_,
      SC_AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_AddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_AddFriend));
  SC_NotifyReqAddFriend_descriptor_ = file->message_type(10);
  static const int SC_NotifyReqAddFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NotifyReqAddFriend, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NotifyReqAddFriend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NotifyReqAddFriend, headid_),
  };
  SC_NotifyReqAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_NotifyReqAddFriend_descriptor_,
      SC_NotifyReqAddFriend::default_instance_,
      SC_NotifyReqAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NotifyReqAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NotifyReqAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_NotifyReqAddFriend));
  CS_FriendVerifyOtherReq_descriptor_ = file->message_type(11);
  static const int CS_FriendVerifyOtherReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendVerifyOtherReq, m_agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendVerifyOtherReq, m_playerid_),
  };
  CS_FriendVerifyOtherReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_FriendVerifyOtherReq_descriptor_,
      CS_FriendVerifyOtherReq::default_instance_,
      CS_FriendVerifyOtherReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendVerifyOtherReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendVerifyOtherReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_FriendVerifyOtherReq));
  SC_FriendNotifyVerifyRst_descriptor_ = file->message_type(12);
  static const int SC_FriendNotifyVerifyRst_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendNotifyVerifyRst, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendNotifyVerifyRst, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendNotifyVerifyRst, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendNotifyVerifyRst, headid_),
  };
  SC_FriendNotifyVerifyRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FriendNotifyVerifyRst_descriptor_,
      SC_FriendNotifyVerifyRst::default_instance_,
      SC_FriendNotifyVerifyRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendNotifyVerifyRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendNotifyVerifyRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FriendNotifyVerifyRst));
  CS_FriendSendMsg_descriptor_ = file->message_type(13);
  static const int CS_FriendSendMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendSendMsg, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendSendMsg, m_content_),
  };
  CS_FriendSendMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_FriendSendMsg_descriptor_,
      CS_FriendSendMsg::default_instance_,
      CS_FriendSendMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendSendMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendSendMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_FriendSendMsg));
  SC_NotifyFriendMsg_descriptor_ = file->message_type(14);
  static const int SC_NotifyFriendMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NotifyFriendMsg, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NotifyFriendMsg, m_content_),
  };
  SC_NotifyFriendMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_NotifyFriendMsg_descriptor_,
      SC_NotifyFriendMsg::default_instance_,
      SC_NotifyFriendMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NotifyFriendMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_NotifyFriendMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_NotifyFriendMsg));
  CS_FriendMsgRecord_descriptor_ = file->message_type(15);
  static const int CS_FriendMsgRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendMsgRecord, m_playerid_),
  };
  CS_FriendMsgRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_FriendMsgRecord_descriptor_,
      CS_FriendMsgRecord::default_instance_,
      CS_FriendMsgRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendMsgRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_FriendMsgRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_FriendMsgRecord));
  SC_FriendMsgRecord_descriptor_ = file->message_type(16);
  static const int SC_FriendMsgRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendMsgRecord, m_data_),
  };
  SC_FriendMsgRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_FriendMsgRecord_descriptor_,
      SC_FriendMsgRecord::default_instance_,
      SC_FriendMsgRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendMsgRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_FriendMsgRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_FriendMsgRecord));
  emPacket_Friend_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Packet_5fFriend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_FriendItem_descriptor_, &t_FriendItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_FriendReqItem_descriptor_, &t_FriendReqItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    t_FriendMsgRecordItem_descriptor_, &t_FriendMsgRecordItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FriendList_descriptor_, &SC_FriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FriendReqList_descriptor_, &SC_FriendReqList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_ReqAddFriend_descriptor_, &CS_ReqAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_FriendFind_descriptor_, &CS_FriendFind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FriendFindRst_descriptor_, &SC_FriendFindRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_DelFriend_descriptor_, &CS_DelFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_AddFriend_descriptor_, &SC_AddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_NotifyReqAddFriend_descriptor_, &SC_NotifyReqAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_FriendVerifyOtherReq_descriptor_, &CS_FriendVerifyOtherReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FriendNotifyVerifyRst_descriptor_, &SC_FriendNotifyVerifyRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_FriendSendMsg_descriptor_, &CS_FriendSendMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_NotifyFriendMsg_descriptor_, &SC_NotifyFriendMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_FriendMsgRecord_descriptor_, &CS_FriendMsgRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_FriendMsgRecord_descriptor_, &SC_FriendMsgRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Packet_5fFriend_2eproto() {
  delete t_FriendItem::default_instance_;
  delete t_FriendItem_reflection_;
  delete t_FriendReqItem::default_instance_;
  delete t_FriendReqItem_reflection_;
  delete t_FriendMsgRecordItem::default_instance_;
  delete t_FriendMsgRecordItem_reflection_;
  delete SC_FriendList::default_instance_;
  delete SC_FriendList_reflection_;
  delete SC_FriendReqList::default_instance_;
  delete SC_FriendReqList_reflection_;
  delete CS_ReqAddFriend::default_instance_;
  delete CS_ReqAddFriend_reflection_;
  delete CS_FriendFind::default_instance_;
  delete CS_FriendFind_reflection_;
  delete SC_FriendFindRst::default_instance_;
  delete SC_FriendFindRst_reflection_;
  delete CS_DelFriend::default_instance_;
  delete CS_DelFriend_reflection_;
  delete SC_AddFriend::default_instance_;
  delete SC_AddFriend_reflection_;
  delete SC_NotifyReqAddFriend::default_instance_;
  delete SC_NotifyReqAddFriend_reflection_;
  delete CS_FriendVerifyOtherReq::default_instance_;
  delete CS_FriendVerifyOtherReq_reflection_;
  delete SC_FriendNotifyVerifyRst::default_instance_;
  delete SC_FriendNotifyVerifyRst_reflection_;
  delete CS_FriendSendMsg::default_instance_;
  delete CS_FriendSendMsg_reflection_;
  delete SC_NotifyFriendMsg::default_instance_;
  delete SC_NotifyFriendMsg_reflection_;
  delete CS_FriendMsgRecord::default_instance_;
  delete CS_FriendMsgRecord_reflection_;
  delete SC_FriendMsgRecord::default_instance_;
  delete SC_FriendMsgRecord_reflection_;
}

void protobuf_AddDesc_Packet_5fFriend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rpc::protobuf_AddDesc_Packet_5fBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023Packet_Friend.proto\022\003rpc\032\021Packet_Base."
    "proto\"U\n\014t_FriendItem\022\022\n\nm_playerid\030\001 \002("
    "\005\022\016\n\006m_name\030\002 \002(\t\022\017\n\007m_money\030\003 \002(\004\022\020\n\010m_"
    "headid\030\004 \002(\005\"W\n\017t_FriendReqItem\022\022\n\nm_pla"
    "yerid\030\001 \002(\005\022\016\n\006m_name\030\002 \002(\t\022\020\n\010m_headid\030"
    "\003 \002(\005\022\016\n\006m_time\030\004 \002(\005\":\n\025t_FriendMsgReco"
    "rdItem\022\021\n\tm_content\030\001 \002(\t\022\016\n\006m_time\030\002 \002("
    "\005\"2\n\rSC_FriendList\022!\n\006m_data\030\001 \003(\0132\021.rpc"
    ".t_FriendItem\"8\n\020SC_FriendReqList\022$\n\006m_d"
    "ata\030\001 \003(\0132\024.rpc.t_FriendReqItem\"%\n\017CS_Re"
    "qAddFriend\022\022\n\nm_playerid\030\001 \002(\005\"#\n\rCS_Fri"
    "endFind\022\022\n\nm_playerid\030\001 \002(\005\"Q\n\020SC_Friend"
    "FindRst\022\r\n\005bfind\030\001 \002(\005\022\020\n\010playerid\030\002 \002(\005"
    "\022\014\n\004name\030\003 \001(\t\022\016\n\006headid\030\004 \001(\005\"\"\n\014CS_Del"
    "Friend\022\022\n\nm_friendid\030\001 \002(\005\"1\n\014SC_AddFrie"
    "nd\022!\n\006m_data\030\001 \002(\0132\021.rpc.t_FriendItem\"G\n"
    "\025SC_NotifyReqAddFriend\022\020\n\010playerid\030\001 \002(\r"
    "\022\014\n\004name\030\002 \002(\t\022\016\n\006headid\030\003 \002(\005\">\n\027CS_Fri"
    "endVerifyOtherReq\022\017\n\007m_agree\030\001 \002(\005\022\022\n\nm_"
    "playerid\030\002 \002(\005\"Y\n\030SC_FriendNotifyVerifyR"
    "st\022\r\n\005agree\030\001 \002(\005\022\020\n\010playerid\030\002 \002(\r\022\014\n\004n"
    "ame\030\003 \002(\t\022\016\n\006headid\030\004 \002(\005\"9\n\020CS_FriendSe"
    "ndMsg\022\022\n\nm_playerid\030\001 \002(\005\022\021\n\tm_content\030\002"
    " \002(\t\";\n\022SC_NotifyFriendMsg\022\022\n\nm_playerid"
    "\030\001 \002(\005\022\021\n\tm_content\030\002 \002(\t\"(\n\022CS_FriendMs"
    "gRecord\022\022\n\nm_playerid\030\001 \002(\005\"@\n\022SC_Friend"
    "MsgRecord\022*\n\006m_data\030\001 \003(\0132\032.rpc.t_Friend"
    "MsgRecordItem*\271\003\n\017emPacket_Friend\022\025\n\020em_"
    "CS_FriendList\020\240\004\022\025\n\020em_SC_FriendList\020\241\004\022"
    "\030\n\023em_CS_FriendReqList\020\254\004\022\030\n\023em_SC_Frien"
    "dReqList\020\255\004\022\025\n\020em_CS_FriendFind\020\256\004\022\030\n\023em"
    "_SC_FriendFindRst\020\257\004\022\027\n\022em_CS_ReqAddFrie"
    "nd\020\242\004\022\024\n\017em_CS_DelFriend\020\243\004\022\024\n\017em_SC_Add"
    "Friend\020\244\004\022\035\n\030em_SC_NotifyReqAddFriend\020\245\004"
    "\022\037\n\032em_CS_FriendVerifyOtherReq\020\246\004\022 \n\033em_"
    "SC_FriendNotifyVerifyRst\020\247\004\022\030\n\023em_CS_Fri"
    "endSendMsg\020\250\004\022\032\n\025em_SC_NotifyFriendMsg\020\251"
    "\004\022\032\n\025em_CS_FriendMsgRecord\020\252\004\022\032\n\025em_SC_F"
    "riendMsgRecord\020\253\004", 1537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Packet_Friend.proto", &protobuf_RegisterTypes);
  t_FriendItem::default_instance_ = new t_FriendItem();
  t_FriendReqItem::default_instance_ = new t_FriendReqItem();
  t_FriendMsgRecordItem::default_instance_ = new t_FriendMsgRecordItem();
  SC_FriendList::default_instance_ = new SC_FriendList();
  SC_FriendReqList::default_instance_ = new SC_FriendReqList();
  CS_ReqAddFriend::default_instance_ = new CS_ReqAddFriend();
  CS_FriendFind::default_instance_ = new CS_FriendFind();
  SC_FriendFindRst::default_instance_ = new SC_FriendFindRst();
  CS_DelFriend::default_instance_ = new CS_DelFriend();
  SC_AddFriend::default_instance_ = new SC_AddFriend();
  SC_NotifyReqAddFriend::default_instance_ = new SC_NotifyReqAddFriend();
  CS_FriendVerifyOtherReq::default_instance_ = new CS_FriendVerifyOtherReq();
  SC_FriendNotifyVerifyRst::default_instance_ = new SC_FriendNotifyVerifyRst();
  CS_FriendSendMsg::default_instance_ = new CS_FriendSendMsg();
  SC_NotifyFriendMsg::default_instance_ = new SC_NotifyFriendMsg();
  CS_FriendMsgRecord::default_instance_ = new CS_FriendMsgRecord();
  SC_FriendMsgRecord::default_instance_ = new SC_FriendMsgRecord();
  t_FriendItem::default_instance_->InitAsDefaultInstance();
  t_FriendReqItem::default_instance_->InitAsDefaultInstance();
  t_FriendMsgRecordItem::default_instance_->InitAsDefaultInstance();
  SC_FriendList::default_instance_->InitAsDefaultInstance();
  SC_FriendReqList::default_instance_->InitAsDefaultInstance();
  CS_ReqAddFriend::default_instance_->InitAsDefaultInstance();
  CS_FriendFind::default_instance_->InitAsDefaultInstance();
  SC_FriendFindRst::default_instance_->InitAsDefaultInstance();
  CS_DelFriend::default_instance_->InitAsDefaultInstance();
  SC_AddFriend::default_instance_->InitAsDefaultInstance();
  SC_NotifyReqAddFriend::default_instance_->InitAsDefaultInstance();
  CS_FriendVerifyOtherReq::default_instance_->InitAsDefaultInstance();
  SC_FriendNotifyVerifyRst::default_instance_->InitAsDefaultInstance();
  CS_FriendSendMsg::default_instance_->InitAsDefaultInstance();
  SC_NotifyFriendMsg::default_instance_->InitAsDefaultInstance();
  CS_FriendMsgRecord::default_instance_->InitAsDefaultInstance();
  SC_FriendMsgRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Packet_5fFriend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Packet_5fFriend_2eproto {
  StaticDescriptorInitializer_Packet_5fFriend_2eproto() {
    protobuf_AddDesc_Packet_5fFriend_2eproto();
  }
} static_descriptor_initializer_Packet_5fFriend_2eproto_;
const ::google::protobuf::EnumDescriptor* emPacket_Friend_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emPacket_Friend_descriptor_;
}
bool emPacket_Friend_IsValid(int value) {
  switch(value) {
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int t_FriendItem::kMPlayeridFieldNumber;
const int t_FriendItem::kMNameFieldNumber;
const int t_FriendItem::kMMoneyFieldNumber;
const int t_FriendItem::kMHeadidFieldNumber;
#endif  // !_MSC_VER

t_FriendItem::t_FriendItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_FriendItem::InitAsDefaultInstance() {
}

t_FriendItem::t_FriendItem(const t_FriendItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_FriendItem::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_money_ = GOOGLE_ULONGLONG(0);
  m_headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_FriendItem::~t_FriendItem() {
  SharedDtor();
}

void t_FriendItem::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void t_FriendItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_FriendItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_FriendItem_descriptor_;
}

const t_FriendItem& t_FriendItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

t_FriendItem* t_FriendItem::default_instance_ = NULL;

t_FriendItem* t_FriendItem::New() const {
  return new t_FriendItem;
}

void t_FriendItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_money_ = GOOGLE_ULONGLONG(0);
    m_headid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_FriendItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // required string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_money;
        break;
      }

      // required uint64 m_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_money_)));
          set_has_m_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_headid;
        break;
      }

      // required int32 m_headid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headid_)));
          set_has_m_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_FriendItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playerid(), output);
  }

  // required string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // required uint64 m_money = 3;
  if (has_m_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->m_money(), output);
  }

  // required int32 m_headid = 4;
  if (has_m_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_FriendItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playerid(), target);
  }

  // required string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // required uint64 m_money = 3;
  if (has_m_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->m_money(), target);
  }

  // required int32 m_headid = 4;
  if (has_m_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_FriendItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // required uint64 m_money = 3;
    if (has_m_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_money());
    }

    // required int32 m_headid = 4;
    if (has_m_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_FriendItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_FriendItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_FriendItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_FriendItem::MergeFrom(const t_FriendItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_money()) {
      set_m_money(from.m_money());
    }
    if (from.has_m_headid()) {
      set_m_headid(from.m_headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_FriendItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_FriendItem::CopyFrom(const t_FriendItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_FriendItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void t_FriendItem::Swap(t_FriendItem* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_money_, other->m_money_);
    std::swap(m_headid_, other->m_headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_FriendItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_FriendItem_descriptor_;
  metadata.reflection = t_FriendItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_FriendReqItem::kMPlayeridFieldNumber;
const int t_FriendReqItem::kMNameFieldNumber;
const int t_FriendReqItem::kMHeadidFieldNumber;
const int t_FriendReqItem::kMTimeFieldNumber;
#endif  // !_MSC_VER

t_FriendReqItem::t_FriendReqItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_FriendReqItem::InitAsDefaultInstance() {
}

t_FriendReqItem::t_FriendReqItem(const t_FriendReqItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_FriendReqItem::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_headid_ = 0;
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_FriendReqItem::~t_FriendReqItem() {
  SharedDtor();
}

void t_FriendReqItem::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void t_FriendReqItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_FriendReqItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_FriendReqItem_descriptor_;
}

const t_FriendReqItem& t_FriendReqItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

t_FriendReqItem* t_FriendReqItem::default_instance_ = NULL;

t_FriendReqItem* t_FriendReqItem::New() const {
  return new t_FriendReqItem;
}

void t_FriendReqItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_headid_ = 0;
    m_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_FriendReqItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // required string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_headid;
        break;
      }

      // required int32 m_headid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_headid_)));
          set_has_m_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_time;
        break;
      }

      // required int32 m_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_FriendReqItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playerid(), output);
  }

  // required string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // required int32 m_headid = 3;
  if (has_m_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_headid(), output);
  }

  // required int32 m_time = 4;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_FriendReqItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playerid(), target);
  }

  // required string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // required int32 m_headid = 3;
  if (has_m_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_headid(), target);
  }

  // required int32 m_time = 4;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_FriendReqItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // required int32 m_headid = 3;
    if (has_m_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_headid());
    }

    // required int32 m_time = 4;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_FriendReqItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_FriendReqItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_FriendReqItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_FriendReqItem::MergeFrom(const t_FriendReqItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_headid()) {
      set_m_headid(from.m_headid());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_FriendReqItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_FriendReqItem::CopyFrom(const t_FriendReqItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_FriendReqItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void t_FriendReqItem::Swap(t_FriendReqItem* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_headid_, other->m_headid_);
    std::swap(m_time_, other->m_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_FriendReqItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_FriendReqItem_descriptor_;
  metadata.reflection = t_FriendReqItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int t_FriendMsgRecordItem::kMContentFieldNumber;
const int t_FriendMsgRecordItem::kMTimeFieldNumber;
#endif  // !_MSC_VER

t_FriendMsgRecordItem::t_FriendMsgRecordItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void t_FriendMsgRecordItem::InitAsDefaultInstance() {
}

t_FriendMsgRecordItem::t_FriendMsgRecordItem(const t_FriendMsgRecordItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void t_FriendMsgRecordItem::SharedCtor() {
  _cached_size_ = 0;
  m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

t_FriendMsgRecordItem::~t_FriendMsgRecordItem() {
  SharedDtor();
}

void t_FriendMsgRecordItem::SharedDtor() {
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    delete m_content_;
  }
  if (this != default_instance_) {
  }
}

void t_FriendMsgRecordItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* t_FriendMsgRecordItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return t_FriendMsgRecordItem_descriptor_;
}

const t_FriendMsgRecordItem& t_FriendMsgRecordItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

t_FriendMsgRecordItem* t_FriendMsgRecordItem::default_instance_ = NULL;

t_FriendMsgRecordItem* t_FriendMsgRecordItem::New() const {
  return new t_FriendMsgRecordItem;
}

void t_FriendMsgRecordItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_content()) {
      if (m_content_ != &::google::protobuf::internal::kEmptyString) {
        m_content_->clear();
      }
    }
    m_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool t_FriendMsgRecordItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_content().data(), this->m_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_time;
        break;
      }

      // required int32 m_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void t_FriendMsgRecordItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_content = 1;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_content(), output);
  }

  // required int32 m_time = 2;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* t_FriendMsgRecordItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_content = 1;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_content(), target);
  }

  // required int32 m_time = 2;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int t_FriendMsgRecordItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_content = 1;
    if (has_m_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_content());
    }

    // required int32 m_time = 2;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void t_FriendMsgRecordItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const t_FriendMsgRecordItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const t_FriendMsgRecordItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void t_FriendMsgRecordItem::MergeFrom(const t_FriendMsgRecordItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_content()) {
      set_m_content(from.m_content());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void t_FriendMsgRecordItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void t_FriendMsgRecordItem::CopyFrom(const t_FriendMsgRecordItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool t_FriendMsgRecordItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void t_FriendMsgRecordItem::Swap(t_FriendMsgRecordItem* other) {
  if (other != this) {
    std::swap(m_content_, other->m_content_);
    std::swap(m_time_, other->m_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata t_FriendMsgRecordItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = t_FriendMsgRecordItem_descriptor_;
  metadata.reflection = t_FriendMsgRecordItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FriendList::kMDataFieldNumber;
#endif  // !_MSC_VER

SC_FriendList::SC_FriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FriendList::InitAsDefaultInstance() {
}

SC_FriendList::SC_FriendList(const SC_FriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FriendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FriendList::~SC_FriendList() {
  SharedDtor();
}

void SC_FriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FriendList_descriptor_;
}

const SC_FriendList& SC_FriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

SC_FriendList* SC_FriendList::default_instance_ = NULL;

SC_FriendList* SC_FriendList::New() const {
  return new SC_FriendList;
}

void SC_FriendList::Clear() {
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.t_FriendItem m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.t_FriendItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.t_FriendItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FriendList::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.t_FriendItem m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FriendList::MergeFrom(const SC_FriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FriendList::CopyFrom(const SC_FriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FriendList::IsInitialized() const {

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void SC_FriendList::Swap(SC_FriendList* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FriendList_descriptor_;
  metadata.reflection = SC_FriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FriendReqList::kMDataFieldNumber;
#endif  // !_MSC_VER

SC_FriendReqList::SC_FriendReqList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FriendReqList::InitAsDefaultInstance() {
}

SC_FriendReqList::SC_FriendReqList(const SC_FriendReqList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FriendReqList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FriendReqList::~SC_FriendReqList() {
  SharedDtor();
}

void SC_FriendReqList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FriendReqList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FriendReqList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FriendReqList_descriptor_;
}

const SC_FriendReqList& SC_FriendReqList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

SC_FriendReqList* SC_FriendReqList::default_instance_ = NULL;

SC_FriendReqList* SC_FriendReqList::New() const {
  return new SC_FriendReqList;
}

void SC_FriendReqList::Clear() {
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FriendReqList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.t_FriendReqItem m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FriendReqList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.t_FriendReqItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FriendReqList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.t_FriendReqItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FriendReqList::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.t_FriendReqItem m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FriendReqList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FriendReqList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FriendReqList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FriendReqList::MergeFrom(const SC_FriendReqList& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FriendReqList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FriendReqList::CopyFrom(const SC_FriendReqList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FriendReqList::IsInitialized() const {

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void SC_FriendReqList::Swap(SC_FriendReqList* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FriendReqList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FriendReqList_descriptor_;
  metadata.reflection = SC_FriendReqList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_ReqAddFriend::kMPlayeridFieldNumber;
#endif  // !_MSC_VER

CS_ReqAddFriend::CS_ReqAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_ReqAddFriend::InitAsDefaultInstance() {
}

CS_ReqAddFriend::CS_ReqAddFriend(const CS_ReqAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_ReqAddFriend::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_ReqAddFriend::~CS_ReqAddFriend() {
  SharedDtor();
}

void CS_ReqAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_ReqAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_ReqAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_ReqAddFriend_descriptor_;
}

const CS_ReqAddFriend& CS_ReqAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

CS_ReqAddFriend* CS_ReqAddFriend::default_instance_ = NULL;

CS_ReqAddFriend* CS_ReqAddFriend::New() const {
  return new CS_ReqAddFriend;
}

void CS_ReqAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_ReqAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_ReqAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_ReqAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_ReqAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_ReqAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_ReqAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_ReqAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_ReqAddFriend::MergeFrom(const CS_ReqAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_ReqAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_ReqAddFriend::CopyFrom(const CS_ReqAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_ReqAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_ReqAddFriend::Swap(CS_ReqAddFriend* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_ReqAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_ReqAddFriend_descriptor_;
  metadata.reflection = CS_ReqAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_FriendFind::kMPlayeridFieldNumber;
#endif  // !_MSC_VER

CS_FriendFind::CS_FriendFind()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_FriendFind::InitAsDefaultInstance() {
}

CS_FriendFind::CS_FriendFind(const CS_FriendFind& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_FriendFind::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_FriendFind::~CS_FriendFind() {
  SharedDtor();
}

void CS_FriendFind::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_FriendFind::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_FriendFind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_FriendFind_descriptor_;
}

const CS_FriendFind& CS_FriendFind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

CS_FriendFind* CS_FriendFind::default_instance_ = NULL;

CS_FriendFind* CS_FriendFind::New() const {
  return new CS_FriendFind;
}

void CS_FriendFind::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_FriendFind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_FriendFind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_FriendFind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_FriendFind::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_FriendFind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_FriendFind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_FriendFind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_FriendFind::MergeFrom(const CS_FriendFind& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_FriendFind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_FriendFind::CopyFrom(const CS_FriendFind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FriendFind::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_FriendFind::Swap(CS_FriendFind* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_FriendFind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_FriendFind_descriptor_;
  metadata.reflection = CS_FriendFind_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FriendFindRst::kBfindFieldNumber;
const int SC_FriendFindRst::kPlayeridFieldNumber;
const int SC_FriendFindRst::kNameFieldNumber;
const int SC_FriendFindRst::kHeadidFieldNumber;
#endif  // !_MSC_VER

SC_FriendFindRst::SC_FriendFindRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FriendFindRst::InitAsDefaultInstance() {
}

SC_FriendFindRst::SC_FriendFindRst(const SC_FriendFindRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FriendFindRst::SharedCtor() {
  _cached_size_ = 0;
  bfind_ = 0;
  playerid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FriendFindRst::~SC_FriendFindRst() {
  SharedDtor();
}

void SC_FriendFindRst::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SC_FriendFindRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FriendFindRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FriendFindRst_descriptor_;
}

const SC_FriendFindRst& SC_FriendFindRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

SC_FriendFindRst* SC_FriendFindRst::default_instance_ = NULL;

SC_FriendFindRst* SC_FriendFindRst::New() const {
  return new SC_FriendFindRst;
}

void SC_FriendFindRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bfind_ = 0;
    playerid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FriendFindRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bfind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bfind_)));
          set_has_bfind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required int32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headid;
        break;
      }

      // optional int32 headid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FriendFindRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bfind = 1;
  if (has_bfind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bfind(), output);
  }

  // required int32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 headid = 4;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FriendFindRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bfind = 1;
  if (has_bfind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bfind(), target);
  }

  // required int32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 headid = 4;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FriendFindRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bfind = 1;
    if (has_bfind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bfind());
    }

    // required int32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 headid = 4;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FriendFindRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FriendFindRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FriendFindRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FriendFindRst::MergeFrom(const SC_FriendFindRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bfind()) {
      set_bfind(from.bfind());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FriendFindRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FriendFindRst::CopyFrom(const SC_FriendFindRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FriendFindRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC_FriendFindRst::Swap(SC_FriendFindRst* other) {
  if (other != this) {
    std::swap(bfind_, other->bfind_);
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FriendFindRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FriendFindRst_descriptor_;
  metadata.reflection = SC_FriendFindRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_DelFriend::kMFriendidFieldNumber;
#endif  // !_MSC_VER

CS_DelFriend::CS_DelFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_DelFriend::InitAsDefaultInstance() {
}

CS_DelFriend::CS_DelFriend(const CS_DelFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_DelFriend::SharedCtor() {
  _cached_size_ = 0;
  m_friendid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_DelFriend::~CS_DelFriend() {
  SharedDtor();
}

void CS_DelFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_DelFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_DelFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_DelFriend_descriptor_;
}

const CS_DelFriend& CS_DelFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

CS_DelFriend* CS_DelFriend::default_instance_ = NULL;

CS_DelFriend* CS_DelFriend::New() const {
  return new CS_DelFriend;
}

void CS_DelFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_friendid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_DelFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_friendid_)));
          set_has_m_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_DelFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_friendid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_DelFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_friendid = 1;
  if (has_m_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_friendid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_DelFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_friendid = 1;
    if (has_m_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_friendid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_DelFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_DelFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_DelFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_DelFriend::MergeFrom(const CS_DelFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_friendid()) {
      set_m_friendid(from.m_friendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_DelFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_DelFriend::CopyFrom(const CS_DelFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_DelFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_DelFriend::Swap(CS_DelFriend* other) {
  if (other != this) {
    std::swap(m_friendid_, other->m_friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_DelFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_DelFriend_descriptor_;
  metadata.reflection = CS_DelFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_AddFriend::kMDataFieldNumber;
#endif  // !_MSC_VER

SC_AddFriend::SC_AddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_AddFriend::InitAsDefaultInstance() {
  m_data_ = const_cast< ::rpc::t_FriendItem*>(&::rpc::t_FriendItem::default_instance());
}

SC_AddFriend::SC_AddFriend(const SC_AddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_AddFriend::SharedCtor() {
  _cached_size_ = 0;
  m_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_AddFriend::~SC_AddFriend() {
  SharedDtor();
}

void SC_AddFriend::SharedDtor() {
  if (this != default_instance_) {
    delete m_data_;
  }
}

void SC_AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_AddFriend_descriptor_;
}

const SC_AddFriend& SC_AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

SC_AddFriend* SC_AddFriend::default_instance_ = NULL;

SC_AddFriend* SC_AddFriend::New() const {
  return new SC_AddFriend;
}

void SC_AddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_data()) {
      if (m_data_ != NULL) m_data_->::rpc::t_FriendItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .rpc.t_FriendItem m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .rpc.t_FriendItem m_data = 1;
  if (has_m_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_AddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .rpc.t_FriendItem m_data = 1;
  if (has_m_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_AddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .rpc.t_FriendItem m_data = 1;
    if (has_m_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_AddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_AddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_AddFriend::MergeFrom(const SC_AddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_data()) {
      mutable_m_data()->::rpc::t_FriendItem::MergeFrom(from.m_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_AddFriend::CopyFrom(const SC_AddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_AddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_m_data()) {
    if (!this->m_data().IsInitialized()) return false;
  }
  return true;
}

void SC_AddFriend::Swap(SC_AddFriend* other) {
  if (other != this) {
    std::swap(m_data_, other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_AddFriend_descriptor_;
  metadata.reflection = SC_AddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_NotifyReqAddFriend::kPlayeridFieldNumber;
const int SC_NotifyReqAddFriend::kNameFieldNumber;
const int SC_NotifyReqAddFriend::kHeadidFieldNumber;
#endif  // !_MSC_VER

SC_NotifyReqAddFriend::SC_NotifyReqAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_NotifyReqAddFriend::InitAsDefaultInstance() {
}

SC_NotifyReqAddFriend::SC_NotifyReqAddFriend(const SC_NotifyReqAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_NotifyReqAddFriend::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_NotifyReqAddFriend::~SC_NotifyReqAddFriend() {
  SharedDtor();
}

void SC_NotifyReqAddFriend::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SC_NotifyReqAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_NotifyReqAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_NotifyReqAddFriend_descriptor_;
}

const SC_NotifyReqAddFriend& SC_NotifyReqAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

SC_NotifyReqAddFriend* SC_NotifyReqAddFriend::default_instance_ = NULL;

SC_NotifyReqAddFriend* SC_NotifyReqAddFriend::New() const {
  return new SC_NotifyReqAddFriend;
}

void SC_NotifyReqAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_NotifyReqAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // required int32 headid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_NotifyReqAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_NotifyReqAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_NotifyReqAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_NotifyReqAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_NotifyReqAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_NotifyReqAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_NotifyReqAddFriend::MergeFrom(const SC_NotifyReqAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_NotifyReqAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_NotifyReqAddFriend::CopyFrom(const SC_NotifyReqAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_NotifyReqAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SC_NotifyReqAddFriend::Swap(SC_NotifyReqAddFriend* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_NotifyReqAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_NotifyReqAddFriend_descriptor_;
  metadata.reflection = SC_NotifyReqAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_FriendVerifyOtherReq::kMAgreeFieldNumber;
const int CS_FriendVerifyOtherReq::kMPlayeridFieldNumber;
#endif  // !_MSC_VER

CS_FriendVerifyOtherReq::CS_FriendVerifyOtherReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_FriendVerifyOtherReq::InitAsDefaultInstance() {
}

CS_FriendVerifyOtherReq::CS_FriendVerifyOtherReq(const CS_FriendVerifyOtherReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_FriendVerifyOtherReq::SharedCtor() {
  _cached_size_ = 0;
  m_agree_ = 0;
  m_playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_FriendVerifyOtherReq::~CS_FriendVerifyOtherReq() {
  SharedDtor();
}

void CS_FriendVerifyOtherReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_FriendVerifyOtherReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_FriendVerifyOtherReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_FriendVerifyOtherReq_descriptor_;
}

const CS_FriendVerifyOtherReq& CS_FriendVerifyOtherReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

CS_FriendVerifyOtherReq* CS_FriendVerifyOtherReq::default_instance_ = NULL;

CS_FriendVerifyOtherReq* CS_FriendVerifyOtherReq::New() const {
  return new CS_FriendVerifyOtherReq;
}

void CS_FriendVerifyOtherReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_agree_ = 0;
    m_playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_FriendVerifyOtherReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_agree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_agree_)));
          set_has_m_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // required int32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_FriendVerifyOtherReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_agree = 1;
  if (has_m_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_agree(), output);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_FriendVerifyOtherReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_agree = 1;
  if (has_m_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_agree(), target);
  }

  // required int32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_FriendVerifyOtherReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_agree = 1;
    if (has_m_agree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_agree());
    }

    // required int32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_FriendVerifyOtherReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_FriendVerifyOtherReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_FriendVerifyOtherReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_FriendVerifyOtherReq::MergeFrom(const CS_FriendVerifyOtherReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_agree()) {
      set_m_agree(from.m_agree());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_FriendVerifyOtherReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_FriendVerifyOtherReq::CopyFrom(const CS_FriendVerifyOtherReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FriendVerifyOtherReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS_FriendVerifyOtherReq::Swap(CS_FriendVerifyOtherReq* other) {
  if (other != this) {
    std::swap(m_agree_, other->m_agree_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_FriendVerifyOtherReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_FriendVerifyOtherReq_descriptor_;
  metadata.reflection = CS_FriendVerifyOtherReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FriendNotifyVerifyRst::kAgreeFieldNumber;
const int SC_FriendNotifyVerifyRst::kPlayeridFieldNumber;
const int SC_FriendNotifyVerifyRst::kNameFieldNumber;
const int SC_FriendNotifyVerifyRst::kHeadidFieldNumber;
#endif  // !_MSC_VER

SC_FriendNotifyVerifyRst::SC_FriendNotifyVerifyRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FriendNotifyVerifyRst::InitAsDefaultInstance() {
}

SC_FriendNotifyVerifyRst::SC_FriendNotifyVerifyRst(const SC_FriendNotifyVerifyRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FriendNotifyVerifyRst::SharedCtor() {
  _cached_size_ = 0;
  agree_ = 0;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FriendNotifyVerifyRst::~SC_FriendNotifyVerifyRst() {
  SharedDtor();
}

void SC_FriendNotifyVerifyRst::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SC_FriendNotifyVerifyRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FriendNotifyVerifyRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FriendNotifyVerifyRst_descriptor_;
}

const SC_FriendNotifyVerifyRst& SC_FriendNotifyVerifyRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

SC_FriendNotifyVerifyRst* SC_FriendNotifyVerifyRst::default_instance_ = NULL;

SC_FriendNotifyVerifyRst* SC_FriendNotifyVerifyRst::New() const {
  return new SC_FriendNotifyVerifyRst;
}

void SC_FriendNotifyVerifyRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agree_ = 0;
    playerid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FriendNotifyVerifyRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 agree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headid;
        break;
      }

      // required int32 headid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FriendNotifyVerifyRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 agree = 1;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->agree(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required int32 headid = 4;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FriendNotifyVerifyRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 agree = 1;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->agree(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int32 headid = 4;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FriendNotifyVerifyRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 agree = 1;
    if (has_agree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agree());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 headid = 4;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FriendNotifyVerifyRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FriendNotifyVerifyRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FriendNotifyVerifyRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FriendNotifyVerifyRst::MergeFrom(const SC_FriendNotifyVerifyRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FriendNotifyVerifyRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FriendNotifyVerifyRst::CopyFrom(const SC_FriendNotifyVerifyRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FriendNotifyVerifyRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SC_FriendNotifyVerifyRst::Swap(SC_FriendNotifyVerifyRst* other) {
  if (other != this) {
    std::swap(agree_, other->agree_);
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FriendNotifyVerifyRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FriendNotifyVerifyRst_descriptor_;
  metadata.reflection = SC_FriendNotifyVerifyRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_FriendSendMsg::kMPlayeridFieldNumber;
const int CS_FriendSendMsg::kMContentFieldNumber;
#endif  // !_MSC_VER

CS_FriendSendMsg::CS_FriendSendMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_FriendSendMsg::InitAsDefaultInstance() {
}

CS_FriendSendMsg::CS_FriendSendMsg(const CS_FriendSendMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_FriendSendMsg::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0;
  m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_FriendSendMsg::~CS_FriendSendMsg() {
  SharedDtor();
}

void CS_FriendSendMsg::SharedDtor() {
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    delete m_content_;
  }
  if (this != default_instance_) {
  }
}

void CS_FriendSendMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_FriendSendMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_FriendSendMsg_descriptor_;
}

const CS_FriendSendMsg& CS_FriendSendMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

CS_FriendSendMsg* CS_FriendSendMsg::default_instance_ = NULL;

CS_FriendSendMsg* CS_FriendSendMsg::New() const {
  return new CS_FriendSendMsg;
}

void CS_FriendSendMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0;
    if (has_m_content()) {
      if (m_content_ != &::google::protobuf::internal::kEmptyString) {
        m_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_FriendSendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_content;
        break;
      }

      // required string m_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_content().data(), this->m_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_FriendSendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playerid(), output);
  }

  // required string m_content = 2;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_FriendSendMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playerid(), target);
  }

  // required string m_content = 2;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_FriendSendMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required string m_content = 2;
    if (has_m_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_FriendSendMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_FriendSendMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_FriendSendMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_FriendSendMsg::MergeFrom(const CS_FriendSendMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_content()) {
      set_m_content(from.m_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_FriendSendMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_FriendSendMsg::CopyFrom(const CS_FriendSendMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FriendSendMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CS_FriendSendMsg::Swap(CS_FriendSendMsg* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_content_, other->m_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_FriendSendMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_FriendSendMsg_descriptor_;
  metadata.reflection = CS_FriendSendMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_NotifyFriendMsg::kMPlayeridFieldNumber;
const int SC_NotifyFriendMsg::kMContentFieldNumber;
#endif  // !_MSC_VER

SC_NotifyFriendMsg::SC_NotifyFriendMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_NotifyFriendMsg::InitAsDefaultInstance() {
}

SC_NotifyFriendMsg::SC_NotifyFriendMsg(const SC_NotifyFriendMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_NotifyFriendMsg::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0;
  m_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_NotifyFriendMsg::~SC_NotifyFriendMsg() {
  SharedDtor();
}

void SC_NotifyFriendMsg::SharedDtor() {
  if (m_content_ != &::google::protobuf::internal::kEmptyString) {
    delete m_content_;
  }
  if (this != default_instance_) {
  }
}

void SC_NotifyFriendMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_NotifyFriendMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_NotifyFriendMsg_descriptor_;
}

const SC_NotifyFriendMsg& SC_NotifyFriendMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

SC_NotifyFriendMsg* SC_NotifyFriendMsg::default_instance_ = NULL;

SC_NotifyFriendMsg* SC_NotifyFriendMsg::New() const {
  return new SC_NotifyFriendMsg;
}

void SC_NotifyFriendMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0;
    if (has_m_content()) {
      if (m_content_ != &::google::protobuf::internal::kEmptyString) {
        m_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_NotifyFriendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_content;
        break;
      }

      // required string m_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_content().data(), this->m_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_NotifyFriendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playerid(), output);
  }

  // required string m_content = 2;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_NotifyFriendMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playerid(), target);
  }

  // required string m_content = 2;
  if (has_m_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_content().data(), this->m_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_NotifyFriendMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

    // required string m_content = 2;
    if (has_m_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_NotifyFriendMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_NotifyFriendMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_NotifyFriendMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_NotifyFriendMsg::MergeFrom(const SC_NotifyFriendMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_content()) {
      set_m_content(from.m_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_NotifyFriendMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_NotifyFriendMsg::CopyFrom(const SC_NotifyFriendMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_NotifyFriendMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SC_NotifyFriendMsg::Swap(SC_NotifyFriendMsg* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_content_, other->m_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_NotifyFriendMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_NotifyFriendMsg_descriptor_;
  metadata.reflection = SC_NotifyFriendMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CS_FriendMsgRecord::kMPlayeridFieldNumber;
#endif  // !_MSC_VER

CS_FriendMsgRecord::CS_FriendMsgRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CS_FriendMsgRecord::InitAsDefaultInstance() {
}

CS_FriendMsgRecord::CS_FriendMsgRecord(const CS_FriendMsgRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CS_FriendMsgRecord::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_FriendMsgRecord::~CS_FriendMsgRecord() {
  SharedDtor();
}

void CS_FriendMsgRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_FriendMsgRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_FriendMsgRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_FriendMsgRecord_descriptor_;
}

const CS_FriendMsgRecord& CS_FriendMsgRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

CS_FriendMsgRecord* CS_FriendMsgRecord::default_instance_ = NULL;

CS_FriendMsgRecord* CS_FriendMsgRecord::New() const {
  return new CS_FriendMsgRecord;
}

void CS_FriendMsgRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_FriendMsgRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CS_FriendMsgRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CS_FriendMsgRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CS_FriendMsgRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_FriendMsgRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_FriendMsgRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_FriendMsgRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_FriendMsgRecord::MergeFrom(const CS_FriendMsgRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_FriendMsgRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_FriendMsgRecord::CopyFrom(const CS_FriendMsgRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_FriendMsgRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CS_FriendMsgRecord::Swap(CS_FriendMsgRecord* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_FriendMsgRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_FriendMsgRecord_descriptor_;
  metadata.reflection = CS_FriendMsgRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_FriendMsgRecord::kMDataFieldNumber;
#endif  // !_MSC_VER

SC_FriendMsgRecord::SC_FriendMsgRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SC_FriendMsgRecord::InitAsDefaultInstance() {
}

SC_FriendMsgRecord::SC_FriendMsgRecord(const SC_FriendMsgRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SC_FriendMsgRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_FriendMsgRecord::~SC_FriendMsgRecord() {
  SharedDtor();
}

void SC_FriendMsgRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_FriendMsgRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_FriendMsgRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_FriendMsgRecord_descriptor_;
}

const SC_FriendMsgRecord& SC_FriendMsgRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fFriend_2eproto();
  return *default_instance_;
}

SC_FriendMsgRecord* SC_FriendMsgRecord::default_instance_ = NULL;

SC_FriendMsgRecord* SC_FriendMsgRecord::New() const {
  return new SC_FriendMsgRecord;
}

void SC_FriendMsgRecord::Clear() {
  m_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_FriendMsgRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rpc.t_FriendMsgRecordItem m_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_m_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SC_FriendMsgRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rpc.t_FriendMsgRecordItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->m_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SC_FriendMsgRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rpc.t_FriendMsgRecordItem m_data = 1;
  for (int i = 0; i < this->m_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->m_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SC_FriendMsgRecord::ByteSize() const {
  int total_size = 0;

  // repeated .rpc.t_FriendMsgRecordItem m_data = 1;
  total_size += 1 * this->m_data_size();
  for (int i = 0; i < this->m_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_FriendMsgRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_FriendMsgRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_FriendMsgRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_FriendMsgRecord::MergeFrom(const SC_FriendMsgRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_data_.MergeFrom(from.m_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_FriendMsgRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_FriendMsgRecord::CopyFrom(const SC_FriendMsgRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_FriendMsgRecord::IsInitialized() const {

  for (int i = 0; i < m_data_size(); i++) {
    if (!this->m_data(i).IsInitialized()) return false;
  }
  return true;
}

void SC_FriendMsgRecord::Swap(SC_FriendMsgRecord* other) {
  if (other != this) {
    m_data_.Swap(&other->m_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_FriendMsgRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_FriendMsgRecord_descriptor_;
  metadata.reflection = SC_FriendMsgRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
