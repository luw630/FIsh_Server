// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_Server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Packet_Server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rpc {

namespace {

const ::google::protobuf::Descriptor* Sys_SvrNodeLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sys_SvrNodeLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sys_SvrNodeLoginRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sys_SvrNodeLoginRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GA_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GA_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* AG_LoginRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AG_LoginRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GA_Offline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GA_Offline_reflection_ = NULL;
const ::google::protobuf::Descriptor* GGame_Offline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GGame_Offline_reflection_ = NULL;
const ::google::protobuf::Descriptor* AG_KickPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AG_KickPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AGame_EnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AGame_EnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameA_EnterGameRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameA_EnterGameRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* AGame_LeaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AGame_LeaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameA_LeaveGameRst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameA_LeaveGameRst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game_Work2Master_UpdateTableData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game_Work2Master_UpdateTableData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Game_Work2Master_SetPlayerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Game_Work2Master_SetPlayerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_ReqAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_ReqAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_AgreeAddFiend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_AgreeAddFiend_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_RefuseAddFiend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_RefuseAddFiend_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_SendMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_SendMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrManager_Post_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrManager_Post_reflection_ = NULL;
const ::google::protobuf::Descriptor* SvrManager_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvrManager_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* emPacket_Server_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Packet_5fServer_2eproto() {
  protobuf_AddDesc_Packet_5fServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Packet_Server.proto");
  GOOGLE_CHECK(file != NULL);
  Sys_SvrNodeLogin_descriptor_ = file->message_type(0);
  static const int Sys_SvrNodeLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_SvrNodeLogin, m_nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_SvrNodeLogin, m_key_),
  };
  Sys_SvrNodeLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sys_SvrNodeLogin_descriptor_,
      Sys_SvrNodeLogin::default_instance_,
      Sys_SvrNodeLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_SvrNodeLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_SvrNodeLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sys_SvrNodeLogin));
  Sys_SvrNodeLoginRst_descriptor_ = file->message_type(1);
  static const int Sys_SvrNodeLoginRst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_SvrNodeLoginRst, m_rst_),
  };
  Sys_SvrNodeLoginRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sys_SvrNodeLoginRst_descriptor_,
      Sys_SvrNodeLoginRst::default_instance_,
      Sys_SvrNodeLoginRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_SvrNodeLoginRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys_SvrNodeLoginRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sys_SvrNodeLoginRst));
  GA_Login_descriptor_ = file->message_type(2);
  static const int GA_Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GA_Login, m_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GA_Login, m_param_),
  };
  GA_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GA_Login_descriptor_,
      GA_Login::default_instance_,
      GA_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GA_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GA_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GA_Login));
  AG_LoginRst_descriptor_ = file->message_type(3);
  static const int AG_LoginRst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AG_LoginRst, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AG_LoginRst, m_param_),
  };
  AG_LoginRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AG_LoginRst_descriptor_,
      AG_LoginRst::default_instance_,
      AG_LoginRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AG_LoginRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AG_LoginRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AG_LoginRst));
  GA_Offline_descriptor_ = file->message_type(4);
  static const int GA_Offline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GA_Offline, m_playerid_),
  };
  GA_Offline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GA_Offline_descriptor_,
      GA_Offline::default_instance_,
      GA_Offline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GA_Offline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GA_Offline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GA_Offline));
  GGame_Offline_descriptor_ = file->message_type(5);
  static const int GGame_Offline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGame_Offline, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGame_Offline, m_sessionid_),
  };
  GGame_Offline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GGame_Offline_descriptor_,
      GGame_Offline::default_instance_,
      GGame_Offline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGame_Offline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GGame_Offline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GGame_Offline));
  AG_KickPlayer_descriptor_ = file->message_type(6);
  static const int AG_KickPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AG_KickPlayer, m_playerid_),
  };
  AG_KickPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AG_KickPlayer_descriptor_,
      AG_KickPlayer::default_instance_,
      AG_KickPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AG_KickPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AG_KickPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AG_KickPlayer));
  AGame_EnterGame_descriptor_ = file->message_type(7);
  static const int AGame_EnterGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGame_EnterGame, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGame_EnterGame, m_gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGame_EnterGame, m_gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGame_EnterGame, m_playerdata_),
  };
  AGame_EnterGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AGame_EnterGame_descriptor_,
      AGame_EnterGame::default_instance_,
      AGame_EnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGame_EnterGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGame_EnterGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AGame_EnterGame));
  GameA_EnterGameRst_descriptor_ = file->message_type(8);
  static const int GameA_EnterGameRst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameA_EnterGameRst, m_rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameA_EnterGameRst, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameA_EnterGameRst, m_gameid_),
  };
  GameA_EnterGameRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameA_EnterGameRst_descriptor_,
      GameA_EnterGameRst::default_instance_,
      GameA_EnterGameRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameA_EnterGameRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameA_EnterGameRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameA_EnterGameRst));
  AGame_LeaveGame_descriptor_ = file->message_type(9);
  static const int AGame_LeaveGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGame_LeaveGame, m_playerid_),
  };
  AGame_LeaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AGame_LeaveGame_descriptor_,
      AGame_LeaveGame::default_instance_,
      AGame_LeaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGame_LeaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AGame_LeaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AGame_LeaveGame));
  GameA_LeaveGameRst_descriptor_ = file->message_type(10);
  static const int GameA_LeaveGameRst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameA_LeaveGameRst, m_rst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameA_LeaveGameRst, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameA_LeaveGameRst, m_playerdata_),
  };
  GameA_LeaveGameRst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameA_LeaveGameRst_descriptor_,
      GameA_LeaveGameRst::default_instance_,
      GameA_LeaveGameRst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameA_LeaveGameRst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameA_LeaveGameRst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameA_LeaveGameRst));
  Game_Work2Master_UpdateTableData_descriptor_ = file->message_type(11);
  static const int Game_Work2Master_UpdateTableData_offsets_[1] = {
  };
  Game_Work2Master_UpdateTableData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game_Work2Master_UpdateTableData_descriptor_,
      Game_Work2Master_UpdateTableData::default_instance_,
      Game_Work2Master_UpdateTableData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Work2Master_UpdateTableData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Work2Master_UpdateTableData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game_Work2Master_UpdateTableData));
  Game_Work2Master_SetPlayerState_descriptor_ = file->message_type(12);
  static const int Game_Work2Master_SetPlayerState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Work2Master_SetPlayerState, m_playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Work2Master_SetPlayerState, m_status_),
  };
  Game_Work2Master_SetPlayerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Game_Work2Master_SetPlayerState_descriptor_,
      Game_Work2Master_SetPlayerState::default_instance_,
      Game_Work2Master_SetPlayerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Work2Master_SetPlayerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Game_Work2Master_SetPlayerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Game_Work2Master_SetPlayerState));
  Friend_ReqAddFriend_descriptor_ = file->message_type(13);
  static const int Friend_ReqAddFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_ReqAddFriend, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_ReqAddFriend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_ReqAddFriend, headid_),
  };
  Friend_ReqAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_ReqAddFriend_descriptor_,
      Friend_ReqAddFriend::default_instance_,
      Friend_ReqAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_ReqAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_ReqAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_ReqAddFriend));
  Friend_AgreeAddFiend_descriptor_ = file->message_type(14);
  static const int Friend_AgreeAddFiend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_AgreeAddFiend, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_AgreeAddFiend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_AgreeAddFiend, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_AgreeAddFiend, money_),
  };
  Friend_AgreeAddFiend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_AgreeAddFiend_descriptor_,
      Friend_AgreeAddFiend::default_instance_,
      Friend_AgreeAddFiend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_AgreeAddFiend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_AgreeAddFiend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_AgreeAddFiend));
  Friend_RefuseAddFiend_descriptor_ = file->message_type(15);
  static const int Friend_RefuseAddFiend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_RefuseAddFiend, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_RefuseAddFiend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_RefuseAddFiend, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_RefuseAddFiend, money_),
  };
  Friend_RefuseAddFiend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_RefuseAddFiend_descriptor_,
      Friend_RefuseAddFiend::default_instance_,
      Friend_RefuseAddFiend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_RefuseAddFiend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_RefuseAddFiend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_RefuseAddFiend));
  Friend_SendMsg_descriptor_ = file->message_type(16);
  static const int Friend_SendMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SendMsg, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SendMsg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SendMsg, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SendMsg, content_),
  };
  Friend_SendMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_SendMsg_descriptor_,
      Friend_SendMsg::default_instance_,
      Friend_SendMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SendMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend_SendMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend_SendMsg));
  SvrManager_Post_descriptor_ = file->message_type(17);
  static const int SvrManager_Post_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrManager_Post, postid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrManager_Post, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrManager_Post, body_),
  };
  SvrManager_Post_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrManager_Post_descriptor_,
      SvrManager_Post::default_instance_,
      SvrManager_Post_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrManager_Post, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrManager_Post, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrManager_Post));
  SvrManager_Response_descriptor_ = file->message_type(18);
  static const int SvrManager_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrManager_Response, postid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrManager_Response, body_),
  };
  SvrManager_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvrManager_Response_descriptor_,
      SvrManager_Response::default_instance_,
      SvrManager_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrManager_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvrManager_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvrManager_Response));
  emPacket_Server_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Packet_5fServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sys_SvrNodeLogin_descriptor_, &Sys_SvrNodeLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sys_SvrNodeLoginRst_descriptor_, &Sys_SvrNodeLoginRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GA_Login_descriptor_, &GA_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AG_LoginRst_descriptor_, &AG_LoginRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GA_Offline_descriptor_, &GA_Offline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GGame_Offline_descriptor_, &GGame_Offline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AG_KickPlayer_descriptor_, &AG_KickPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AGame_EnterGame_descriptor_, &AGame_EnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameA_EnterGameRst_descriptor_, &GameA_EnterGameRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AGame_LeaveGame_descriptor_, &AGame_LeaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameA_LeaveGameRst_descriptor_, &GameA_LeaveGameRst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game_Work2Master_UpdateTableData_descriptor_, &Game_Work2Master_UpdateTableData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Game_Work2Master_SetPlayerState_descriptor_, &Game_Work2Master_SetPlayerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_ReqAddFriend_descriptor_, &Friend_ReqAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_AgreeAddFiend_descriptor_, &Friend_AgreeAddFiend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_RefuseAddFiend_descriptor_, &Friend_RefuseAddFiend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_SendMsg_descriptor_, &Friend_SendMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrManager_Post_descriptor_, &SvrManager_Post::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvrManager_Response_descriptor_, &SvrManager_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Packet_5fServer_2eproto() {
  delete Sys_SvrNodeLogin::default_instance_;
  delete Sys_SvrNodeLogin_reflection_;
  delete Sys_SvrNodeLoginRst::default_instance_;
  delete Sys_SvrNodeLoginRst_reflection_;
  delete GA_Login::default_instance_;
  delete GA_Login_reflection_;
  delete AG_LoginRst::default_instance_;
  delete AG_LoginRst_reflection_;
  delete GA_Offline::default_instance_;
  delete GA_Offline_reflection_;
  delete GGame_Offline::default_instance_;
  delete GGame_Offline_reflection_;
  delete AG_KickPlayer::default_instance_;
  delete AG_KickPlayer_reflection_;
  delete AGame_EnterGame::default_instance_;
  delete AGame_EnterGame_reflection_;
  delete GameA_EnterGameRst::default_instance_;
  delete GameA_EnterGameRst_reflection_;
  delete AGame_LeaveGame::default_instance_;
  delete AGame_LeaveGame_reflection_;
  delete GameA_LeaveGameRst::default_instance_;
  delete GameA_LeaveGameRst_reflection_;
  delete Game_Work2Master_UpdateTableData::default_instance_;
  delete Game_Work2Master_UpdateTableData_reflection_;
  delete Game_Work2Master_SetPlayerState::default_instance_;
  delete Game_Work2Master_SetPlayerState_reflection_;
  delete Friend_ReqAddFriend::default_instance_;
  delete Friend_ReqAddFriend_reflection_;
  delete Friend_AgreeAddFiend::default_instance_;
  delete Friend_AgreeAddFiend_reflection_;
  delete Friend_RefuseAddFiend::default_instance_;
  delete Friend_RefuseAddFiend_reflection_;
  delete Friend_SendMsg::default_instance_;
  delete Friend_SendMsg_reflection_;
  delete SvrManager_Post::default_instance_;
  delete SvrManager_Post_reflection_;
  delete SvrManager_Response::default_instance_;
  delete SvrManager_Response_reflection_;
}

void protobuf_AddDesc_Packet_5fServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::rpc::protobuf_AddDesc_Packet_5fBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023Packet_Server.proto\022\003rpc\032\021Packet_Base."
    "proto\"3\n\020Sys_SvrNodeLogin\022\020\n\010m_nodeid\030\001 "
    "\002(\005\022\r\n\005m_key\030\002 \002(\t\"$\n\023Sys_SvrNodeLoginRs"
    "t\022\r\n\005m_rst\030\001 \002(\005\".\n\010GA_Login\022\021\n\tm_accoun"
    "t\030\001 \002(\t\022\017\n\007m_param\030\002 \002(\004\"2\n\013AG_LoginRst\022"
    "\022\n\nm_playerid\030\001 \002(\r\022\017\n\007m_param\030\002 \002(\004\" \n\n"
    "GA_Offline\022\022\n\nm_playerid\030\001 \002(\r\"8\n\rGGame_"
    "Offline\022\022\n\nm_playerid\030\001 \002(\r\022\023\n\013m_session"
    "id\030\002 \002(\004\"#\n\rAG_KickPlayer\022\022\n\nm_playerid\030"
    "\001 \002(\r\"~\n\017AGame_EnterGame\022\022\n\nm_playerid\030\001"
    " \002(\r\022\020\n\010m_gameid\030\002 \002(\005\022\023\n\013m_gatewayid\030\003 "
    "\002(\005\0220\n\014m_playerdata\030\004 \002(\0132\032.rpc.t_EnterG"
    "amePlayerData\"I\n\022GameA_EnterGameRst\022\r\n\005m"
    "_rst\030\001 \002(\005\022\022\n\nm_playerid\030\002 \002(\r\022\020\n\010m_game"
    "id\030\003 \002(\005\"%\n\017AGame_LeaveGame\022\022\n\nm_playeri"
    "d\030\001 \002(\r\"i\n\022GameA_LeaveGameRst\022\r\n\005m_rst\030\001"
    " \002(\005\022\022\n\nm_playerid\030\002 \002(\r\0220\n\014m_playerdata"
    "\030\003 \001(\0132\032.rpc.t_EnterGamePlayerData\"\"\n Ga"
    "me_Work2Master_UpdateTableData\"G\n\037Game_W"
    "ork2Master_SetPlayerState\022\022\n\nm_playerid\030"
    "\001 \002(\r\022\020\n\010m_status\030\002 \002(\005\"E\n\023Friend_ReqAdd"
    "Friend\022\020\n\010playerid\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\016"
    "\n\006headid\030\003 \002(\005\"U\n\024Friend_AgreeAddFiend\022\020"
    "\n\010playerid\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\016\n\006headid"
    "\030\003 \002(\005\022\r\n\005money\030\004 \002(\003\"V\n\025Friend_RefuseAd"
    "dFiend\022\020\n\010playerid\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\016"
    "\n\006headid\030\003 \002(\005\022\r\n\005money\030\004 \002(\003\"Q\n\016Friend_"
    "SendMsg\022\020\n\010playerid\030\001 \002(\r\022\014\n\004name\030\002 \002(\t\022"
    "\016\n\006headid\030\003 \002(\005\022\017\n\007content\030\004 \002(\t\"<\n\017SvrM"
    "anager_Post\022\016\n\006postid\030\001 \002(\004\022\013\n\003cur\030\002 \002(\t"
    "\022\014\n\004body\030\003 \002(\t\"3\n\023SvrManager_Response\022\016\n"
    "\006postid\030\001 \002(\004\022\014\n\004body\030\002 \002(\t*\246\004\n\017emPacket"
    "_Server\022\020\n\014EM_sys_Begin\020\020\022\027\n\023EM_Sys_SvrN"
    "odeLogin\020\021\022\032\n\026EM_Sys_SvrNodeLoginRst\020\022\022\017"
    "\n\013EM_GA_Login\020\023\022\022\n\016EM_AG_LoginRst\020\024\022\024\n\020E"
    "M_AG_KickPlayer\020\025\022\026\n\022EM_AGame_EnterGame\020"
    "\026\022\031\n\025EM_GameA_EnterGameRst\020\027\022\026\n\022EM_AGame"
    "_LeaveGame\020\030\022\031\n\025EM_GameA_LeaveGameRst\020\031\022"
    "\'\n#EM_Game_Work2Master_UpdateTableData\020\032"
    "\022&\n\"EM_Game_Work2Master_SetPlayerState\020\033"
    "\022\032\n\026EM_Friend_ReqAddFriend\020 \022\033\n\027EM_Frien"
    "d_AgreeAddFiend\020!\022\034\n\030EM_Friend_RefuseAdd"
    "Fiend\020\"\022\025\n\021EM_Friend_SendMsg\020#\022\026\n\022EM_Svr"
    "Manager_Post\020$\022\032\n\026EM_SvrManager_Response"
    "\020%\022\021\n\rEM_GA_Offline\020&\022\024\n\020EM_GGame_Offlin"
    "e\020\'\022\017\n\nEM_sys_End\020\377\001", 1820);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Packet_Server.proto", &protobuf_RegisterTypes);
  Sys_SvrNodeLogin::default_instance_ = new Sys_SvrNodeLogin();
  Sys_SvrNodeLoginRst::default_instance_ = new Sys_SvrNodeLoginRst();
  GA_Login::default_instance_ = new GA_Login();
  AG_LoginRst::default_instance_ = new AG_LoginRst();
  GA_Offline::default_instance_ = new GA_Offline();
  GGame_Offline::default_instance_ = new GGame_Offline();
  AG_KickPlayer::default_instance_ = new AG_KickPlayer();
  AGame_EnterGame::default_instance_ = new AGame_EnterGame();
  GameA_EnterGameRst::default_instance_ = new GameA_EnterGameRst();
  AGame_LeaveGame::default_instance_ = new AGame_LeaveGame();
  GameA_LeaveGameRst::default_instance_ = new GameA_LeaveGameRst();
  Game_Work2Master_UpdateTableData::default_instance_ = new Game_Work2Master_UpdateTableData();
  Game_Work2Master_SetPlayerState::default_instance_ = new Game_Work2Master_SetPlayerState();
  Friend_ReqAddFriend::default_instance_ = new Friend_ReqAddFriend();
  Friend_AgreeAddFiend::default_instance_ = new Friend_AgreeAddFiend();
  Friend_RefuseAddFiend::default_instance_ = new Friend_RefuseAddFiend();
  Friend_SendMsg::default_instance_ = new Friend_SendMsg();
  SvrManager_Post::default_instance_ = new SvrManager_Post();
  SvrManager_Response::default_instance_ = new SvrManager_Response();
  Sys_SvrNodeLogin::default_instance_->InitAsDefaultInstance();
  Sys_SvrNodeLoginRst::default_instance_->InitAsDefaultInstance();
  GA_Login::default_instance_->InitAsDefaultInstance();
  AG_LoginRst::default_instance_->InitAsDefaultInstance();
  GA_Offline::default_instance_->InitAsDefaultInstance();
  GGame_Offline::default_instance_->InitAsDefaultInstance();
  AG_KickPlayer::default_instance_->InitAsDefaultInstance();
  AGame_EnterGame::default_instance_->InitAsDefaultInstance();
  GameA_EnterGameRst::default_instance_->InitAsDefaultInstance();
  AGame_LeaveGame::default_instance_->InitAsDefaultInstance();
  GameA_LeaveGameRst::default_instance_->InitAsDefaultInstance();
  Game_Work2Master_UpdateTableData::default_instance_->InitAsDefaultInstance();
  Game_Work2Master_SetPlayerState::default_instance_->InitAsDefaultInstance();
  Friend_ReqAddFriend::default_instance_->InitAsDefaultInstance();
  Friend_AgreeAddFiend::default_instance_->InitAsDefaultInstance();
  Friend_RefuseAddFiend::default_instance_->InitAsDefaultInstance();
  Friend_SendMsg::default_instance_->InitAsDefaultInstance();
  SvrManager_Post::default_instance_->InitAsDefaultInstance();
  SvrManager_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Packet_5fServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Packet_5fServer_2eproto {
  StaticDescriptorInitializer_Packet_5fServer_2eproto() {
    protobuf_AddDesc_Packet_5fServer_2eproto();
  }
} static_descriptor_initializer_Packet_5fServer_2eproto_;
const ::google::protobuf::EnumDescriptor* emPacket_Server_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emPacket_Server_descriptor_;
}
bool emPacket_Server_IsValid(int value) {
  switch(value) {
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Sys_SvrNodeLogin::kMNodeidFieldNumber;
const int Sys_SvrNodeLogin::kMKeyFieldNumber;
#endif  // !_MSC_VER

Sys_SvrNodeLogin::Sys_SvrNodeLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sys_SvrNodeLogin::InitAsDefaultInstance() {
}

Sys_SvrNodeLogin::Sys_SvrNodeLogin(const Sys_SvrNodeLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sys_SvrNodeLogin::SharedCtor() {
  _cached_size_ = 0;
  m_nodeid_ = 0;
  m_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sys_SvrNodeLogin::~Sys_SvrNodeLogin() {
  SharedDtor();
}

void Sys_SvrNodeLogin::SharedDtor() {
  if (m_key_ != &::google::protobuf::internal::kEmptyString) {
    delete m_key_;
  }
  if (this != default_instance_) {
  }
}

void Sys_SvrNodeLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sys_SvrNodeLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sys_SvrNodeLogin_descriptor_;
}

const Sys_SvrNodeLogin& Sys_SvrNodeLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

Sys_SvrNodeLogin* Sys_SvrNodeLogin::default_instance_ = NULL;

Sys_SvrNodeLogin* Sys_SvrNodeLogin::New() const {
  return new Sys_SvrNodeLogin;
}

void Sys_SvrNodeLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_nodeid_ = 0;
    if (has_m_key()) {
      if (m_key_ != &::google::protobuf::internal::kEmptyString) {
        m_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sys_SvrNodeLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_nodeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nodeid_)));
          set_has_m_nodeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_key;
        break;
      }

      // required string m_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_key().data(), this->m_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sys_SvrNodeLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_nodeid = 1;
  if (has_m_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_nodeid(), output);
  }

  // required string m_key = 2;
  if (has_m_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_key().data(), this->m_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sys_SvrNodeLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_nodeid = 1;
  if (has_m_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_nodeid(), target);
  }

  // required string m_key = 2;
  if (has_m_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_key().data(), this->m_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sys_SvrNodeLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_nodeid = 1;
    if (has_m_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nodeid());
    }

    // required string m_key = 2;
    if (has_m_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sys_SvrNodeLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sys_SvrNodeLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sys_SvrNodeLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sys_SvrNodeLogin::MergeFrom(const Sys_SvrNodeLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_nodeid()) {
      set_m_nodeid(from.m_nodeid());
    }
    if (from.has_m_key()) {
      set_m_key(from.m_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sys_SvrNodeLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sys_SvrNodeLogin::CopyFrom(const Sys_SvrNodeLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sys_SvrNodeLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Sys_SvrNodeLogin::Swap(Sys_SvrNodeLogin* other) {
  if (other != this) {
    std::swap(m_nodeid_, other->m_nodeid_);
    std::swap(m_key_, other->m_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sys_SvrNodeLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sys_SvrNodeLogin_descriptor_;
  metadata.reflection = Sys_SvrNodeLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sys_SvrNodeLoginRst::kMRstFieldNumber;
#endif  // !_MSC_VER

Sys_SvrNodeLoginRst::Sys_SvrNodeLoginRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sys_SvrNodeLoginRst::InitAsDefaultInstance() {
}

Sys_SvrNodeLoginRst::Sys_SvrNodeLoginRst(const Sys_SvrNodeLoginRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sys_SvrNodeLoginRst::SharedCtor() {
  _cached_size_ = 0;
  m_rst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sys_SvrNodeLoginRst::~Sys_SvrNodeLoginRst() {
  SharedDtor();
}

void Sys_SvrNodeLoginRst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sys_SvrNodeLoginRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sys_SvrNodeLoginRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sys_SvrNodeLoginRst_descriptor_;
}

const Sys_SvrNodeLoginRst& Sys_SvrNodeLoginRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

Sys_SvrNodeLoginRst* Sys_SvrNodeLoginRst::default_instance_ = NULL;

Sys_SvrNodeLoginRst* Sys_SvrNodeLoginRst::New() const {
  return new Sys_SvrNodeLoginRst;
}

void Sys_SvrNodeLoginRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rst_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sys_SvrNodeLoginRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rst_)));
          set_has_m_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sys_SvrNodeLoginRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sys_SvrNodeLoginRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sys_SvrNodeLoginRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_rst = 1;
    if (has_m_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sys_SvrNodeLoginRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sys_SvrNodeLoginRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sys_SvrNodeLoginRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sys_SvrNodeLoginRst::MergeFrom(const Sys_SvrNodeLoginRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rst()) {
      set_m_rst(from.m_rst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sys_SvrNodeLoginRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sys_SvrNodeLoginRst::CopyFrom(const Sys_SvrNodeLoginRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sys_SvrNodeLoginRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Sys_SvrNodeLoginRst::Swap(Sys_SvrNodeLoginRst* other) {
  if (other != this) {
    std::swap(m_rst_, other->m_rst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sys_SvrNodeLoginRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sys_SvrNodeLoginRst_descriptor_;
  metadata.reflection = Sys_SvrNodeLoginRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GA_Login::kMAccountFieldNumber;
const int GA_Login::kMParamFieldNumber;
#endif  // !_MSC_VER

GA_Login::GA_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GA_Login::InitAsDefaultInstance() {
}

GA_Login::GA_Login(const GA_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GA_Login::SharedCtor() {
  _cached_size_ = 0;
  m_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_param_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GA_Login::~GA_Login() {
  SharedDtor();
}

void GA_Login::SharedDtor() {
  if (m_account_ != &::google::protobuf::internal::kEmptyString) {
    delete m_account_;
  }
  if (this != default_instance_) {
  }
}

void GA_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GA_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GA_Login_descriptor_;
}

const GA_Login& GA_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

GA_Login* GA_Login::default_instance_ = NULL;

GA_Login* GA_Login::New() const {
  return new GA_Login;
}

void GA_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_account()) {
      if (m_account_ != &::google::protobuf::internal::kEmptyString) {
        m_account_->clear();
      }
    }
    m_param_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GA_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_account().data(), this->m_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_param;
        break;
      }

      // required uint64 m_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GA_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string m_account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_account().data(), this->m_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_account(), output);
  }

  // required uint64 m_param = 2;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->m_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GA_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string m_account = 1;
  if (has_m_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_account().data(), this->m_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_account(), target);
  }

  // required uint64 m_param = 2;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->m_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GA_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string m_account = 1;
    if (has_m_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_account());
    }

    // required uint64 m_param = 2;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GA_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GA_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GA_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GA_Login::MergeFrom(const GA_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_account()) {
      set_m_account(from.m_account());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GA_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GA_Login::CopyFrom(const GA_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GA_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GA_Login::Swap(GA_Login* other) {
  if (other != this) {
    std::swap(m_account_, other->m_account_);
    std::swap(m_param_, other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GA_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GA_Login_descriptor_;
  metadata.reflection = GA_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AG_LoginRst::kMPlayeridFieldNumber;
const int AG_LoginRst::kMParamFieldNumber;
#endif  // !_MSC_VER

AG_LoginRst::AG_LoginRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AG_LoginRst::InitAsDefaultInstance() {
}

AG_LoginRst::AG_LoginRst(const AG_LoginRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AG_LoginRst::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0u;
  m_param_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AG_LoginRst::~AG_LoginRst() {
  SharedDtor();
}

void AG_LoginRst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AG_LoginRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AG_LoginRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AG_LoginRst_descriptor_;
}

const AG_LoginRst& AG_LoginRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

AG_LoginRst* AG_LoginRst::default_instance_ = NULL;

AG_LoginRst* AG_LoginRst::New() const {
  return new AG_LoginRst;
}

void AG_LoginRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0u;
    m_param_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AG_LoginRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_param;
        break;
      }

      // required uint64 m_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AG_LoginRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_playerid(), output);
  }

  // required uint64 m_param = 2;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->m_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AG_LoginRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_playerid(), target);
  }

  // required uint64 m_param = 2;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->m_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AG_LoginRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

    // required uint64 m_param = 2;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AG_LoginRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AG_LoginRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AG_LoginRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AG_LoginRst::MergeFrom(const AG_LoginRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AG_LoginRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AG_LoginRst::CopyFrom(const AG_LoginRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AG_LoginRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AG_LoginRst::Swap(AG_LoginRst* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_param_, other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AG_LoginRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AG_LoginRst_descriptor_;
  metadata.reflection = AG_LoginRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GA_Offline::kMPlayeridFieldNumber;
#endif  // !_MSC_VER

GA_Offline::GA_Offline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GA_Offline::InitAsDefaultInstance() {
}

GA_Offline::GA_Offline(const GA_Offline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GA_Offline::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GA_Offline::~GA_Offline() {
  SharedDtor();
}

void GA_Offline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GA_Offline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GA_Offline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GA_Offline_descriptor_;
}

const GA_Offline& GA_Offline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

GA_Offline* GA_Offline::default_instance_ = NULL;

GA_Offline* GA_Offline::New() const {
  return new GA_Offline;
}

void GA_Offline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GA_Offline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GA_Offline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GA_Offline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GA_Offline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GA_Offline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GA_Offline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GA_Offline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GA_Offline::MergeFrom(const GA_Offline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GA_Offline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GA_Offline::CopyFrom(const GA_Offline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GA_Offline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GA_Offline::Swap(GA_Offline* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GA_Offline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GA_Offline_descriptor_;
  metadata.reflection = GA_Offline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GGame_Offline::kMPlayeridFieldNumber;
const int GGame_Offline::kMSessionidFieldNumber;
#endif  // !_MSC_VER

GGame_Offline::GGame_Offline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GGame_Offline::InitAsDefaultInstance() {
}

GGame_Offline::GGame_Offline(const GGame_Offline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GGame_Offline::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0u;
  m_sessionid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GGame_Offline::~GGame_Offline() {
  SharedDtor();
}

void GGame_Offline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GGame_Offline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GGame_Offline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GGame_Offline_descriptor_;
}

const GGame_Offline& GGame_Offline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

GGame_Offline* GGame_Offline::default_instance_ = NULL;

GGame_Offline* GGame_Offline::New() const {
  return new GGame_Offline;
}

void GGame_Offline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0u;
    m_sessionid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GGame_Offline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_sessionid;
        break;
      }

      // required uint64 m_sessionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_sessionid_)));
          set_has_m_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GGame_Offline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_playerid(), output);
  }

  // required uint64 m_sessionid = 2;
  if (has_m_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->m_sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GGame_Offline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_playerid(), target);
  }

  // required uint64 m_sessionid = 2;
  if (has_m_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->m_sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GGame_Offline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

    // required uint64 m_sessionid = 2;
    if (has_m_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GGame_Offline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GGame_Offline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GGame_Offline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GGame_Offline::MergeFrom(const GGame_Offline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_sessionid()) {
      set_m_sessionid(from.m_sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GGame_Offline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GGame_Offline::CopyFrom(const GGame_Offline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GGame_Offline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GGame_Offline::Swap(GGame_Offline* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_sessionid_, other->m_sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GGame_Offline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GGame_Offline_descriptor_;
  metadata.reflection = GGame_Offline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AG_KickPlayer::kMPlayeridFieldNumber;
#endif  // !_MSC_VER

AG_KickPlayer::AG_KickPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AG_KickPlayer::InitAsDefaultInstance() {
}

AG_KickPlayer::AG_KickPlayer(const AG_KickPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AG_KickPlayer::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AG_KickPlayer::~AG_KickPlayer() {
  SharedDtor();
}

void AG_KickPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AG_KickPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AG_KickPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AG_KickPlayer_descriptor_;
}

const AG_KickPlayer& AG_KickPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

AG_KickPlayer* AG_KickPlayer::default_instance_ = NULL;

AG_KickPlayer* AG_KickPlayer::New() const {
  return new AG_KickPlayer;
}

void AG_KickPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AG_KickPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AG_KickPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AG_KickPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AG_KickPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AG_KickPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AG_KickPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AG_KickPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AG_KickPlayer::MergeFrom(const AG_KickPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AG_KickPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AG_KickPlayer::CopyFrom(const AG_KickPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AG_KickPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AG_KickPlayer::Swap(AG_KickPlayer* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AG_KickPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AG_KickPlayer_descriptor_;
  metadata.reflection = AG_KickPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AGame_EnterGame::kMPlayeridFieldNumber;
const int AGame_EnterGame::kMGameidFieldNumber;
const int AGame_EnterGame::kMGatewayidFieldNumber;
const int AGame_EnterGame::kMPlayerdataFieldNumber;
#endif  // !_MSC_VER

AGame_EnterGame::AGame_EnterGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AGame_EnterGame::InitAsDefaultInstance() {
  m_playerdata_ = const_cast< ::rpc::t_EnterGamePlayerData*>(&::rpc::t_EnterGamePlayerData::default_instance());
}

AGame_EnterGame::AGame_EnterGame(const AGame_EnterGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AGame_EnterGame::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0u;
  m_gameid_ = 0;
  m_gatewayid_ = 0;
  m_playerdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AGame_EnterGame::~AGame_EnterGame() {
  SharedDtor();
}

void AGame_EnterGame::SharedDtor() {
  if (this != default_instance_) {
    delete m_playerdata_;
  }
}

void AGame_EnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AGame_EnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AGame_EnterGame_descriptor_;
}

const AGame_EnterGame& AGame_EnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

AGame_EnterGame* AGame_EnterGame::default_instance_ = NULL;

AGame_EnterGame* AGame_EnterGame::New() const {
  return new AGame_EnterGame;
}

void AGame_EnterGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0u;
    m_gameid_ = 0;
    m_gatewayid_ = 0;
    if (has_m_playerdata()) {
      if (m_playerdata_ != NULL) m_playerdata_->::rpc::t_EnterGamePlayerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AGame_EnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_gameid;
        break;
      }

      // required int32 m_gameid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gameid_)));
          set_has_m_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_gatewayid;
        break;
      }

      // required int32 m_gatewayid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gatewayid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gatewayid_)));
          set_has_m_gatewayid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_playerdata;
        break;
      }

      // required .rpc.t_EnterGamePlayerData m_playerdata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playerdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AGame_EnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_playerid(), output);
  }

  // required int32 m_gameid = 2;
  if (has_m_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_gameid(), output);
  }

  // required int32 m_gatewayid = 3;
  if (has_m_gatewayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_gatewayid(), output);
  }

  // required .rpc.t_EnterGamePlayerData m_playerdata = 4;
  if (has_m_playerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_playerdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AGame_EnterGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_playerid(), target);
  }

  // required int32 m_gameid = 2;
  if (has_m_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_gameid(), target);
  }

  // required int32 m_gatewayid = 3;
  if (has_m_gatewayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_gatewayid(), target);
  }

  // required .rpc.t_EnterGamePlayerData m_playerdata = 4;
  if (has_m_playerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_playerdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AGame_EnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

    // required int32 m_gameid = 2;
    if (has_m_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gameid());
    }

    // required int32 m_gatewayid = 3;
    if (has_m_gatewayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gatewayid());
    }

    // required .rpc.t_EnterGamePlayerData m_playerdata = 4;
    if (has_m_playerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_playerdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AGame_EnterGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AGame_EnterGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AGame_EnterGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AGame_EnterGame::MergeFrom(const AGame_EnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_gameid()) {
      set_m_gameid(from.m_gameid());
    }
    if (from.has_m_gatewayid()) {
      set_m_gatewayid(from.m_gatewayid());
    }
    if (from.has_m_playerdata()) {
      mutable_m_playerdata()->::rpc::t_EnterGamePlayerData::MergeFrom(from.m_playerdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AGame_EnterGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AGame_EnterGame::CopyFrom(const AGame_EnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AGame_EnterGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_m_playerdata()) {
    if (!this->m_playerdata().IsInitialized()) return false;
  }
  return true;
}

void AGame_EnterGame::Swap(AGame_EnterGame* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_gameid_, other->m_gameid_);
    std::swap(m_gatewayid_, other->m_gatewayid_);
    std::swap(m_playerdata_, other->m_playerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AGame_EnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AGame_EnterGame_descriptor_;
  metadata.reflection = AGame_EnterGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameA_EnterGameRst::kMRstFieldNumber;
const int GameA_EnterGameRst::kMPlayeridFieldNumber;
const int GameA_EnterGameRst::kMGameidFieldNumber;
#endif  // !_MSC_VER

GameA_EnterGameRst::GameA_EnterGameRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameA_EnterGameRst::InitAsDefaultInstance() {
}

GameA_EnterGameRst::GameA_EnterGameRst(const GameA_EnterGameRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameA_EnterGameRst::SharedCtor() {
  _cached_size_ = 0;
  m_rst_ = 0;
  m_playerid_ = 0u;
  m_gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameA_EnterGameRst::~GameA_EnterGameRst() {
  SharedDtor();
}

void GameA_EnterGameRst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameA_EnterGameRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameA_EnterGameRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameA_EnterGameRst_descriptor_;
}

const GameA_EnterGameRst& GameA_EnterGameRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

GameA_EnterGameRst* GameA_EnterGameRst::default_instance_ = NULL;

GameA_EnterGameRst* GameA_EnterGameRst::New() const {
  return new GameA_EnterGameRst;
}

void GameA_EnterGameRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rst_ = 0;
    m_playerid_ = 0u;
    m_gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameA_EnterGameRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rst_)));
          set_has_m_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // required uint32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_gameid;
        break;
      }

      // required int32 m_gameid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gameid_)));
          set_has_m_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameA_EnterGameRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rst(), output);
  }

  // required uint32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_playerid(), output);
  }

  // required int32 m_gameid = 3;
  if (has_m_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameA_EnterGameRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rst(), target);
  }

  // required uint32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_playerid(), target);
  }

  // required int32 m_gameid = 3;
  if (has_m_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameA_EnterGameRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_rst = 1;
    if (has_m_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rst());
    }

    // required uint32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

    // required int32 m_gameid = 3;
    if (has_m_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameA_EnterGameRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameA_EnterGameRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameA_EnterGameRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameA_EnterGameRst::MergeFrom(const GameA_EnterGameRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rst()) {
      set_m_rst(from.m_rst());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_gameid()) {
      set_m_gameid(from.m_gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameA_EnterGameRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameA_EnterGameRst::CopyFrom(const GameA_EnterGameRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameA_EnterGameRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GameA_EnterGameRst::Swap(GameA_EnterGameRst* other) {
  if (other != this) {
    std::swap(m_rst_, other->m_rst_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_gameid_, other->m_gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameA_EnterGameRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameA_EnterGameRst_descriptor_;
  metadata.reflection = GameA_EnterGameRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AGame_LeaveGame::kMPlayeridFieldNumber;
#endif  // !_MSC_VER

AGame_LeaveGame::AGame_LeaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AGame_LeaveGame::InitAsDefaultInstance() {
}

AGame_LeaveGame::AGame_LeaveGame(const AGame_LeaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AGame_LeaveGame::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AGame_LeaveGame::~AGame_LeaveGame() {
  SharedDtor();
}

void AGame_LeaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AGame_LeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AGame_LeaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AGame_LeaveGame_descriptor_;
}

const AGame_LeaveGame& AGame_LeaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

AGame_LeaveGame* AGame_LeaveGame::default_instance_ = NULL;

AGame_LeaveGame* AGame_LeaveGame::New() const {
  return new AGame_LeaveGame;
}

void AGame_LeaveGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AGame_LeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AGame_LeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AGame_LeaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AGame_LeaveGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AGame_LeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AGame_LeaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AGame_LeaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AGame_LeaveGame::MergeFrom(const AGame_LeaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AGame_LeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AGame_LeaveGame::CopyFrom(const AGame_LeaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AGame_LeaveGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AGame_LeaveGame::Swap(AGame_LeaveGame* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AGame_LeaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AGame_LeaveGame_descriptor_;
  metadata.reflection = AGame_LeaveGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameA_LeaveGameRst::kMRstFieldNumber;
const int GameA_LeaveGameRst::kMPlayeridFieldNumber;
const int GameA_LeaveGameRst::kMPlayerdataFieldNumber;
#endif  // !_MSC_VER

GameA_LeaveGameRst::GameA_LeaveGameRst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameA_LeaveGameRst::InitAsDefaultInstance() {
  m_playerdata_ = const_cast< ::rpc::t_EnterGamePlayerData*>(&::rpc::t_EnterGamePlayerData::default_instance());
}

GameA_LeaveGameRst::GameA_LeaveGameRst(const GameA_LeaveGameRst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameA_LeaveGameRst::SharedCtor() {
  _cached_size_ = 0;
  m_rst_ = 0;
  m_playerid_ = 0u;
  m_playerdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameA_LeaveGameRst::~GameA_LeaveGameRst() {
  SharedDtor();
}

void GameA_LeaveGameRst::SharedDtor() {
  if (this != default_instance_) {
    delete m_playerdata_;
  }
}

void GameA_LeaveGameRst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameA_LeaveGameRst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameA_LeaveGameRst_descriptor_;
}

const GameA_LeaveGameRst& GameA_LeaveGameRst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

GameA_LeaveGameRst* GameA_LeaveGameRst::default_instance_ = NULL;

GameA_LeaveGameRst* GameA_LeaveGameRst::New() const {
  return new GameA_LeaveGameRst;
}

void GameA_LeaveGameRst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rst_ = 0;
    m_playerid_ = 0u;
    if (has_m_playerdata()) {
      if (m_playerdata_ != NULL) m_playerdata_->::rpc::t_EnterGamePlayerData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameA_LeaveGameRst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_rst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rst_)));
          set_has_m_rst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_playerid;
        break;
      }

      // required uint32 m_playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_playerdata;
        break;
      }

      // optional .rpc.t_EnterGamePlayerData m_playerdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playerdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameA_LeaveGameRst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rst(), output);
  }

  // required uint32 m_playerid = 2;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_playerid(), output);
  }

  // optional .rpc.t_EnterGamePlayerData m_playerdata = 3;
  if (has_m_playerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_playerdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameA_LeaveGameRst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 m_rst = 1;
  if (has_m_rst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rst(), target);
  }

  // required uint32 m_playerid = 2;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_playerid(), target);
  }

  // optional .rpc.t_EnterGamePlayerData m_playerdata = 3;
  if (has_m_playerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_playerdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameA_LeaveGameRst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m_rst = 1;
    if (has_m_rst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rst());
    }

    // required uint32 m_playerid = 2;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

    // optional .rpc.t_EnterGamePlayerData m_playerdata = 3;
    if (has_m_playerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_playerdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameA_LeaveGameRst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameA_LeaveGameRst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameA_LeaveGameRst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameA_LeaveGameRst::MergeFrom(const GameA_LeaveGameRst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rst()) {
      set_m_rst(from.m_rst());
    }
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_playerdata()) {
      mutable_m_playerdata()->::rpc::t_EnterGamePlayerData::MergeFrom(from.m_playerdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameA_LeaveGameRst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameA_LeaveGameRst::CopyFrom(const GameA_LeaveGameRst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameA_LeaveGameRst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_m_playerdata()) {
    if (!this->m_playerdata().IsInitialized()) return false;
  }
  return true;
}

void GameA_LeaveGameRst::Swap(GameA_LeaveGameRst* other) {
  if (other != this) {
    std::swap(m_rst_, other->m_rst_);
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_playerdata_, other->m_playerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameA_LeaveGameRst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameA_LeaveGameRst_descriptor_;
  metadata.reflection = GameA_LeaveGameRst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Game_Work2Master_UpdateTableData::Game_Work2Master_UpdateTableData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game_Work2Master_UpdateTableData::InitAsDefaultInstance() {
}

Game_Work2Master_UpdateTableData::Game_Work2Master_UpdateTableData(const Game_Work2Master_UpdateTableData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game_Work2Master_UpdateTableData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game_Work2Master_UpdateTableData::~Game_Work2Master_UpdateTableData() {
  SharedDtor();
}

void Game_Work2Master_UpdateTableData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game_Work2Master_UpdateTableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_Work2Master_UpdateTableData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game_Work2Master_UpdateTableData_descriptor_;
}

const Game_Work2Master_UpdateTableData& Game_Work2Master_UpdateTableData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

Game_Work2Master_UpdateTableData* Game_Work2Master_UpdateTableData::default_instance_ = NULL;

Game_Work2Master_UpdateTableData* Game_Work2Master_UpdateTableData::New() const {
  return new Game_Work2Master_UpdateTableData;
}

void Game_Work2Master_UpdateTableData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game_Work2Master_UpdateTableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Game_Work2Master_UpdateTableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game_Work2Master_UpdateTableData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game_Work2Master_UpdateTableData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_Work2Master_UpdateTableData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game_Work2Master_UpdateTableData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game_Work2Master_UpdateTableData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game_Work2Master_UpdateTableData::MergeFrom(const Game_Work2Master_UpdateTableData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game_Work2Master_UpdateTableData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_Work2Master_UpdateTableData::CopyFrom(const Game_Work2Master_UpdateTableData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_Work2Master_UpdateTableData::IsInitialized() const {

  return true;
}

void Game_Work2Master_UpdateTableData::Swap(Game_Work2Master_UpdateTableData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game_Work2Master_UpdateTableData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game_Work2Master_UpdateTableData_descriptor_;
  metadata.reflection = Game_Work2Master_UpdateTableData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Game_Work2Master_SetPlayerState::kMPlayeridFieldNumber;
const int Game_Work2Master_SetPlayerState::kMStatusFieldNumber;
#endif  // !_MSC_VER

Game_Work2Master_SetPlayerState::Game_Work2Master_SetPlayerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Game_Work2Master_SetPlayerState::InitAsDefaultInstance() {
}

Game_Work2Master_SetPlayerState::Game_Work2Master_SetPlayerState(const Game_Work2Master_SetPlayerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Game_Work2Master_SetPlayerState::SharedCtor() {
  _cached_size_ = 0;
  m_playerid_ = 0u;
  m_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Game_Work2Master_SetPlayerState::~Game_Work2Master_SetPlayerState() {
  SharedDtor();
}

void Game_Work2Master_SetPlayerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Game_Work2Master_SetPlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Game_Work2Master_SetPlayerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Game_Work2Master_SetPlayerState_descriptor_;
}

const Game_Work2Master_SetPlayerState& Game_Work2Master_SetPlayerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

Game_Work2Master_SetPlayerState* Game_Work2Master_SetPlayerState::default_instance_ = NULL;

Game_Work2Master_SetPlayerState* Game_Work2Master_SetPlayerState::New() const {
  return new Game_Work2Master_SetPlayerState;
}

void Game_Work2Master_SetPlayerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_playerid_ = 0u;
    m_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Game_Work2Master_SetPlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m_playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_playerid_)));
          set_has_m_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_status;
        break;
      }

      // required int32 m_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_status_)));
          set_has_m_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Game_Work2Master_SetPlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m_playerid(), output);
  }

  // required int32 m_status = 2;
  if (has_m_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Game_Work2Master_SetPlayerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 m_playerid = 1;
  if (has_m_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m_playerid(), target);
  }

  // required int32 m_status = 2;
  if (has_m_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Game_Work2Master_SetPlayerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m_playerid = 1;
    if (has_m_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m_playerid());
    }

    // required int32 m_status = 2;
    if (has_m_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Game_Work2Master_SetPlayerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Game_Work2Master_SetPlayerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Game_Work2Master_SetPlayerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Game_Work2Master_SetPlayerState::MergeFrom(const Game_Work2Master_SetPlayerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_playerid()) {
      set_m_playerid(from.m_playerid());
    }
    if (from.has_m_status()) {
      set_m_status(from.m_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Game_Work2Master_SetPlayerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Game_Work2Master_SetPlayerState::CopyFrom(const Game_Work2Master_SetPlayerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game_Work2Master_SetPlayerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Game_Work2Master_SetPlayerState::Swap(Game_Work2Master_SetPlayerState* other) {
  if (other != this) {
    std::swap(m_playerid_, other->m_playerid_);
    std::swap(m_status_, other->m_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Game_Work2Master_SetPlayerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Game_Work2Master_SetPlayerState_descriptor_;
  metadata.reflection = Game_Work2Master_SetPlayerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_ReqAddFriend::kPlayeridFieldNumber;
const int Friend_ReqAddFriend::kNameFieldNumber;
const int Friend_ReqAddFriend::kHeadidFieldNumber;
#endif  // !_MSC_VER

Friend_ReqAddFriend::Friend_ReqAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_ReqAddFriend::InitAsDefaultInstance() {
}

Friend_ReqAddFriend::Friend_ReqAddFriend(const Friend_ReqAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_ReqAddFriend::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_ReqAddFriend::~Friend_ReqAddFriend() {
  SharedDtor();
}

void Friend_ReqAddFriend::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Friend_ReqAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_ReqAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_ReqAddFriend_descriptor_;
}

const Friend_ReqAddFriend& Friend_ReqAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

Friend_ReqAddFriend* Friend_ReqAddFriend::default_instance_ = NULL;

Friend_ReqAddFriend* Friend_ReqAddFriend::New() const {
  return new Friend_ReqAddFriend;
}

void Friend_ReqAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_ReqAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // required int32 headid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_ReqAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_ReqAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_ReqAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_ReqAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_ReqAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_ReqAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_ReqAddFriend::MergeFrom(const Friend_ReqAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_ReqAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_ReqAddFriend::CopyFrom(const Friend_ReqAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_ReqAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Friend_ReqAddFriend::Swap(Friend_ReqAddFriend* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_ReqAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_ReqAddFriend_descriptor_;
  metadata.reflection = Friend_ReqAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_AgreeAddFiend::kPlayeridFieldNumber;
const int Friend_AgreeAddFiend::kNameFieldNumber;
const int Friend_AgreeAddFiend::kHeadidFieldNumber;
const int Friend_AgreeAddFiend::kMoneyFieldNumber;
#endif  // !_MSC_VER

Friend_AgreeAddFiend::Friend_AgreeAddFiend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_AgreeAddFiend::InitAsDefaultInstance() {
}

Friend_AgreeAddFiend::Friend_AgreeAddFiend(const Friend_AgreeAddFiend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_AgreeAddFiend::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_AgreeAddFiend::~Friend_AgreeAddFiend() {
  SharedDtor();
}

void Friend_AgreeAddFiend::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Friend_AgreeAddFiend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_AgreeAddFiend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_AgreeAddFiend_descriptor_;
}

const Friend_AgreeAddFiend& Friend_AgreeAddFiend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

Friend_AgreeAddFiend* Friend_AgreeAddFiend::default_instance_ = NULL;

Friend_AgreeAddFiend* Friend_AgreeAddFiend::New() const {
  return new Friend_AgreeAddFiend;
}

void Friend_AgreeAddFiend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_AgreeAddFiend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // required int32 headid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // required int64 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_AgreeAddFiend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  // required int64 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_AgreeAddFiend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  // required int64 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_AgreeAddFiend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // required int64 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_AgreeAddFiend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_AgreeAddFiend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_AgreeAddFiend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_AgreeAddFiend::MergeFrom(const Friend_AgreeAddFiend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_AgreeAddFiend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_AgreeAddFiend::CopyFrom(const Friend_AgreeAddFiend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_AgreeAddFiend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Friend_AgreeAddFiend::Swap(Friend_AgreeAddFiend* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_AgreeAddFiend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_AgreeAddFiend_descriptor_;
  metadata.reflection = Friend_AgreeAddFiend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_RefuseAddFiend::kPlayeridFieldNumber;
const int Friend_RefuseAddFiend::kNameFieldNumber;
const int Friend_RefuseAddFiend::kHeadidFieldNumber;
const int Friend_RefuseAddFiend::kMoneyFieldNumber;
#endif  // !_MSC_VER

Friend_RefuseAddFiend::Friend_RefuseAddFiend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_RefuseAddFiend::InitAsDefaultInstance() {
}

Friend_RefuseAddFiend::Friend_RefuseAddFiend(const Friend_RefuseAddFiend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_RefuseAddFiend::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_RefuseAddFiend::~Friend_RefuseAddFiend() {
  SharedDtor();
}

void Friend_RefuseAddFiend::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Friend_RefuseAddFiend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_RefuseAddFiend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_RefuseAddFiend_descriptor_;
}

const Friend_RefuseAddFiend& Friend_RefuseAddFiend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

Friend_RefuseAddFiend* Friend_RefuseAddFiend::default_instance_ = NULL;

Friend_RefuseAddFiend* Friend_RefuseAddFiend::New() const {
  return new Friend_RefuseAddFiend;
}

void Friend_RefuseAddFiend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_RefuseAddFiend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // required int32 headid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // required int64 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_RefuseAddFiend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  // required int64 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_RefuseAddFiend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  // required int64 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_RefuseAddFiend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // required int64 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_RefuseAddFiend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_RefuseAddFiend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_RefuseAddFiend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_RefuseAddFiend::MergeFrom(const Friend_RefuseAddFiend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_RefuseAddFiend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_RefuseAddFiend::CopyFrom(const Friend_RefuseAddFiend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_RefuseAddFiend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Friend_RefuseAddFiend::Swap(Friend_RefuseAddFiend* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_RefuseAddFiend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_RefuseAddFiend_descriptor_;
  metadata.reflection = Friend_RefuseAddFiend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend_SendMsg::kPlayeridFieldNumber;
const int Friend_SendMsg::kNameFieldNumber;
const int Friend_SendMsg::kHeadidFieldNumber;
const int Friend_SendMsg::kContentFieldNumber;
#endif  // !_MSC_VER

Friend_SendMsg::Friend_SendMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Friend_SendMsg::InitAsDefaultInstance() {
}

Friend_SendMsg::Friend_SendMsg(const Friend_SendMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Friend_SendMsg::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend_SendMsg::~Friend_SendMsg() {
  SharedDtor();
}

void Friend_SendMsg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Friend_SendMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend_SendMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_SendMsg_descriptor_;
}

const Friend_SendMsg& Friend_SendMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

Friend_SendMsg* Friend_SendMsg::default_instance_ = NULL;

Friend_SendMsg* Friend_SendMsg::New() const {
  return new Friend_SendMsg;
}

void Friend_SendMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headid_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend_SendMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headid;
        break;
      }

      // required int32 headid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Friend_SendMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headid(), output);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Friend_SendMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 headid = 3;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headid(), target);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Friend_SendMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 headid = 3;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // required string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend_SendMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend_SendMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend_SendMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend_SendMsg::MergeFrom(const Friend_SendMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend_SendMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend_SendMsg::CopyFrom(const Friend_SendMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend_SendMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Friend_SendMsg::Swap(Friend_SendMsg* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(headid_, other->headid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend_SendMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_SendMsg_descriptor_;
  metadata.reflection = Friend_SendMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrManager_Post::kPostidFieldNumber;
const int SvrManager_Post::kCurFieldNumber;
const int SvrManager_Post::kBodyFieldNumber;
#endif  // !_MSC_VER

SvrManager_Post::SvrManager_Post()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrManager_Post::InitAsDefaultInstance() {
}

SvrManager_Post::SvrManager_Post(const SvrManager_Post& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrManager_Post::SharedCtor() {
  _cached_size_ = 0;
  postid_ = GOOGLE_ULONGLONG(0);
  cur_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrManager_Post::~SvrManager_Post() {
  SharedDtor();
}

void SvrManager_Post::SharedDtor() {
  if (cur_ != &::google::protobuf::internal::kEmptyString) {
    delete cur_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void SvrManager_Post::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrManager_Post::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrManager_Post_descriptor_;
}

const SvrManager_Post& SvrManager_Post::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

SvrManager_Post* SvrManager_Post::default_instance_ = NULL;

SvrManager_Post* SvrManager_Post::New() const {
  return new SvrManager_Post;
}

void SvrManager_Post::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    postid_ = GOOGLE_ULONGLONG(0);
    if (has_cur()) {
      if (cur_ != &::google::protobuf::internal::kEmptyString) {
        cur_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrManager_Post::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 postid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &postid_)));
          set_has_postid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cur;
        break;
      }

      // required string cur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cur()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cur().data(), this->cur().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // required string body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrManager_Post::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 postid = 1;
  if (has_postid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->postid(), output);
  }

  // required string cur = 2;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur().data(), this->cur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cur(), output);
  }

  // required string body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrManager_Post::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 postid = 1;
  if (has_postid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->postid(), target);
  }

  // required string cur = 2;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cur().data(), this->cur().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cur(), target);
  }

  // required string body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrManager_Post::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 postid = 1;
    if (has_postid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->postid());
    }

    // required string cur = 2;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cur());
    }

    // required string body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrManager_Post::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrManager_Post* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrManager_Post*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrManager_Post::MergeFrom(const SvrManager_Post& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_postid()) {
      set_postid(from.postid());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrManager_Post::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrManager_Post::CopyFrom(const SvrManager_Post& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrManager_Post::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SvrManager_Post::Swap(SvrManager_Post* other) {
  if (other != this) {
    std::swap(postid_, other->postid_);
    std::swap(cur_, other->cur_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrManager_Post::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrManager_Post_descriptor_;
  metadata.reflection = SvrManager_Post_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SvrManager_Response::kPostidFieldNumber;
const int SvrManager_Response::kBodyFieldNumber;
#endif  // !_MSC_VER

SvrManager_Response::SvrManager_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SvrManager_Response::InitAsDefaultInstance() {
}

SvrManager_Response::SvrManager_Response(const SvrManager_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SvrManager_Response::SharedCtor() {
  _cached_size_ = 0;
  postid_ = GOOGLE_ULONGLONG(0);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvrManager_Response::~SvrManager_Response() {
  SharedDtor();
}

void SvrManager_Response::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void SvrManager_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvrManager_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrManager_Response_descriptor_;
}

const SvrManager_Response& SvrManager_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Packet_5fServer_2eproto();
  return *default_instance_;
}

SvrManager_Response* SvrManager_Response::default_instance_ = NULL;

SvrManager_Response* SvrManager_Response::New() const {
  return new SvrManager_Response;
}

void SvrManager_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    postid_ = GOOGLE_ULONGLONG(0);
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvrManager_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 postid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &postid_)));
          set_has_postid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required string body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SvrManager_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 postid = 1;
  if (has_postid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->postid(), output);
  }

  // required string body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SvrManager_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 postid = 1;
  if (has_postid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->postid(), target);
  }

  // required string body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SvrManager_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 postid = 1;
    if (has_postid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->postid());
    }

    // required string body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvrManager_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvrManager_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvrManager_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvrManager_Response::MergeFrom(const SvrManager_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_postid()) {
      set_postid(from.postid());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvrManager_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvrManager_Response::CopyFrom(const SvrManager_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrManager_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SvrManager_Response::Swap(SvrManager_Response* other) {
  if (other != this) {
    std::swap(postid_, other->postid_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvrManager_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvrManager_Response_descriptor_;
  metadata.reflection = SvrManager_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)
