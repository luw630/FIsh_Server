// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_DB.proto

#ifndef PROTOBUF_Packet_5fDB_2eproto__INCLUDED
#define PROTOBUF_Packet_5fDB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Packet_Base.pb.h"
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Packet_5fDB_2eproto();
void protobuf_AssignDesc_Packet_5fDB_2eproto();
void protobuf_ShutdownFile_Packet_5fDB_2eproto();

class t_FriendItemData;
class t_MailItemData;
class t_FriendReqItemData;
class t_FriendDatas;
class t_MailDatas;
class t_BankDatas;
class t_playerBaseData;
class SD_LoadData;
class DS_PlayerData;
class SD_InsertPlayer;
class SD_SavePlayer;
class param_FindPlayer;
class SD_FindPlayer;
class DS_FindPlayerRst;

enum emPacket_Db {
  em_SD_LoadData = 80,
  em_DS_PlayerData = 81,
  em_SD_InsertPlayer = 82,
  em_SD_SavePlayer = 83,
  em_SD_FindPlayer = 84,
  em_DS_FindPlayerRst = 85
};
bool emPacket_Db_IsValid(int value);
const emPacket_Db emPacket_Db_MIN = em_SD_LoadData;
const emPacket_Db emPacket_Db_MAX = em_DS_FindPlayerRst;
const int emPacket_Db_ARRAYSIZE = emPacket_Db_MAX + 1;

const ::google::protobuf::EnumDescriptor* emPacket_Db_descriptor();
inline const ::std::string& emPacket_Db_Name(emPacket_Db value) {
  return ::google::protobuf::internal::NameOfEnum(
    emPacket_Db_descriptor(), value);
}
inline bool emPacket_Db_Parse(
    const ::std::string& name, emPacket_Db* value) {
  return ::google::protobuf::internal::ParseNamedEnum<emPacket_Db>(
    emPacket_Db_descriptor(), name, value);
}
// ===================================================================

class t_FriendItemData : public ::google::protobuf::Message {
 public:
  t_FriendItemData();
  virtual ~t_FriendItemData();

  t_FriendItemData(const t_FriendItemData& from);

  inline t_FriendItemData& operator=(const t_FriendItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_FriendItemData& default_instance();

  void Swap(t_FriendItemData* other);

  // implements Message ----------------------------------------------

  t_FriendItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_FriendItemData& from);
  void MergeFrom(const t_FriendItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 headid = 3;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 3;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // required int64 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rpc.t_FriendItemData)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int64 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static t_FriendItemData* default_instance_;
};
// -------------------------------------------------------------------

class t_MailItemData : public ::google::protobuf::Message {
 public:
  t_MailItemData();
  virtual ~t_MailItemData();

  t_MailItemData(const t_MailItemData& from);

  inline t_MailItemData& operator=(const t_MailItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_MailItemData& default_instance();

  void Swap(t_MailItemData* other);

  // implements Message ----------------------------------------------

  t_MailItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_MailItemData& from);
  void MergeFrom(const t_MailItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rpc.t_MailItemData)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static t_MailItemData* default_instance_;
};
// -------------------------------------------------------------------

class t_FriendReqItemData : public ::google::protobuf::Message {
 public:
  t_FriendReqItemData();
  virtual ~t_FriendReqItemData();

  t_FriendReqItemData(const t_FriendReqItemData& from);

  inline t_FriendReqItemData& operator=(const t_FriendReqItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_FriendReqItemData& default_instance();

  void Swap(t_FriendReqItemData* other);

  // implements Message ----------------------------------------------

  t_FriendReqItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_FriendReqItemData& from);
  void MergeFrom(const t_FriendReqItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::int32 playerid() const;
  inline void set_playerid(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 headid = 3;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 3;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // required uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required int64 money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rpc.t_FriendReqItemData)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 playerid_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static t_FriendReqItemData* default_instance_;
};
// -------------------------------------------------------------------

class t_FriendDatas : public ::google::protobuf::Message {
 public:
  t_FriendDatas();
  virtual ~t_FriendDatas();

  t_FriendDatas(const t_FriendDatas& from);

  inline t_FriendDatas& operator=(const t_FriendDatas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_FriendDatas& default_instance();

  void Swap(t_FriendDatas* other);

  // implements Message ----------------------------------------------

  t_FriendDatas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_FriendDatas& from);
  void MergeFrom(const t_FriendDatas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.t_FriendItemData friends = 1;
  inline int friends_size() const;
  inline void clear_friends();
  static const int kFriendsFieldNumber = 1;
  inline const ::rpc::t_FriendItemData& friends(int index) const;
  inline ::rpc::t_FriendItemData* mutable_friends(int index);
  inline ::rpc::t_FriendItemData* add_friends();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendItemData >&
      friends() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendItemData >*
      mutable_friends();

  // repeated .rpc.t_FriendReqItemData friendreq = 2;
  inline int friendreq_size() const;
  inline void clear_friendreq();
  static const int kFriendreqFieldNumber = 2;
  inline const ::rpc::t_FriendReqItemData& friendreq(int index) const;
  inline ::rpc::t_FriendReqItemData* mutable_friendreq(int index);
  inline ::rpc::t_FriendReqItemData* add_friendreq();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendReqItemData >&
      friendreq() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendReqItemData >*
      mutable_friendreq();

  // @@protoc_insertion_point(class_scope:rpc.t_FriendDatas)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendItemData > friends_;
  ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendReqItemData > friendreq_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static t_FriendDatas* default_instance_;
};
// -------------------------------------------------------------------

class t_MailDatas : public ::google::protobuf::Message {
 public:
  t_MailDatas();
  virtual ~t_MailDatas();

  t_MailDatas(const t_MailDatas& from);

  inline t_MailDatas& operator=(const t_MailDatas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_MailDatas& default_instance();

  void Swap(t_MailDatas* other);

  // implements Message ----------------------------------------------

  t_MailDatas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_MailDatas& from);
  void MergeFrom(const t_MailDatas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rpc.t_MailItemData mails = 1;
  inline int mails_size() const;
  inline void clear_mails();
  static const int kMailsFieldNumber = 1;
  inline const ::rpc::t_MailItemData& mails(int index) const;
  inline ::rpc::t_MailItemData* mutable_mails(int index);
  inline ::rpc::t_MailItemData* add_mails();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_MailItemData >&
      mails() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::t_MailItemData >*
      mutable_mails();

  // @@protoc_insertion_point(class_scope:rpc.t_MailDatas)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rpc::t_MailItemData > mails_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static t_MailDatas* default_instance_;
};
// -------------------------------------------------------------------

class t_BankDatas : public ::google::protobuf::Message {
 public:
  t_BankDatas();
  virtual ~t_BankDatas();

  t_BankDatas(const t_BankDatas& from);

  inline t_BankDatas& operator=(const t_BankDatas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_BankDatas& default_instance();

  void Swap(t_BankDatas* other);

  // implements Message ----------------------------------------------

  t_BankDatas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_BankDatas& from);
  void MergeFrom(const t_BankDatas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool havepwd = 1;
  inline bool has_havepwd() const;
  inline void clear_havepwd();
  static const int kHavepwdFieldNumber = 1;
  inline bool havepwd() const;
  inline void set_havepwd(bool value);

  // required string pwd = 2;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 2;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // required int64 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rpc.t_BankDatas)
 private:
  inline void set_has_havepwd();
  inline void clear_has_havepwd();
  inline void set_has_pwd();
  inline void clear_has_pwd();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pwd_;
  ::google::protobuf::int64 money_;
  bool havepwd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static t_BankDatas* default_instance_;
};
// -------------------------------------------------------------------

class t_playerBaseData : public ::google::protobuf::Message {
 public:
  t_playerBaseData();
  virtual ~t_playerBaseData();

  t_playerBaseData(const t_playerBaseData& from);

  inline t_playerBaseData& operator=(const t_playerBaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const t_playerBaseData& default_instance();

  void Swap(t_playerBaseData* other);

  // implements Message ----------------------------------------------

  t_playerBaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const t_playerBaseData& from);
  void MergeFrom(const t_playerBaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline const ::std::string& accountid() const;
  inline void set_accountid(const ::std::string& value);
  inline void set_accountid(const char* value);
  inline void set_accountid(const char* value, size_t size);
  inline ::std::string* mutable_accountid();
  inline ::std::string* release_accountid();
  inline void set_allocated_accountid(::std::string* accountid);

  // required int32 headid = 3;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 3;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // required int64 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // required int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional .rpc.t_BankDatas bankdata = 6;
  inline bool has_bankdata() const;
  inline void clear_bankdata();
  static const int kBankdataFieldNumber = 6;
  inline const ::rpc::t_BankDatas& bankdata() const;
  inline ::rpc::t_BankDatas* mutable_bankdata();
  inline ::rpc::t_BankDatas* release_bankdata();
  inline void set_allocated_bankdata(::rpc::t_BankDatas* bankdata);

  // @@protoc_insertion_point(class_scope:rpc.t_playerBaseData)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_bankdata();
  inline void clear_has_bankdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::std::string* accountid_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int32 sex_;
  ::rpc::t_BankDatas* bankdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static t_playerBaseData* default_instance_;
};
// -------------------------------------------------------------------

class SD_LoadData : public ::google::protobuf::Message {
 public:
  SD_LoadData();
  virtual ~SD_LoadData();

  SD_LoadData(const SD_LoadData& from);

  inline SD_LoadData& operator=(const SD_LoadData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD_LoadData& default_instance();

  void Swap(SD_LoadData* other);

  // implements Message ----------------------------------------------

  SD_LoadData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD_LoadData& from);
  void MergeFrom(const SD_LoadData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m_accountid = 1;
  inline bool has_m_accountid() const;
  inline void clear_m_accountid();
  static const int kMAccountidFieldNumber = 1;
  inline const ::std::string& m_accountid() const;
  inline void set_m_accountid(const ::std::string& value);
  inline void set_m_accountid(const char* value);
  inline void set_m_accountid(const char* value, size_t size);
  inline ::std::string* mutable_m_accountid();
  inline ::std::string* release_m_accountid();
  inline void set_allocated_m_accountid(::std::string* m_accountid);

  // required uint64 m_param = 2;
  inline bool has_m_param() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 2;
  inline ::google::protobuf::uint64 m_param() const;
  inline void set_m_param(::google::protobuf::uint64 value);

  // required int32 m_svrnodeid = 3;
  inline bool has_m_svrnodeid() const;
  inline void clear_m_svrnodeid();
  static const int kMSvrnodeidFieldNumber = 3;
  inline ::google::protobuf::int32 m_svrnodeid() const;
  inline void set_m_svrnodeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.SD_LoadData)
 private:
  inline void set_has_m_accountid();
  inline void clear_has_m_accountid();
  inline void set_has_m_param();
  inline void clear_has_m_param();
  inline void set_has_m_svrnodeid();
  inline void clear_has_m_svrnodeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_accountid_;
  ::google::protobuf::uint64 m_param_;
  ::google::protobuf::int32 m_svrnodeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static SD_LoadData* default_instance_;
};
// -------------------------------------------------------------------

class DS_PlayerData : public ::google::protobuf::Message {
 public:
  DS_PlayerData();
  virtual ~DS_PlayerData();

  DS_PlayerData(const DS_PlayerData& from);

  inline DS_PlayerData& operator=(const DS_PlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DS_PlayerData& default_instance();

  void Swap(DS_PlayerData* other);

  // implements Message ----------------------------------------------

  DS_PlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DS_PlayerData& from);
  void MergeFrom(const DS_PlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_rst = 1;
  inline bool has_m_rst() const;
  inline void clear_m_rst();
  static const int kMRstFieldNumber = 1;
  inline ::google::protobuf::int32 m_rst() const;
  inline void set_m_rst(::google::protobuf::int32 value);

  // required uint32 m_playerid = 2;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // required string m_accountid = 3;
  inline bool has_m_accountid() const;
  inline void clear_m_accountid();
  static const int kMAccountidFieldNumber = 3;
  inline const ::std::string& m_accountid() const;
  inline void set_m_accountid(const ::std::string& value);
  inline void set_m_accountid(const char* value);
  inline void set_m_accountid(const char* value, size_t size);
  inline ::std::string* mutable_m_accountid();
  inline ::std::string* release_m_accountid();
  inline void set_allocated_m_accountid(::std::string* m_accountid);

  // required uint64 m_param = 4;
  inline bool has_m_param() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 4;
  inline ::google::protobuf::uint64 m_param() const;
  inline void set_m_param(::google::protobuf::uint64 value);

  // required int32 m_svrnodeid = 5;
  inline bool has_m_svrnodeid() const;
  inline void clear_m_svrnodeid();
  static const int kMSvrnodeidFieldNumber = 5;
  inline ::google::protobuf::int32 m_svrnodeid() const;
  inline void set_m_svrnodeid(::google::protobuf::int32 value);

  // optional .rpc.t_playerBaseData m_playerinfo = 6;
  inline bool has_m_playerinfo() const;
  inline void clear_m_playerinfo();
  static const int kMPlayerinfoFieldNumber = 6;
  inline const ::rpc::t_playerBaseData& m_playerinfo() const;
  inline ::rpc::t_playerBaseData* mutable_m_playerinfo();
  inline ::rpc::t_playerBaseData* release_m_playerinfo();
  inline void set_allocated_m_playerinfo(::rpc::t_playerBaseData* m_playerinfo);

  // optional .rpc.t_FriendDatas m_friend = 7;
  inline bool has_m_friend() const;
  inline void clear_m_friend();
  static const int kMFriendFieldNumber = 7;
  inline const ::rpc::t_FriendDatas& m_friend() const;
  inline ::rpc::t_FriendDatas* mutable_m_friend();
  inline ::rpc::t_FriendDatas* release_m_friend();
  inline void set_allocated_m_friend(::rpc::t_FriendDatas* m_friend);

  // optional .rpc.t_MailDatas m_mail = 8;
  inline bool has_m_mail() const;
  inline void clear_m_mail();
  static const int kMMailFieldNumber = 8;
  inline const ::rpc::t_MailDatas& m_mail() const;
  inline ::rpc::t_MailDatas* mutable_m_mail();
  inline ::rpc::t_MailDatas* release_m_mail();
  inline void set_allocated_m_mail(::rpc::t_MailDatas* m_mail);

  // @@protoc_insertion_point(class_scope:rpc.DS_PlayerData)
 private:
  inline void set_has_m_rst();
  inline void clear_has_m_rst();
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_accountid();
  inline void clear_has_m_accountid();
  inline void set_has_m_param();
  inline void clear_has_m_param();
  inline void set_has_m_svrnodeid();
  inline void clear_has_m_svrnodeid();
  inline void set_has_m_playerinfo();
  inline void clear_has_m_playerinfo();
  inline void set_has_m_friend();
  inline void clear_has_m_friend();
  inline void set_has_m_mail();
  inline void clear_has_m_mail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_rst_;
  ::google::protobuf::uint32 m_playerid_;
  ::std::string* m_accountid_;
  ::google::protobuf::uint64 m_param_;
  ::rpc::t_playerBaseData* m_playerinfo_;
  ::rpc::t_FriendDatas* m_friend_;
  ::rpc::t_MailDatas* m_mail_;
  ::google::protobuf::int32 m_svrnodeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static DS_PlayerData* default_instance_;
};
// -------------------------------------------------------------------

class SD_InsertPlayer : public ::google::protobuf::Message {
 public:
  SD_InsertPlayer();
  virtual ~SD_InsertPlayer();

  SD_InsertPlayer(const SD_InsertPlayer& from);

  inline SD_InsertPlayer& operator=(const SD_InsertPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD_InsertPlayer& default_instance();

  void Swap(SD_InsertPlayer* other);

  // implements Message ----------------------------------------------

  SD_InsertPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD_InsertPlayer& from);
  void MergeFrom(const SD_InsertPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m_accountid = 1;
  inline bool has_m_accountid() const;
  inline void clear_m_accountid();
  static const int kMAccountidFieldNumber = 1;
  inline const ::std::string& m_accountid() const;
  inline void set_m_accountid(const ::std::string& value);
  inline void set_m_accountid(const char* value);
  inline void set_m_accountid(const char* value, size_t size);
  inline ::std::string* mutable_m_accountid();
  inline ::std::string* release_m_accountid();
  inline void set_allocated_m_accountid(::std::string* m_accountid);

  // required .rpc.t_playerBaseData m_data = 2;
  inline bool has_m_data() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 2;
  inline const ::rpc::t_playerBaseData& m_data() const;
  inline ::rpc::t_playerBaseData* mutable_m_data();
  inline ::rpc::t_playerBaseData* release_m_data();
  inline void set_allocated_m_data(::rpc::t_playerBaseData* m_data);

  // @@protoc_insertion_point(class_scope:rpc.SD_InsertPlayer)
 private:
  inline void set_has_m_accountid();
  inline void clear_has_m_accountid();
  inline void set_has_m_data();
  inline void clear_has_m_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_accountid_;
  ::rpc::t_playerBaseData* m_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static SD_InsertPlayer* default_instance_;
};
// -------------------------------------------------------------------

class SD_SavePlayer : public ::google::protobuf::Message {
 public:
  SD_SavePlayer();
  virtual ~SD_SavePlayer();

  SD_SavePlayer(const SD_SavePlayer& from);

  inline SD_SavePlayer& operator=(const SD_SavePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD_SavePlayer& default_instance();

  void Swap(SD_SavePlayer* other);

  // implements Message ----------------------------------------------

  SD_SavePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD_SavePlayer& from);
  void MergeFrom(const SD_SavePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 m_playerid = 1;
  inline bool has_m_playerid() const;
  inline void clear_m_playerid();
  static const int kMPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 m_playerid() const;
  inline void set_m_playerid(::google::protobuf::uint32 value);

  // required .rpc.t_playerBaseData m_data = 2;
  inline bool has_m_data() const;
  inline void clear_m_data();
  static const int kMDataFieldNumber = 2;
  inline const ::rpc::t_playerBaseData& m_data() const;
  inline ::rpc::t_playerBaseData* mutable_m_data();
  inline ::rpc::t_playerBaseData* release_m_data();
  inline void set_allocated_m_data(::rpc::t_playerBaseData* m_data);

  // @@protoc_insertion_point(class_scope:rpc.SD_SavePlayer)
 private:
  inline void set_has_m_playerid();
  inline void clear_has_m_playerid();
  inline void set_has_m_data();
  inline void clear_has_m_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rpc::t_playerBaseData* m_data_;
  ::google::protobuf::uint32 m_playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static SD_SavePlayer* default_instance_;
};
// -------------------------------------------------------------------

class param_FindPlayer : public ::google::protobuf::Message {
 public:
  param_FindPlayer();
  virtual ~param_FindPlayer();

  param_FindPlayer(const param_FindPlayer& from);

  inline param_FindPlayer& operator=(const param_FindPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const param_FindPlayer& default_instance();

  void Swap(param_FindPlayer* other);

  // implements Message ----------------------------------------------

  param_FindPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const param_FindPlayer& from);
  void MergeFrom(const param_FindPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerId = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 selectPlayerId = 2;
  inline bool has_selectplayerid() const;
  inline void clear_selectplayerid();
  static const int kSelectPlayerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 selectplayerid() const;
  inline void set_selectplayerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rpc.param_FindPlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_selectplayerid();
  inline void clear_has_selectplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 selectplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static param_FindPlayer* default_instance_;
};
// -------------------------------------------------------------------

class SD_FindPlayer : public ::google::protobuf::Message {
 public:
  SD_FindPlayer();
  virtual ~SD_FindPlayer();

  SD_FindPlayer(const SD_FindPlayer& from);

  inline SD_FindPlayer& operator=(const SD_FindPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SD_FindPlayer& default_instance();

  void Swap(SD_FindPlayer* other);

  // implements Message ----------------------------------------------

  SD_FindPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SD_FindPlayer& from);
  void MergeFrom(const SD_FindPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required .rpc.param_FindPlayer param = 2;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline const ::rpc::param_FindPlayer& param() const;
  inline ::rpc::param_FindPlayer* mutable_param();
  inline ::rpc::param_FindPlayer* release_param();
  inline void set_allocated_param(::rpc::param_FindPlayer* param);

  // @@protoc_insertion_point(class_scope:rpc.SD_FindPlayer)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rpc::param_FindPlayer* param_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static SD_FindPlayer* default_instance_;
};
// -------------------------------------------------------------------

class DS_FindPlayerRst : public ::google::protobuf::Message {
 public:
  DS_FindPlayerRst();
  virtual ~DS_FindPlayerRst();

  DS_FindPlayerRst(const DS_FindPlayerRst& from);

  inline DS_FindPlayerRst& operator=(const DS_FindPlayerRst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DS_FindPlayerRst& default_instance();

  void Swap(DS_FindPlayerRst* other);

  // implements Message ----------------------------------------------

  DS_FindPlayerRst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DS_FindPlayerRst& from);
  void MergeFrom(const DS_FindPlayerRst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 bfind = 1;
  inline bool has_bfind() const;
  inline void clear_bfind();
  static const int kBfindFieldNumber = 1;
  inline ::google::protobuf::uint32 bfind() const;
  inline void set_bfind(::google::protobuf::uint32 value);

  // required .rpc.param_FindPlayer param = 2;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline const ::rpc::param_FindPlayer& param() const;
  inline ::rpc::param_FindPlayer* mutable_param();
  inline ::rpc::param_FindPlayer* release_param();
  inline void set_allocated_param(::rpc::param_FindPlayer* param);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 headid = 4;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadidFieldNumber = 4;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rpc.DS_FindPlayerRst)
 private:
  inline void set_has_bfind();
  inline void clear_has_bfind();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_headid();
  inline void clear_has_headid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rpc::param_FindPlayer* param_;
  ::google::protobuf::uint32 bfind_;
  ::google::protobuf::int32 headid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Packet_5fDB_2eproto();
  friend void protobuf_AssignDesc_Packet_5fDB_2eproto();
  friend void protobuf_ShutdownFile_Packet_5fDB_2eproto();

  void InitAsDefaultInstance();
  static DS_FindPlayerRst* default_instance_;
};
// ===================================================================


// ===================================================================

// t_FriendItemData

// required int32 playerid = 1;
inline bool t_FriendItemData::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_FriendItemData::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_FriendItemData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_FriendItemData::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 t_FriendItemData::playerid() const {
  return playerid_;
}
inline void t_FriendItemData::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool t_FriendItemData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_FriendItemData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_FriendItemData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_FriendItemData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& t_FriendItemData::name() const {
  return *name_;
}
inline void t_FriendItemData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void t_FriendItemData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void t_FriendItemData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_FriendItemData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* t_FriendItemData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_FriendItemData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 headid = 3;
inline bool t_FriendItemData::has_headid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_FriendItemData::set_has_headid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_FriendItemData::clear_has_headid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_FriendItemData::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 t_FriendItemData::headid() const {
  return headid_;
}
inline void t_FriendItemData::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// required int64 money = 4;
inline bool t_FriendItemData::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_FriendItemData::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_FriendItemData::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_FriendItemData::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 t_FriendItemData::money() const {
  return money_;
}
inline void t_FriendItemData::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// t_MailItemData

// required string title = 1;
inline bool t_MailItemData::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_MailItemData::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_MailItemData::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_MailItemData::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& t_MailItemData::title() const {
  return *title_;
}
inline void t_MailItemData::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void t_MailItemData::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void t_MailItemData::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_MailItemData::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* t_MailItemData::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_MailItemData::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string content = 2;
inline bool t_MailItemData::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_MailItemData::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_MailItemData::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_MailItemData::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& t_MailItemData::content() const {
  return *content_;
}
inline void t_MailItemData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void t_MailItemData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void t_MailItemData::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_MailItemData::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* t_MailItemData::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_MailItemData::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 time = 3;
inline bool t_MailItemData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_MailItemData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_MailItemData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_MailItemData::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 t_MailItemData::time() const {
  return time_;
}
inline void t_MailItemData::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// t_FriendReqItemData

// required int32 playerid = 1;
inline bool t_FriendReqItemData::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_FriendReqItemData::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_FriendReqItemData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_FriendReqItemData::clear_playerid() {
  playerid_ = 0;
  clear_has_playerid();
}
inline ::google::protobuf::int32 t_FriendReqItemData::playerid() const {
  return playerid_;
}
inline void t_FriendReqItemData::set_playerid(::google::protobuf::int32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool t_FriendReqItemData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_FriendReqItemData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_FriendReqItemData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_FriendReqItemData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& t_FriendReqItemData::name() const {
  return *name_;
}
inline void t_FriendReqItemData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void t_FriendReqItemData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void t_FriendReqItemData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_FriendReqItemData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* t_FriendReqItemData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_FriendReqItemData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 headid = 3;
inline bool t_FriendReqItemData::has_headid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_FriendReqItemData::set_has_headid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_FriendReqItemData::clear_has_headid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_FriendReqItemData::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 t_FriendReqItemData::headid() const {
  return headid_;
}
inline void t_FriendReqItemData::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// required uint32 time = 4;
inline bool t_FriendReqItemData::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_FriendReqItemData::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_FriendReqItemData::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_FriendReqItemData::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 t_FriendReqItemData::time() const {
  return time_;
}
inline void t_FriendReqItemData::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required int64 money = 5;
inline bool t_FriendReqItemData::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void t_FriendReqItemData::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void t_FriendReqItemData::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void t_FriendReqItemData::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 t_FriendReqItemData::money() const {
  return money_;
}
inline void t_FriendReqItemData::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// t_FriendDatas

// repeated .rpc.t_FriendItemData friends = 1;
inline int t_FriendDatas::friends_size() const {
  return friends_.size();
}
inline void t_FriendDatas::clear_friends() {
  friends_.Clear();
}
inline const ::rpc::t_FriendItemData& t_FriendDatas::friends(int index) const {
  return friends_.Get(index);
}
inline ::rpc::t_FriendItemData* t_FriendDatas::mutable_friends(int index) {
  return friends_.Mutable(index);
}
inline ::rpc::t_FriendItemData* t_FriendDatas::add_friends() {
  return friends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendItemData >&
t_FriendDatas::friends() const {
  return friends_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendItemData >*
t_FriendDatas::mutable_friends() {
  return &friends_;
}

// repeated .rpc.t_FriendReqItemData friendreq = 2;
inline int t_FriendDatas::friendreq_size() const {
  return friendreq_.size();
}
inline void t_FriendDatas::clear_friendreq() {
  friendreq_.Clear();
}
inline const ::rpc::t_FriendReqItemData& t_FriendDatas::friendreq(int index) const {
  return friendreq_.Get(index);
}
inline ::rpc::t_FriendReqItemData* t_FriendDatas::mutable_friendreq(int index) {
  return friendreq_.Mutable(index);
}
inline ::rpc::t_FriendReqItemData* t_FriendDatas::add_friendreq() {
  return friendreq_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendReqItemData >&
t_FriendDatas::friendreq() const {
  return friendreq_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_FriendReqItemData >*
t_FriendDatas::mutable_friendreq() {
  return &friendreq_;
}

// -------------------------------------------------------------------

// t_MailDatas

// repeated .rpc.t_MailItemData mails = 1;
inline int t_MailDatas::mails_size() const {
  return mails_.size();
}
inline void t_MailDatas::clear_mails() {
  mails_.Clear();
}
inline const ::rpc::t_MailItemData& t_MailDatas::mails(int index) const {
  return mails_.Get(index);
}
inline ::rpc::t_MailItemData* t_MailDatas::mutable_mails(int index) {
  return mails_.Mutable(index);
}
inline ::rpc::t_MailItemData* t_MailDatas::add_mails() {
  return mails_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::t_MailItemData >&
t_MailDatas::mails() const {
  return mails_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::t_MailItemData >*
t_MailDatas::mutable_mails() {
  return &mails_;
}

// -------------------------------------------------------------------

// t_BankDatas

// required bool havepwd = 1;
inline bool t_BankDatas::has_havepwd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_BankDatas::set_has_havepwd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_BankDatas::clear_has_havepwd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_BankDatas::clear_havepwd() {
  havepwd_ = false;
  clear_has_havepwd();
}
inline bool t_BankDatas::havepwd() const {
  return havepwd_;
}
inline void t_BankDatas::set_havepwd(bool value) {
  set_has_havepwd();
  havepwd_ = value;
}

// required string pwd = 2;
inline bool t_BankDatas::has_pwd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_BankDatas::set_has_pwd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_BankDatas::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_BankDatas::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& t_BankDatas::pwd() const {
  return *pwd_;
}
inline void t_BankDatas::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void t_BankDatas::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void t_BankDatas::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_BankDatas::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* t_BankDatas::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_BankDatas::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 money = 3;
inline bool t_BankDatas::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_BankDatas::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_BankDatas::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_BankDatas::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 t_BankDatas::money() const {
  return money_;
}
inline void t_BankDatas::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// t_playerBaseData

// required string nickname = 1;
inline bool t_playerBaseData::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void t_playerBaseData::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void t_playerBaseData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void t_playerBaseData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& t_playerBaseData::nickname() const {
  return *nickname_;
}
inline void t_playerBaseData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void t_playerBaseData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void t_playerBaseData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_playerBaseData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* t_playerBaseData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_playerBaseData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string accountid = 2;
inline bool t_playerBaseData::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void t_playerBaseData::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void t_playerBaseData::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void t_playerBaseData::clear_accountid() {
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    accountid_->clear();
  }
  clear_has_accountid();
}
inline const ::std::string& t_playerBaseData::accountid() const {
  return *accountid_;
}
inline void t_playerBaseData::set_accountid(const ::std::string& value) {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(value);
}
inline void t_playerBaseData::set_accountid(const char* value) {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(value);
}
inline void t_playerBaseData::set_accountid(const char* value, size_t size) {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* t_playerBaseData::mutable_accountid() {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  return accountid_;
}
inline ::std::string* t_playerBaseData::release_accountid() {
  clear_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountid_;
    accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void t_playerBaseData::set_allocated_accountid(::std::string* accountid) {
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (accountid) {
    set_has_accountid();
    accountid_ = accountid;
  } else {
    clear_has_accountid();
    accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 headid = 3;
inline bool t_playerBaseData::has_headid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void t_playerBaseData::set_has_headid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void t_playerBaseData::clear_has_headid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void t_playerBaseData::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 t_playerBaseData::headid() const {
  return headid_;
}
inline void t_playerBaseData::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// required int64 money = 4;
inline bool t_playerBaseData::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void t_playerBaseData::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void t_playerBaseData::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void t_playerBaseData::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 t_playerBaseData::money() const {
  return money_;
}
inline void t_playerBaseData::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// required int32 sex = 5;
inline bool t_playerBaseData::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void t_playerBaseData::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void t_playerBaseData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void t_playerBaseData::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 t_playerBaseData::sex() const {
  return sex_;
}
inline void t_playerBaseData::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional .rpc.t_BankDatas bankdata = 6;
inline bool t_playerBaseData::has_bankdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void t_playerBaseData::set_has_bankdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void t_playerBaseData::clear_has_bankdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void t_playerBaseData::clear_bankdata() {
  if (bankdata_ != NULL) bankdata_->::rpc::t_BankDatas::Clear();
  clear_has_bankdata();
}
inline const ::rpc::t_BankDatas& t_playerBaseData::bankdata() const {
  return bankdata_ != NULL ? *bankdata_ : *default_instance_->bankdata_;
}
inline ::rpc::t_BankDatas* t_playerBaseData::mutable_bankdata() {
  set_has_bankdata();
  if (bankdata_ == NULL) bankdata_ = new ::rpc::t_BankDatas;
  return bankdata_;
}
inline ::rpc::t_BankDatas* t_playerBaseData::release_bankdata() {
  clear_has_bankdata();
  ::rpc::t_BankDatas* temp = bankdata_;
  bankdata_ = NULL;
  return temp;
}
inline void t_playerBaseData::set_allocated_bankdata(::rpc::t_BankDatas* bankdata) {
  delete bankdata_;
  bankdata_ = bankdata;
  if (bankdata) {
    set_has_bankdata();
  } else {
    clear_has_bankdata();
  }
}

// -------------------------------------------------------------------

// SD_LoadData

// required string m_accountid = 1;
inline bool SD_LoadData::has_m_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SD_LoadData::set_has_m_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SD_LoadData::clear_has_m_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SD_LoadData::clear_m_accountid() {
  if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
    m_accountid_->clear();
  }
  clear_has_m_accountid();
}
inline const ::std::string& SD_LoadData::m_accountid() const {
  return *m_accountid_;
}
inline void SD_LoadData::set_m_accountid(const ::std::string& value) {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  m_accountid_->assign(value);
}
inline void SD_LoadData::set_m_accountid(const char* value) {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  m_accountid_->assign(value);
}
inline void SD_LoadData::set_m_accountid(const char* value, size_t size) {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  m_accountid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SD_LoadData::mutable_m_accountid() {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  return m_accountid_;
}
inline ::std::string* SD_LoadData::release_m_accountid() {
  clear_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_accountid_;
    m_accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SD_LoadData::set_allocated_m_accountid(::std::string* m_accountid) {
  if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accountid_;
  }
  if (m_accountid) {
    set_has_m_accountid();
    m_accountid_ = m_accountid;
  } else {
    clear_has_m_accountid();
    m_accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 m_param = 2;
inline bool SD_LoadData::has_m_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SD_LoadData::set_has_m_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SD_LoadData::clear_has_m_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SD_LoadData::clear_m_param() {
  m_param_ = GOOGLE_ULONGLONG(0);
  clear_has_m_param();
}
inline ::google::protobuf::uint64 SD_LoadData::m_param() const {
  return m_param_;
}
inline void SD_LoadData::set_m_param(::google::protobuf::uint64 value) {
  set_has_m_param();
  m_param_ = value;
}

// required int32 m_svrnodeid = 3;
inline bool SD_LoadData::has_m_svrnodeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SD_LoadData::set_has_m_svrnodeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SD_LoadData::clear_has_m_svrnodeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SD_LoadData::clear_m_svrnodeid() {
  m_svrnodeid_ = 0;
  clear_has_m_svrnodeid();
}
inline ::google::protobuf::int32 SD_LoadData::m_svrnodeid() const {
  return m_svrnodeid_;
}
inline void SD_LoadData::set_m_svrnodeid(::google::protobuf::int32 value) {
  set_has_m_svrnodeid();
  m_svrnodeid_ = value;
}

// -------------------------------------------------------------------

// DS_PlayerData

// required int32 m_rst = 1;
inline bool DS_PlayerData::has_m_rst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DS_PlayerData::set_has_m_rst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DS_PlayerData::clear_has_m_rst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DS_PlayerData::clear_m_rst() {
  m_rst_ = 0;
  clear_has_m_rst();
}
inline ::google::protobuf::int32 DS_PlayerData::m_rst() const {
  return m_rst_;
}
inline void DS_PlayerData::set_m_rst(::google::protobuf::int32 value) {
  set_has_m_rst();
  m_rst_ = value;
}

// required uint32 m_playerid = 2;
inline bool DS_PlayerData::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DS_PlayerData::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DS_PlayerData::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DS_PlayerData::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 DS_PlayerData::m_playerid() const {
  return m_playerid_;
}
inline void DS_PlayerData::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required string m_accountid = 3;
inline bool DS_PlayerData::has_m_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DS_PlayerData::set_has_m_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DS_PlayerData::clear_has_m_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DS_PlayerData::clear_m_accountid() {
  if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
    m_accountid_->clear();
  }
  clear_has_m_accountid();
}
inline const ::std::string& DS_PlayerData::m_accountid() const {
  return *m_accountid_;
}
inline void DS_PlayerData::set_m_accountid(const ::std::string& value) {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  m_accountid_->assign(value);
}
inline void DS_PlayerData::set_m_accountid(const char* value) {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  m_accountid_->assign(value);
}
inline void DS_PlayerData::set_m_accountid(const char* value, size_t size) {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  m_accountid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DS_PlayerData::mutable_m_accountid() {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  return m_accountid_;
}
inline ::std::string* DS_PlayerData::release_m_accountid() {
  clear_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_accountid_;
    m_accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DS_PlayerData::set_allocated_m_accountid(::std::string* m_accountid) {
  if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accountid_;
  }
  if (m_accountid) {
    set_has_m_accountid();
    m_accountid_ = m_accountid;
  } else {
    clear_has_m_accountid();
    m_accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 m_param = 4;
inline bool DS_PlayerData::has_m_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DS_PlayerData::set_has_m_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DS_PlayerData::clear_has_m_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DS_PlayerData::clear_m_param() {
  m_param_ = GOOGLE_ULONGLONG(0);
  clear_has_m_param();
}
inline ::google::protobuf::uint64 DS_PlayerData::m_param() const {
  return m_param_;
}
inline void DS_PlayerData::set_m_param(::google::protobuf::uint64 value) {
  set_has_m_param();
  m_param_ = value;
}

// required int32 m_svrnodeid = 5;
inline bool DS_PlayerData::has_m_svrnodeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DS_PlayerData::set_has_m_svrnodeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DS_PlayerData::clear_has_m_svrnodeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DS_PlayerData::clear_m_svrnodeid() {
  m_svrnodeid_ = 0;
  clear_has_m_svrnodeid();
}
inline ::google::protobuf::int32 DS_PlayerData::m_svrnodeid() const {
  return m_svrnodeid_;
}
inline void DS_PlayerData::set_m_svrnodeid(::google::protobuf::int32 value) {
  set_has_m_svrnodeid();
  m_svrnodeid_ = value;
}

// optional .rpc.t_playerBaseData m_playerinfo = 6;
inline bool DS_PlayerData::has_m_playerinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DS_PlayerData::set_has_m_playerinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DS_PlayerData::clear_has_m_playerinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DS_PlayerData::clear_m_playerinfo() {
  if (m_playerinfo_ != NULL) m_playerinfo_->::rpc::t_playerBaseData::Clear();
  clear_has_m_playerinfo();
}
inline const ::rpc::t_playerBaseData& DS_PlayerData::m_playerinfo() const {
  return m_playerinfo_ != NULL ? *m_playerinfo_ : *default_instance_->m_playerinfo_;
}
inline ::rpc::t_playerBaseData* DS_PlayerData::mutable_m_playerinfo() {
  set_has_m_playerinfo();
  if (m_playerinfo_ == NULL) m_playerinfo_ = new ::rpc::t_playerBaseData;
  return m_playerinfo_;
}
inline ::rpc::t_playerBaseData* DS_PlayerData::release_m_playerinfo() {
  clear_has_m_playerinfo();
  ::rpc::t_playerBaseData* temp = m_playerinfo_;
  m_playerinfo_ = NULL;
  return temp;
}
inline void DS_PlayerData::set_allocated_m_playerinfo(::rpc::t_playerBaseData* m_playerinfo) {
  delete m_playerinfo_;
  m_playerinfo_ = m_playerinfo;
  if (m_playerinfo) {
    set_has_m_playerinfo();
  } else {
    clear_has_m_playerinfo();
  }
}

// optional .rpc.t_FriendDatas m_friend = 7;
inline bool DS_PlayerData::has_m_friend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DS_PlayerData::set_has_m_friend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DS_PlayerData::clear_has_m_friend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DS_PlayerData::clear_m_friend() {
  if (m_friend_ != NULL) m_friend_->::rpc::t_FriendDatas::Clear();
  clear_has_m_friend();
}
inline const ::rpc::t_FriendDatas& DS_PlayerData::m_friend() const {
  return m_friend_ != NULL ? *m_friend_ : *default_instance_->m_friend_;
}
inline ::rpc::t_FriendDatas* DS_PlayerData::mutable_m_friend() {
  set_has_m_friend();
  if (m_friend_ == NULL) m_friend_ = new ::rpc::t_FriendDatas;
  return m_friend_;
}
inline ::rpc::t_FriendDatas* DS_PlayerData::release_m_friend() {
  clear_has_m_friend();
  ::rpc::t_FriendDatas* temp = m_friend_;
  m_friend_ = NULL;
  return temp;
}
inline void DS_PlayerData::set_allocated_m_friend(::rpc::t_FriendDatas* m_friend) {
  delete m_friend_;
  m_friend_ = m_friend;
  if (m_friend) {
    set_has_m_friend();
  } else {
    clear_has_m_friend();
  }
}

// optional .rpc.t_MailDatas m_mail = 8;
inline bool DS_PlayerData::has_m_mail() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DS_PlayerData::set_has_m_mail() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DS_PlayerData::clear_has_m_mail() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DS_PlayerData::clear_m_mail() {
  if (m_mail_ != NULL) m_mail_->::rpc::t_MailDatas::Clear();
  clear_has_m_mail();
}
inline const ::rpc::t_MailDatas& DS_PlayerData::m_mail() const {
  return m_mail_ != NULL ? *m_mail_ : *default_instance_->m_mail_;
}
inline ::rpc::t_MailDatas* DS_PlayerData::mutable_m_mail() {
  set_has_m_mail();
  if (m_mail_ == NULL) m_mail_ = new ::rpc::t_MailDatas;
  return m_mail_;
}
inline ::rpc::t_MailDatas* DS_PlayerData::release_m_mail() {
  clear_has_m_mail();
  ::rpc::t_MailDatas* temp = m_mail_;
  m_mail_ = NULL;
  return temp;
}
inline void DS_PlayerData::set_allocated_m_mail(::rpc::t_MailDatas* m_mail) {
  delete m_mail_;
  m_mail_ = m_mail;
  if (m_mail) {
    set_has_m_mail();
  } else {
    clear_has_m_mail();
  }
}

// -------------------------------------------------------------------

// SD_InsertPlayer

// required string m_accountid = 1;
inline bool SD_InsertPlayer::has_m_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SD_InsertPlayer::set_has_m_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SD_InsertPlayer::clear_has_m_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SD_InsertPlayer::clear_m_accountid() {
  if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
    m_accountid_->clear();
  }
  clear_has_m_accountid();
}
inline const ::std::string& SD_InsertPlayer::m_accountid() const {
  return *m_accountid_;
}
inline void SD_InsertPlayer::set_m_accountid(const ::std::string& value) {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  m_accountid_->assign(value);
}
inline void SD_InsertPlayer::set_m_accountid(const char* value) {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  m_accountid_->assign(value);
}
inline void SD_InsertPlayer::set_m_accountid(const char* value, size_t size) {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  m_accountid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SD_InsertPlayer::mutable_m_accountid() {
  set_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    m_accountid_ = new ::std::string;
  }
  return m_accountid_;
}
inline ::std::string* SD_InsertPlayer::release_m_accountid() {
  clear_has_m_accountid();
  if (m_accountid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_accountid_;
    m_accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SD_InsertPlayer::set_allocated_m_accountid(::std::string* m_accountid) {
  if (m_accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_accountid_;
  }
  if (m_accountid) {
    set_has_m_accountid();
    m_accountid_ = m_accountid;
  } else {
    clear_has_m_accountid();
    m_accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .rpc.t_playerBaseData m_data = 2;
inline bool SD_InsertPlayer::has_m_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SD_InsertPlayer::set_has_m_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SD_InsertPlayer::clear_has_m_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SD_InsertPlayer::clear_m_data() {
  if (m_data_ != NULL) m_data_->::rpc::t_playerBaseData::Clear();
  clear_has_m_data();
}
inline const ::rpc::t_playerBaseData& SD_InsertPlayer::m_data() const {
  return m_data_ != NULL ? *m_data_ : *default_instance_->m_data_;
}
inline ::rpc::t_playerBaseData* SD_InsertPlayer::mutable_m_data() {
  set_has_m_data();
  if (m_data_ == NULL) m_data_ = new ::rpc::t_playerBaseData;
  return m_data_;
}
inline ::rpc::t_playerBaseData* SD_InsertPlayer::release_m_data() {
  clear_has_m_data();
  ::rpc::t_playerBaseData* temp = m_data_;
  m_data_ = NULL;
  return temp;
}
inline void SD_InsertPlayer::set_allocated_m_data(::rpc::t_playerBaseData* m_data) {
  delete m_data_;
  m_data_ = m_data;
  if (m_data) {
    set_has_m_data();
  } else {
    clear_has_m_data();
  }
}

// -------------------------------------------------------------------

// SD_SavePlayer

// required uint32 m_playerid = 1;
inline bool SD_SavePlayer::has_m_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SD_SavePlayer::set_has_m_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SD_SavePlayer::clear_has_m_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SD_SavePlayer::clear_m_playerid() {
  m_playerid_ = 0u;
  clear_has_m_playerid();
}
inline ::google::protobuf::uint32 SD_SavePlayer::m_playerid() const {
  return m_playerid_;
}
inline void SD_SavePlayer::set_m_playerid(::google::protobuf::uint32 value) {
  set_has_m_playerid();
  m_playerid_ = value;
}

// required .rpc.t_playerBaseData m_data = 2;
inline bool SD_SavePlayer::has_m_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SD_SavePlayer::set_has_m_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SD_SavePlayer::clear_has_m_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SD_SavePlayer::clear_m_data() {
  if (m_data_ != NULL) m_data_->::rpc::t_playerBaseData::Clear();
  clear_has_m_data();
}
inline const ::rpc::t_playerBaseData& SD_SavePlayer::m_data() const {
  return m_data_ != NULL ? *m_data_ : *default_instance_->m_data_;
}
inline ::rpc::t_playerBaseData* SD_SavePlayer::mutable_m_data() {
  set_has_m_data();
  if (m_data_ == NULL) m_data_ = new ::rpc::t_playerBaseData;
  return m_data_;
}
inline ::rpc::t_playerBaseData* SD_SavePlayer::release_m_data() {
  clear_has_m_data();
  ::rpc::t_playerBaseData* temp = m_data_;
  m_data_ = NULL;
  return temp;
}
inline void SD_SavePlayer::set_allocated_m_data(::rpc::t_playerBaseData* m_data) {
  delete m_data_;
  m_data_ = m_data;
  if (m_data) {
    set_has_m_data();
  } else {
    clear_has_m_data();
  }
}

// -------------------------------------------------------------------

// param_FindPlayer

// required uint32 playerId = 1;
inline bool param_FindPlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void param_FindPlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void param_FindPlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void param_FindPlayer::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 param_FindPlayer::playerid() const {
  return playerid_;
}
inline void param_FindPlayer::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 selectPlayerId = 2;
inline bool param_FindPlayer::has_selectplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void param_FindPlayer::set_has_selectplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void param_FindPlayer::clear_has_selectplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void param_FindPlayer::clear_selectplayerid() {
  selectplayerid_ = 0u;
  clear_has_selectplayerid();
}
inline ::google::protobuf::uint32 param_FindPlayer::selectplayerid() const {
  return selectplayerid_;
}
inline void param_FindPlayer::set_selectplayerid(::google::protobuf::uint32 value) {
  set_has_selectplayerid();
  selectplayerid_ = value;
}

// -------------------------------------------------------------------

// SD_FindPlayer

// required uint32 playerid = 1;
inline bool SD_FindPlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SD_FindPlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SD_FindPlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SD_FindPlayer::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 SD_FindPlayer::playerid() const {
  return playerid_;
}
inline void SD_FindPlayer::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .rpc.param_FindPlayer param = 2;
inline bool SD_FindPlayer::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SD_FindPlayer::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SD_FindPlayer::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SD_FindPlayer::clear_param() {
  if (param_ != NULL) param_->::rpc::param_FindPlayer::Clear();
  clear_has_param();
}
inline const ::rpc::param_FindPlayer& SD_FindPlayer::param() const {
  return param_ != NULL ? *param_ : *default_instance_->param_;
}
inline ::rpc::param_FindPlayer* SD_FindPlayer::mutable_param() {
  set_has_param();
  if (param_ == NULL) param_ = new ::rpc::param_FindPlayer;
  return param_;
}
inline ::rpc::param_FindPlayer* SD_FindPlayer::release_param() {
  clear_has_param();
  ::rpc::param_FindPlayer* temp = param_;
  param_ = NULL;
  return temp;
}
inline void SD_FindPlayer::set_allocated_param(::rpc::param_FindPlayer* param) {
  delete param_;
  param_ = param;
  if (param) {
    set_has_param();
  } else {
    clear_has_param();
  }
}

// -------------------------------------------------------------------

// DS_FindPlayerRst

// required uint32 bfind = 1;
inline bool DS_FindPlayerRst::has_bfind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DS_FindPlayerRst::set_has_bfind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DS_FindPlayerRst::clear_has_bfind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DS_FindPlayerRst::clear_bfind() {
  bfind_ = 0u;
  clear_has_bfind();
}
inline ::google::protobuf::uint32 DS_FindPlayerRst::bfind() const {
  return bfind_;
}
inline void DS_FindPlayerRst::set_bfind(::google::protobuf::uint32 value) {
  set_has_bfind();
  bfind_ = value;
}

// required .rpc.param_FindPlayer param = 2;
inline bool DS_FindPlayerRst::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DS_FindPlayerRst::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DS_FindPlayerRst::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DS_FindPlayerRst::clear_param() {
  if (param_ != NULL) param_->::rpc::param_FindPlayer::Clear();
  clear_has_param();
}
inline const ::rpc::param_FindPlayer& DS_FindPlayerRst::param() const {
  return param_ != NULL ? *param_ : *default_instance_->param_;
}
inline ::rpc::param_FindPlayer* DS_FindPlayerRst::mutable_param() {
  set_has_param();
  if (param_ == NULL) param_ = new ::rpc::param_FindPlayer;
  return param_;
}
inline ::rpc::param_FindPlayer* DS_FindPlayerRst::release_param() {
  clear_has_param();
  ::rpc::param_FindPlayer* temp = param_;
  param_ = NULL;
  return temp;
}
inline void DS_FindPlayerRst::set_allocated_param(::rpc::param_FindPlayer* param) {
  delete param_;
  param_ = param;
  if (param) {
    set_has_param();
  } else {
    clear_has_param();
  }
}

// optional string name = 3;
inline bool DS_FindPlayerRst::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DS_FindPlayerRst::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DS_FindPlayerRst::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DS_FindPlayerRst::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DS_FindPlayerRst::name() const {
  return *name_;
}
inline void DS_FindPlayerRst::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DS_FindPlayerRst::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DS_FindPlayerRst::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DS_FindPlayerRst::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DS_FindPlayerRst::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DS_FindPlayerRst::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 headid = 4;
inline bool DS_FindPlayerRst::has_headid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DS_FindPlayerRst::set_has_headid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DS_FindPlayerRst::clear_has_headid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DS_FindPlayerRst::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 DS_FindPlayerRst::headid() const {
  return headid_;
}
inline void DS_FindPlayerRst::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::emPacket_Db>() {
  return ::rpc::emPacket_Db_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Packet_5fDB_2eproto__INCLUDED
